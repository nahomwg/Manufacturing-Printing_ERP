<legend> Bank Setup</legend>
@(Html.Kendo().Grid<ExceedERP.Core.Domain.CheckPrint.CPBank>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Template(c => { }).Width(100)
                    .ClientTemplate("<img class='circular-profile-img-small' src ='" + @Url.Content("~/Content/Images/CheckPrint/Logo/Banks/") + "#=LogoFileName#'/>");
          columns.Bound(c => c.Name);
          columns.Bound(c => c.Abbreviation);

          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
      })
      .ToolBar(toolbar => {
          toolbar.Create();
          toolbar.Excel();
          toolbar.Pdf();
      })
      .Editable(editable => editable.Mode(GridEditMode.InLine))
       .Pageable(pagable =>
       {
           pagable.Enabled(true);
           pagable.PageSizes(true);
           pagable.Refresh(true);
           pagable.ButtonCount(10);
           pagable.Input(true);
           pagable.Numeric(false);
       })
       .Events(ev =>
       {
           ev.DataBound("onGridDataBound");
       })
      .Selectable(selectable => {
          selectable.Mode(GridSelectionMode.Single);
          selectable.Type(GridSelectionType.Row);
      })
      .Filterable()

      .Scrollable(s => s.Height(700))
      .DataSource(dataSource => dataSource
          .Ajax()
          .Model(model => model.Id(p => p.CPBankId))
          .Events(ev => ev
                            //.Error("error_handler(\"grid\")")
                            .Error("handleError(\"grid\")")
                            .RequestStart("onRequestStart(\"grid\")")
                            .RequestEnd("onRequestEnd(\"grid\")"))

          .Read(read => read.Action("CPBanks_Read", "Banks"))
          .Create(create => create.Action("CPBanks_Create", "Banks"))
          .Update(update => update.Action("CPBanks_Update", "Banks"))
          .Destroy(destroy => destroy.Action("CPBanks_Destroy", "Banks"))
      ).ClientDetailTemplateId("bank_detail")
)

<script type="text/kendo-template" id="bank_detail">
    @(Html.Kendo().TabStrip()
        .Name("tab_str_#=CPBankId#")
        .SelectedIndex(0)
        .Items(items =>
        {
            items.Add().Text("Account Numbers").Content(@<text>
                @(Html.Kendo().Grid<ExceedERP.Core.Domain.CheckPrint.CPBankAccount>()
                      .Name("grid_#=CPBankId#")
                      .Columns(columns =>
                      {
                          columns.Bound(c => c.AccountNumber);

                          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
                      })
                      .ToolBar(toolbar => {
                          toolbar.Create();
                          //toolbar.Excel();
                          //toolbar.Pdf();
                      })
                      .Events(ev =>
                       {
                           ev.DataBound("onGridDataBound");
                       })
                      .Editable(editable => editable.Mode(GridEditMode.InLine))
                       .Pageable(pagable =>
                       {
                           pagable.Enabled(true);
                           pagable.PageSizes(true);
                           pagable.Refresh(true);
                           pagable.ButtonCount(10);
                           pagable.Input(true);
                           pagable.Numeric(false);
                       })
                      .Selectable(selectable => {
                          selectable.Mode(GridSelectionMode.Single);
                          selectable.Type(GridSelectionType.Row);
                      })
                      .Filterable()
                      .Scrollable(s => s.Height(350))
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Model(model => model.Id(p => p.AccountNumber))
                          .Events(ev => ev
                                            .Error("error_handler(\"grid_#=CPBankId#\")")
                                            .RequestStart("onRequestStart(\"grid_#=CPBankId#\")")
                                            .RequestEnd("onRequestEnd(\"grid_#=CPBankId#\")"))

                          .Read(read => read.Action("CPBanks_Read", "BankAccounts", new { id = "#=CPBankId#" }))
                          .Create(create => create.Action("CPBanks_Create", "BankAccounts", new { id = "#=CPBankId#" }))
                          .Update(update => update.Action("CPBanks_Update", "BankAccounts"))
                          .Destroy(destroy => destroy.Action("CPBanks_Destroy", "BankAccounts"))
                      ).ToClientTemplate()
                )
            </text>);
         items.Add().Text("Logo").Content(@<text>
                <div>
                    @LogoChangeHelper()
                </div>
                <div class="image-container-box">
                    <img class="rectuangular-large-img" src="~/Content/Images/CheckPrint/Logo/Banks/#=LogoFileName#" />
                </div>

            </text>);
        }).ToClientTemplate()
    )
</script>

@helper LogoChangeHelper()
{
    @(Html.Kendo().Upload()
        .Name("files")
        .HtmlAttributes(new { @id= "uploader_#=CPBankId#" })
        .Messages(msg =>
        {
            msg.Select("<i class = \"fa fa-upload\"></i> Upload Photo");
        })
        .ShowFileList(false)
        .Async(s => s.Save("Logo_Upload", "Banks", new { id = "#=CPBankId#" , area= "CheckPrint" })
        )
        .HtmlAttributes(new { accept = "image/*" })
        .Events(events => events.Complete(
                            @<text>
                                function(e) {
                                var ddl = $("\\#grid").data("kendoGrid");
                                ddl.dataSource.read();
                                }
                            </text>
                                   ))
               .ToClientTemplate()
    )
}


<style>
    .full-width-custom-input-box {
        width: 100%;
    }

    .image-container-box {
        border: 1px solid #e6e6e6;
        box-shadow: 0px 2px 3px #888888;
    }

    .rectuangular-large-img {
        max-height: 400px;
        width: auto;
        border: 1px solid #e6e6e6;
        box-shadow: 1px 2px 2px #888888;
    }

    .circular-profile-img {
        z-index: 5;
        height: 150px;
        width: 150px;
        border: 5px solid;
        overflow: hidden;
        border-color: transparent;
        border-color: rgba(255, 255, 255, 0.2);
        transition: transform .5s ease;
        border-radius: 50%;
        vertical-align: middle;
    }

    .circular-profile-img-small {
        z-index: 5;
        height: 70px;
        width: 70px;
        border: 3px solid;
        overflow: hidden;
        border-color: transparent;
        border-color: rgba(255, 255, 255, 0.5);
        border-radius: 50%;
        vertical-align: middle;
        transition: transform .5s ease;
    }

        .circular-profile-img-small:hover {
            transform: scale(1.2);
        }
</style>

<script>
    function handleError(gridName) {
        return function (args) {
            if (args.errors) {
                var grid = $("#" + gridName).data("kendoGrid");
                grid.dataSource.read();
                grid.one("dataBinding", function (e) {
                    e.preventDefault();
                    for (var error in args.errors) {
                        alert(args.errors[error].errors[0]);
                    }
                });
            }
        }
    } 
    function onGridDataBound(e) {
        var grid = this;
        var gridRows = grid.tbody.find("tr");
        for (var i = 0; i < gridRows.length; i++) {
            var row = $(gridRows[i]);
            var dataItem = grid.dataItem(row);
            if (dataItem.HasLinkedCheckBook === true) {
                row.find(".k-grid-edit").hide();
                row.find(".k-grid-delete").hide();
            }
            else {
                row.find(".k-grid-edit").show();
                row.find(".k-grid-delete").show();
            }
        }
    }
</script>
