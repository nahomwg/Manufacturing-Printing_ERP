
@(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.JobCosting.FurnitureIdleTime>()
              .Name("grid")
              .Columns(columns =>
              {
              columns.ForeignKey(c => c.GlFiscalYearId, (IEnumerable)ViewData["FiscalYears"], "GlFiscalYearId", "Name").Title("Year");
              columns.ForeignKey(c => c.GLPeriodId, (IEnumerable)ViewData["Periods"], "GLPeriodId", "Name").EditorTemplateName("YearCascading").Title("Month");

    columns.Command(command =>
    {
        command.Edit();
        command.Destroy();
    }).Width(180);
})
                      .ToolBar(toolbar =>
                      {
    toolbar.Create();
})
                      .Editable(editable => editable.Mode(GridEditMode.InLine))
                      .Pageable(pageable => pageable
                                                 .Input(true)
                                                 .Numeric(false)
                                                 .Refresh(true)
                                                 .PageSizes(true)
                                                 .ButtonCount(5))
                                           .Filterable()
                                           .Scrollable(h => h.Height(500))
                      .DataSource(dataSource => dataSource
                    .Ajax()
                    .Sort(sort=>sort.Add(s=>s.FurnitureIdleTimeID).Descending())
                    .Model(model => model.Id(p => p.FurnitureIdleTimeID))
                    .Read(read => read.Action("IdleTimes_Read", "FurnitureIdleTime"))
                    .Create(create => create.Action("IdleTimes_Create", "FurnitureIdleTime"))
                    .Update(update => update.Action("IdleTimes_Update", "FurnitureIdleTime"))
                    .Destroy(destroy => destroy.Action("IdleTimes_Destroy", "FurnitureIdleTime"))
                      ).ClientDetailTemplateId("DetailTemplate")
)

<script id="DetailTemplate" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip().Name("tabstrip_grid_#=FurnitureIdleTimeID#").SelectedIndex(0).Items(itemn =>
                                                                                        {
                                                                                            itemn.Add().Text("OT").Content(@<text>

          @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.JobCosting.FurnitureIdleTimeOT>()
                                                 .Name("OTgrid#=FurnitureIdleTimeID#")
                                                 .Columns(columns =>
                                                 {
                                                     columns.ForeignKey(c => c.CostCenterId, (IEnumerable)ViewData["CostCenters"], "Values", "Values")
                                                                                                                                                                                                                          .Title("Cost Center").Width(200);                                                                                                                                       //columns.Bound(c => c.OTManualHour);
                                                                                                                                                                                                                                                                                                                                                                                                  //columns.Bound(c => c.OTManualHour);
                                                     columns.Bound(c => c.Rate).Width(100);
                                                     columns.Bound(c => c.Value).ClientFooterTemplate("\\#= sum\\#").Width(125);
                                                     //columns.Bound(c => c.OTCameraHour);
                                                    // columns.Bound(c => c.OTCameraPercentage).Title("Camera (%)").Width(100);
                                                     // columns.Bound(c => c.OTOffsetHour);
                                                    // columns.Bound(c => c.OTOffsetPercentage).Title("Offset (%)").Width(90);
                                                     //columns.Bound(c => c.OTLetterPressHour);
                                                    // columns.Bound(c => c.OTLetterPressPercentage).Title("Letter Press(%)").Width(100);
                                                     //columns.Bound(c => c.OTBindingHour);
                                                    // columns.Bound(c => c.OTBindingPercentage).Title("Binding (%)").Width(100);
                                                     //columns.Bound(c => c.OTComputerHour);
                                                    // columns.Bound(c => c.OTComputerPercentage).Title("Computer (%)").Width(110);
                                                     // columns.Bound(c => c.OTWebHour);
                                                    // columns.Bound(c => c.OTWebPercentage).Title("Web (%)").Width(75);
                                                     //columns.Bound(c => c.OTTotalHour);
                                                 //    columns.Bound(c => c.OTTotalPercentage).Title("Total (%)").Width(80);
                                                     columns.Command(command =>
                                                     {
                                                         command.Edit();
                                                         command.Destroy();
                                                     }).Width(180);
                                                 })
                                                       .ToolBar(toolbar =>
                                                       {
                                                           toolbar.Create();
                                                       })
                                                       .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                       .Pageable(pageable => pageable
                                                                                   .Input(true)
                                                                                   .Numeric(false)
                                                                                   .Refresh(true)
                                                                                   .PageSizes(true)
                                                                                   .ButtonCount(5))
                                                                           .Filterable()
                                                                           .Scrollable(h => h.Height(500))
                                                       .DataSource(dataSource => dataSource
                                                   .Ajax()
                                                   .Aggregates(ag=>ag.Add(a=>a.Value).Sum())
                                                   .Model(model => model.Id(p => p.FurnitureIdleTimeOTID))
                                                   .Read(read => read.Action("IdleTimeOTs_Read", "FurnitureIdleTimeOT", new { id = "#=FurnitureIdleTimeID#" }))
                                                   .Create(create => create.Action("IdleTimeOTs_Create", "FurnitureIdleTimeOT", new { id = "#=FurnitureIdleTimeID#" }))
                                                   .Update(update => update.Action("IdleTimeOTs_Update", "FurnitureIdleTimeOT"))
                                                   .Destroy(destroy => destroy.Action("IdleTimeOTs_Destroy", "FurnitureIdleTimeOT"))
                                                       )

                                                                       .ToClientTemplate())
      </text>);
              itemn.Add().Text("Productive").Content(@<text>

                  @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.JobCosting.FurnitureIdleTimeProductive>()
                                                              .Name("ProductiveGrid#=FurnitureIdleTimeID#")
                                                              .Columns(columns =>
                                                              {
                                                                  columns.ForeignKey(c => c.CostCenterId, (IEnumerable)ViewData["CostCenters"], "Values", "Values")
                                                                                                                                                                                                                         .Title("Cost Center").Width(200);                                                                                                                                       //columns.Bound(c => c.OTManualHour);
                                                                                                                                                                                                                                                                                                                                                                                                 //columns.Bound(c => c.OTManualHour);
                                                                  columns.Bound(c => c.Rate).Width(100);
                                                                  columns.Bound(c => c.Value).ClientFooterTemplate("\\#= sum\\#").Width(125);
                                                                  //columns.Bound(c => c.OTManualHour);
                                                                  //columns.Bound(c => c.ProductiveManualPercentage).Title("Manual (%)").Width(90);
                                                                  ////columns.Bound(c => c.ProductiveMechanicalHour);
                                                                  //columns.Bound(c => c.ProductiveMechanicalPercentage).Title("Mechanichal (%)").Width(125);
                                                                  ////columns.Bound(c => c.ProductiveCameraHour);
                                                                  //columns.Bound(c => c.ProductiveCameraPercentage).Title("Camera (%)").Width(100);
                                                                  //// columns.Bound(c => c.ProductiveOffsetHour);
                                                                  //columns.Bound(c => c.ProductiveOffsetPercentage).Title("Offset (%)").Width(90);
                                                                  ////columns.Bound(c => c.ProductiveLetterPressHour);
                                                                  //columns.Bound(c => c.ProductiveLetterPressPercentage).Title("Letter Press(%)").Width(100);
                                                                  ////columns.Bound(c => c.ProductiveBindingHour);
                                                                  //columns.Bound(c => c.ProductiveBindingPercentage).Title("Binding (%)").Width(100);
                                                                  ////columns.Bound(c => c.ProductiveComputerHour);
                                                                  //columns.Bound(c => c.ProductiveComputerPercentage).Title("Computer (%)").Width(110);
                                                                  //// columns.Bound(c => c.ProductiveWebHour);
                                                                  //columns.Bound(c => c.ProductiveWebPercentage).Title("Web (%)").Width(75);
                                                                  ////columns.Bound(c => c.ProductiveTotalHour);
                                                                  //columns.Bound(c => c.ProductiveTotalPercentage).Title("Total (%)").Width(80);
                                                                  columns.Command(command =>
                                                                  {
                                                                      command.Edit();
                                                                      command.Destroy();
                                                                  }).Width(180);
                                                              })
                                                                                                                                           .ToolBar(toolbar =>
                                                                                                                                           {
                                                                                                                                               toolbar.Create();
                                                                                                                                           })
                                                                                                                                           .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                                                                                                           .Pageable(pageable => pageable
                                                                                                                                                                       .Input(true)
                                                                                                                                                                       .Numeric(false)
                                                                                                                                                                       .Refresh(true)
                                                                                                                                                                       .PageSizes(true)
                                                                                                                                                                       .ButtonCount(5))
                                                                                                                                                               .Filterable()
                                                                                                                                                               .Scrollable(h => h.Height(500))
                                                                                                                                           .DataSource(dataSource => dataSource
                                                                                                                                       .Ajax()
                                                                                                                                       .Aggregates(ag=> {
                                                                                                                                           ag.Add(a => a.Value).Sum();
                                                                                                                                       })
                                                                                                                                       .Model(model => model.Id(p => p.FurnitureIdleTimeProductiveID))
                                                                                                                                       .Read(read => read.Action("IdleTimeProductives_Read", "FurnitureIdleTimeProductive", new { id = "#=FurnitureIdleTimeID#" }))
                                                                                                                                       .Create(create => create.Action("IdleTimeProductives_Create", "FurnitureIdleTimeProductive", new { id = "#=FurnitureIdleTimeID#" }))
                                                                                                                                       .Update(update => update.Action("IdleTimeProductives_Update", "FurnitureIdleTimeProductive"))
                                                                                                                                       .Destroy(destroy => destroy.Action("IdleTimeProductives_Destroy", "FurnitureIdleTimeProductive"))
                                                                                                                                           )

                                                                                                                                                           .ToClientTemplate())
              </text>);

                      itemn.Add().Text(" Non Productive Controllable").Content(@<text>

                          @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.JobCosting.FurnitureIdleTimeNonProductiveControllable>()
                                                                      .Name("NPCGrid#=FurnitureIdleTimeID#")
                                                                      .Columns(columns =>
                                                                      {
                                                                          columns.ForeignKey(c => c.IdleTimeCategoryId, (IEnumerable)ViewData["ControllableIdleTimeCategories"], "IdleTimeCategoryId", "CategoryName").Title("FurnitureIdleTime Category").Width(120);
                                                                          columns.ForeignKey(c => c.CostCenterId, (IEnumerable)ViewData["CostCenters"], "Values", "Values")
                                                                                                                                                                                                                         .Title("Cost Center").Width(200);                                                                                                                                       //columns.Bound(c => c.OTManualHour);
                                                                                                                                                                                                                                                                                                                                                                                                 //columns.Bound(c => c.OTManualHour);
                                                                          columns.Bound(c => c.Rate).Width(100);
                                                                          columns.Bound(c => c.Value).ClientFooterTemplate("\\#= sum\\#").Width(125);
                                                                          ////columns.Bound(c => c.NPCManualHour);
                                                                          //columns.Bound(c => c.NPCManualPercentage).Title("Manual (%)").Width(90);
                                                                          ////columns.Bound(c => c.NPCMechanicalHour);
                                                                          //columns.Bound(c => c.NPCMechanicalPercentage).Title("Mechani chal(%)").Width(100);
                                                                          ////columns.Bound(c => c.NPCCameraHour);
                                                                          //columns.Bound(c => c.NPCCameraPercentage).Title("Camera (%)").Width(95);
                                                                          //// columns.Bound(c => c.NPCOffsetHour);
                                                                          //columns.Bound(c => c.NPCOffsetPercentage).Title("Offset (%)").Width(85);
                                                                          ////columns.Bound(c => c.NPCLetterPressHour);
                                                                          //columns.Bound(c => c.NPCLetterPressPercentage).Title("Letter Press(%)").Width(100);
                                                                          ////columns.Bound(c => c.NPCBindingHour);
                                                                          //columns.Bound(c => c.NPCBindingPercentage).Title("Binding (%)").Width(100);
                                                                          ////columns.Bound(c => c.NPCComputerHour);
                                                                          //columns.Bound(c => c.NPCComputerPercentage).Title("Computer (%)").Width(110);
                                                                          //// columns.Bound(c => c.NPCWebHour);
                                                                          //columns.Bound(c => c.NPCWebPercentage).Title("Web (%)").Width(75);
                                                                          ////columns.Bound(c => c.NPCTotalHour);
                                                                          //columns.Bound(c => c.NPCTotalPercentage).Title("Total (%)").Width(80);
                                                                          columns.Command(command =>
                                                                          {
                                                                              command.Edit();
                                                                              command.Destroy();
                                                                          }).Width(180);
                                                                      })
                                                                          .ToolBar(toolbar =>
                                                                          {
                                                                              toolbar.Create();
                                                                          })
                                                                          .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                                          .Pageable(pageable => pageable
                                                                                                      .Input(true)
                                                                                                      .Numeric(false)
                                                                                                      .Refresh(true)
                                                                                                      .PageSizes(true)
                                                                                                      .ButtonCount(5))
                                                                                              .Filterable()
                                                                                              .Scrollable(h => h.Height(500))
                                                                          .DataSource(dataSource => dataSource
                                                                      .Ajax()
                                                                      .Aggregates(ag=> {
                                                                          ag.Add(a => a.Value).Sum();
                                                                      })
                                                                      .Model(model => model.Id(p => p.FurnitureIdleTimeNonProductiveControllableID))
                                                                      .Read(read => read.Action("IdleTimeNonProductiveControllables_Read", "FurnitureIdleTimeNonProductiveControllable", new { id = "#=FurnitureIdleTimeID#" }))
                                                                      .Create(create => create.Action("IdleTimeNonProductiveControllables_Create", "FurnitureIdleTimeNonProductiveControllable", new { id = "#=FurnitureIdleTimeID#" }))
                                                                      .Update(update => update.Action("IdleTimeNonProductiveControllables_Update", "FurnitureIdleTimeNonProductiveControllable"))
                                                                      .Destroy(destroy => destroy.Action("IdleTimeNonProductiveControllables_Destroy", "FurnitureIdleTimeNonProductiveControllable"))
                                                                          )

                                                                                          .ToClientTemplate())
                      </text>);
                              itemn.Add().Text(" Non Productive Non Controllable").Content(@<text>

                                  @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.JobCosting.FurnitureIdleTimeNonProductiveNonControllable>()
                                                                              .Name("NPNCGrid_#=FurnitureIdleTimeID#")
                                                                              .Columns(columns =>
                                                                              {

                                                                                  columns.ForeignKey(c => c.IdleTimeCategoryId, (IEnumerable)ViewData["NonControllableIdleTimeCategories"], "IdleTimeCategoryId", "CategoryName").Title("FurnitureIdleTime Category").Width(120);
                                                                                  columns.ForeignKey(c => c.CostCenterId, (IEnumerable)ViewData["CostCenters"], "Values", "Values")
                                                                                                                                                                                                                         .Title("Cost Center").Width(200);                                                                                                                                       //columns.Bound(c => c.OTManualHour);
                                                                                                                                                                                                                                                                                                                                                                                                 //columns.Bound(c => c.OTManualHour);
                                                                                  columns.Bound(c => c.Rate).Width(100);
                                                                                  columns.Bound(c => c.Value).ClientFooterTemplate("\\#= sum\\#").Width(125);
                                                                                  //columns.Bound(c => c.NPNCManualHour);
                                                                                  //columns.Bound(c => c.NPNCManualPercentage).Title("Manual (%)").Width(90);
                                                                                  ////columns.Bound(c => c.NPNCMechanicalHour);
                                                                                  //columns.Bound(c => c.NPNCMechanicalPercentage).Title("Mechani chal(%)").Width(100);
                                                                                  ////columns.Bound(c => c.NPNCCameraHour);
                                                                                  //columns.Bound(c => c.NPNCCameraPercentage).Title("Camera (%)").Width(95);
                                                                                  //// columns.Bound(c => c.NPNCOffsetHour);
                                                                                  //columns.Bound(c => c.NPNCOffsetPercentage).Title("Offset (%)").Width(82);
                                                                                  ////columns.Bound(c => c.NPNCLetterPressHour);
                                                                                  //columns.Bound(c => c.NPNCLetterPressPercentage).Title("Letter Press(%)").Width(100);
                                                                                  ////columns.Bound(c => c.NPNCBindingHour);
                                                                                  //columns.Bound(c => c.NPNCBindingPercentage).Title("Binding (%)").Width(100);
                                                                                  ////columns.Bound(c => c.NPNCComputerHour);
                                                                                  //columns.Bound(c => c.NPNCComputerPercentage).Title("Computer (%)").Width(110);
                                                                                  //// columns.Bound(c => c.NPNCWebHour);
                                                                                  //columns.Bound(c => c.NPNCWebPercentage).Title("Web (%)").Width(75);
                                                                                  ////columns.Bound(c => c.NPNCTotalHour);
                                                                                  //columns.Bound(c => c.NPNCTotalPercentage).Title("Total (%)").Width(80);
                                                                                  columns.Command(command =>
                                                                                  {
                                                                                      command.Edit();
                                                                                      command.Destroy();
                                                                                  }).Width(180);
                                                                              })
                                                                                              .ToolBar(toolbar =>
                                                                                              {
                                                                                                  toolbar.Create();
                                                                                              })
                                                                                              .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                                                              .Pageable(pageable => pageable
                                                                                                                          .Input(true)
                                                                                                                          .Numeric(false)
                                                                                                                          .Refresh(true)
                                                                                                                          .PageSizes(true)
                                                                                                                          .ButtonCount(5))
                                                                                                                  .Filterable()
                                                                                                                  .Scrollable(h => h.Height(500))
                                                                                              .DataSource(dataSource => dataSource
                                                                                          .Ajax()
                                                                                          .Aggregates(ag =>
                                                                                          {
                                                                                              ag.Add(a => a.Value).Sum();
                                                                                          })
                                                                                          .Model(model => model.Id(p => p.FurnitureIdleTimeNonProductiveNonControllableID))
                                                                                          .Read(read => read.Action("IdleTimeNonProductiveNonControllables_Read", "FurnitureIdleTimeNonProductiveNonControllable", new { id = "#=FurnitureIdleTimeID#" }))
                                                                                          .Create(create => create.Action("IdleTimeNonProductiveNonControllables_Create", "FurnitureIdleTimeNonProductiveNonControllable", new { id = "#=FurnitureIdleTimeID#" }))
                                                                                          .Update(update => update.Action("IdleTimeNonProductiveNonControllables_Update", "FurnitureIdleTimeNonProductiveNonControllable"))
                                                                                          .Destroy(destroy => destroy.Action("IdleTimeNonProductiveNonControllables_Destroy", "FurnitureIdleTimeNonProductiveNonControllable"))
                                                                                              )

                                                                                                              .ToClientTemplate())
                              </text>);
                                  }).ToClientTemplate())


</script>

<script>
    function filterPeriods() {
        return {
            YearId: $("#GlFiscalYearId").val()

        };
    }
</script>