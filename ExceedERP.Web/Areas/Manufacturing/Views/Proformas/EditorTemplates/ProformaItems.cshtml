@using System.Collections
@using Kendo.Mvc.UI
@model ExceedERP.Core.Domain.Manufacturing.ProductionFollowUp.FurniturePFProformaItems 

<div class="form">
    <div class="row fullrow">
        <div class="col-md-3 ro1">
            <div class="form-group">
                @Html.LabelFor(model => model.JobTypeId, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().DropDownListFor(model => model.JobTypeId)

                              .OptionLabel("--Select--")
                                     .DataTextField("Type")
                                             .DataValueField("JobTypeId")
                                              .Filter("contains")
                                               .Events(e =>
                                              {
                                                  e.Change("onChange");
                                              })
                                         .DataSource(dataSource =>
                                         {
                                             dataSource.Read(read => read.Action("GetJobTypes", "MegaDataProvider", new { area = "ProductionFollowUp" }))
                                                 .ServerFiltering(false);
                                         })
                             .ValuePrimitive(true))
                    @Html.ValidationMessageFor(model => model.JobTypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.JobTypeItemId, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().DropDownListFor(model => model.JobTypeItemId)

                                             .OptionLabel("--Select--")
                                                    .DataTextField("Name")
                                                            .DataValueField("JobTypeItemId")
                                                             .CascadeFrom("JobTypeId")
                                                             .Filter("contains")
                                                        .DataSource(dataSource =>
                                                        {
                                                            dataSource.Read(read => read.Action("GetJobTypeItems", "MegaDataProvider", new { area = "ProductionFollowUp" }).Data("filterJobTypeItem"))
                                                                .ServerFiltering(true);
                                                        })
                                            .ValuePrimitive(true))
                    @Html.ValidationMessageFor(model => model.JobTypeItemId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().TextBoxFor(model => model.Size)
                    )
                    @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>

        <div class="col-md-3 ro1">

            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().NumericTextBoxFor(model => model.Quantity)
                          .Events(e =>
                          {
                              e.Change("onChange");
                          })
                    )
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().NumericTextBoxFor(model => model.UnitPrice)
                          .Events(e =>
                          {
                              e.Change("onChange");
                          })
                    )
                    @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BeforeTax, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().TextBoxFor(model => model.BeforeTax).HtmlAttributes(new { style = "color:red;", @readonly = "readonly" })
                    )
                    @Html.ValidationMessageFor(model => model.BeforeTax, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>


        <div class="col-md-3 ro1">

           

            <div class="form-group">
                @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().TextBoxFor(model => model.Tax).HtmlAttributes(new { style = "color:red;", @readonly = "readonly" })
                    )
                    @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TotalPrice, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().TextBoxFor(model => model.TotalPrice).HtmlAttributes(new { style = "color:red;", @readonly = "readonly" })
                    )
                    @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">

                    @(Html.Kendo().TextBoxFor(model => model.Description)
                    )
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>


    </div>

    
  </div>



