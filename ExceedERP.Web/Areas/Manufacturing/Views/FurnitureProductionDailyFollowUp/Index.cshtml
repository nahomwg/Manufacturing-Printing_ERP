
<label>Daily Follow up</label>

@(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.Production.FurnitureJobOrderProduction>()
                                          .Name("grid")
                                          .Columns(columns =>
                                          {

                                              columns.Bound(c => c.JobNo).Width(100);
                                              columns.ForeignKey(c => c.CustomerId, (IEnumerable)ViewData["Customer"], "Value", "Text").Width(120);
                                              columns.ForeignKey(c => c.JobTypeId, (IEnumerable)ViewData["JobType"], "Value", "Text").Width(120);

                                              columns.Bound(c => c.Unit).Width(100);
                                              columns.Bound(c => c.Quantity).Width(100);
                                              columns.Bound(c => c.DeliveryDate).Width(120);
                                              
                                          })
                                          .Editable(editable => editable.Mode(GridEditMode.InLine))
                                          .Filterable()
                                          .Pageable(pageable => pageable
                                            .Refresh(true)
                                            .PageSizes(true)
                                            .ButtonCount(5))
                                          .Pageable(pageable => pageable
                                          .Refresh(true)
                                          .PageSizes(true)
                                          .ButtonCount(5))
                                          .Events(ev => ev.DetailExpand("detailExpand").DataBound("dataBound"))
                                          .Scrollable(s => s.Height(400))
                                          .DataSource(dataSource => dataSource
                                              .Ajax()
                                              .Sort(sort => sort.Add(e => e.FurnitureJobOrderProductionId).Descending())
                                              .Events(ev => ev.Error("error_handler(\"grid\")")
                                                .RequestStart("onRequestStart(\"grid\")")
                                                .RequestEnd("onRequestEnd(\"grid\")"))
                                              .Model(model => model.Id(p => p.FurnitureJobOrderProductionId))
                                              .Read(read => read.Action("FurnitureJobOrderProductions_Read", "FurnitureProductionDailyFollowUp"))
                                          ).ClientDetailTemplateId("tabstrip")
)
<script id="tabstrip" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip()
        .Name("tab_#=FurnitureJobOrderProductionId#")
        .Items(item1 =>
        {
            item1.Add().Text("Metal").Content(
                @<text>
                    @Metal()
                </text>);
            item1.Add().Text("Wood").Content(
                @<text>
                    @Wood()
                </text>);
            item1.Add().Text("Unfinshed material transfer form").Content(
                @<text>
                    @UnfinishedMaterialTransfer() 
                </text>);

        }).ToClientTemplate())
</script>

@helper Metal()
{
    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.Production.FurnitureDailyProductionFollowUp>()
                                                .Name("metal_#=FurnitureJobOrderProductionId#")
                                                .Columns(columns =>
                                                {
                                                    columns.Bound(c => c.WorkShop).EditorTemplateName("WorkShop");
                                                    columns.ForeignKey(c => c.EmployeeId, (IEnumerable)ViewData["Employee"], "Value", "Text").Width(150);
                                                    columns.ForeignKey(c => c.ManifucturingTaskCategoryId, (IEnumerable)ViewData["TaskCategory"], "Value", "Text").Width(120);


                                                    columns.Bound(c => c.DailyProductionPlan);
                                                    columns.Bound(c => c.DailyProductionActual);

                                                    columns.Bound(c => c.DateExcuted);
                                                    columns.Command(command => { }).Width(180);
                                                })
                                                .ToolBar(toolbar =>
                                                {
                                                    toolbar.Save();
                                                })
                                                .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                .Filterable()
                                                .Events(e => e.DetailExpand("detailExpandMetal"))
                                                .Pageable(pageable => pageable
                                     .Refresh(true)
                                     .PageSizes(true)
                                     .ButtonCount(5))
                                     .ClientDetailTemplateId("tabstrip2")
                                     .Scrollable()
                                     .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .Events(ev => ev.Error("error_handler(\"metal_#=FurnitureJobOrderProductionId#\")")
                                            .RequestStart("onRequestStart(\"metal_#=FurnitureJobOrderProductionId#\")")
                                            .RequestEnd("onRequestEnd(\"metal_#=FurnitureJobOrderProductionId#\")"))
                                        .Batch(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.FurnitureDailyProductionFollowUpId);
                                            model.Field(p => p.EmployeeId).Editable(false);
                                            model.Field(p => p.DailyProductionPlan).Editable(false);
                                            model.Field(p => p.ManifucturingTaskCategoryId).Editable(false);
                                            model.Field(p => p.WorkShop).Editable(false);

                                        })
                                        .Read(read => read.Action("FurnitureDailyProductionFollowUps_Read", "FurnitureDailyFollowupBatch", new { id = "#=FurnitureJobOrderProductionId#", workShop = "#=1#" }))
                                        .Update(update => update.Action("FurnitureDailyProductionFollowUps_Update", "FurnitureDailyFollowupBatch"))
                                    ).ToClientTemplate()

    )

}
<script id="tabstrip2" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip()
                                                                                        .Name("tab2_#=FurnitureDailyProductionFollowUpId#")
                                                                                        .Items(item1 =>
                                                                                        {
                                                                                            item1.Add().Text("Delay Reason").Content(
                                                                                                @<text>
                                                                                                    @DelayReason()
                                                                                                </text>);


                                                                                                }).ToClientTemplate())
</script>

@helper Wood()
{

    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.Production.FurnitureDailyProductionFollowUp>()
        .Name("wood_#=FurnitureJobOrderProductionId#")
        .Columns(columns =>
        {
            columns.Bound(c => c.WorkShop).EditorTemplateName("WorkShop");
            columns.ForeignKey(c => c.ManifucturingTaskCategoryId, (IEnumerable)ViewData["TaskCategory"], "Value", "Text").Width(120);
            columns.ForeignKey(c => c.EmployeeId, (IEnumerable)ViewData["Employee"], "Value", "Text").Width(150);

            columns.Bound(c => c.DailyProductionPlan);
            columns.Bound(c => c.DailyProductionActual);

            columns.Bound(c => c.DateExcuted);
            columns.Command(command => { }).Width(180);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Save();
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Filterable()
        .Events(e => e.DetailExpand("detailExpandWood"))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .ClientDetailTemplateId("tabstrip3")
        .Scrollable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .Events(ev => ev.Error("error_handler(\"wood_#=FurnitureJobOrderProductionId#\")")
            .RequestStart("onRequestStart(\"wood_#=FurnitureJobOrderProductionId#\")")
            .RequestEnd("onRequestEnd(\"wood_#=FurnitureJobOrderProductionId#\")"))
            .Batch(true)
            .Model(model =>
            {
                model.Id(p => p.FurnitureDailyProductionFollowUpId);
                model.Field(p => p.EmployeeId).Editable(false);
                model.Field(p => p.DailyProductionPlan).Editable(false);
                model.Field(p => p.ManifucturingTaskCategoryId).Editable(false);
                model.Field(p => p.WorkShop).Editable(false);

            })
            .Read(read => read.Action("FurnitureDailyProductionFollowUps_Read", "FurnitureDailyFollowupBatch", new { id = "#=FurnitureJobOrderProductionId#", workShop = "#=2#" }))
            .Update(update => update.Action("FurnitureDailyProductionFollowUps_Update", "FurnitureDailyFollowupBatch"))
        ).ToClientTemplate()
    )
}



<script id="tabstrip3" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip()
        .Name("tab3_#=FurnitureDailyProductionFollowUpId#")
        .Items(item1 =>
        {
            item1.Add()
            .Text("Delay Reason")
            .Content(
            @<text>
                @DelayReason()
            </text>);
        }).ToClientTemplate())
</script>


@helper DelayReason()    
{
    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.Production.FurnitureProductionDailyFollowUpDelayReason>()
                        .Name("reason_#=FurnitureDailyProductionFollowUpId#")
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.ProductionDelayReason).EditorTemplateName("DelayReasonTemplate");
                            columns.Bound(c => c.Remark);
                            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
                        })
                        .ToolBar(toolbar =>
                        {
                            toolbar.Create();
                        })
                        .Editable(editable => editable.Mode(GridEditMode.InLine))
                        .Scrollable()
                        .Events(ev => ev.DataBound("delayResonDataBound"))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Events(ev => ev.Error("error_handler(\"reason_#=FurnitureDailyProductionFollowUpId#\")")
                    .RequestStart("onRequestStart(\"reason_#=FurnitureDailyProductionFollowUpId#\")")
                    .RequestEnd("onRequestEnd(\"reason_#=FurnitureDailyProductionFollowUpId#\")"))
                            .Model(model => model.Id(p => p.FurnitureProductionDailyFollowUpDelayReasonId))
                            .Read(read => read.Action("FurnitureProductionDailyFollowUpDelayReasons_Read", "FurnitureDailyFollowUpDelayReason", new { followUpId = "#=FurnitureDailyProductionFollowUpId#" }))
                            .Create(create => create.Action("FurnitureProductionDailyFollowUpDelayReasons_Create", "FurnitureDailyFollowUpDelayReason", new { followUpId = "#=FurnitureDailyProductionFollowUpId#" }))
                            .Update(update => update.Action("FurnitureProductionDailyFollowUpDelayReasons_Update", "FurnitureDailyFollowUpDelayReason"))
                            .Destroy(destroy => destroy.Action("FurnitureProductionDailyFollowUpDelayReasons_Destroy", "FurnitureDailyFollowUpDelayReason"))
                        ).ToClientTemplate()
    )
}


@helper UnfinishedMaterialTransfer()
{
    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Manufacturing.Production.FurnitureUnfinishedMaterialTransferForm>()
                      .Name("Transfer_#=FurnitureJobOrderProductionId#")
                      .Columns(columns =>
                      {
                          columns.ForeignKey(c => c.JobTypeId, (IEnumerable)ViewData["JobType"], "Value", "Text").Width(120);

                          columns.Bound(c => c.TransferDate).Width(120);
                          columns.ForeignKey(c => c.TransfererId, (IEnumerable)ViewData["Employee"], "Value", "Text").Width(150);
                          columns.ForeignKey(c => c.ReceiverId, (IEnumerable)ViewData["Employee"], "Value", "Text").Width(150);
                          columns.Bound(c => c.QualityGrade).Width(100);

                          columns.Bound(c => c.Quantity).Width(100).ClientFooterTemplate("Total Quantity: \\#=sum\\# ");
                          columns.Command(command =>
                          {
                              command.Edit().Text(" ").IconClass("fa fa-pencil").HtmlAttributes(new { title = "Edit" }); 
                              command.Destroy().Text(" ").IconClass("fa fa-trash").HtmlAttributes(new { title = "Delete" }); 
                              command.Custom("send").Text("Send").IconClass("").HtmlAttributes(new { @class = "send", title = "" }).Click("handleSend");

                          }).Width(200);
                      })
                      .ToolBar(toolbar =>
                      {
                          toolbar.Create();
                      })

                      .Pageable(pageable => pageable
                                     .Refresh(true)
                                     .PageSizes(true)
                                     .ButtonCount(5))
                      .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("UnfinishedMaterialTemplate"))
                      .Filterable()
                      .Events(ev => ev.DataBound("onChildDataBound"))
                      .Scrollable()
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Events(ev => ev.Error("error_handler(\"Transfer_#=FurnitureJobOrderProductionId#\")")
                            .RequestStart("onRequestStart(\"Transfer_#=FurnitureJobOrderProductionId#\")")
                            .RequestEnd("onRequestEnd(\"Transfer_#=FurnitureJobOrderProductionId#\")"))
                            .Aggregates(a => a.Add(s => s.Quantity).Sum())
                          .Model(model => model.Id(p => p.FurnitureUnfinishedMaterialTransferFormId))
                          .Read(read => read.Action("FurnitureUnfinishedMaterialTransferForms_Read", "FurnitureUnfinishedMaterialTransferForm", new { id = "#=FurnitureJobOrderProductionId#" }))
                          .Create(create => create.Action("FurnitureUnfinishedMaterialTransferForms_Create", "FurnitureUnfinishedMaterialTransferForm", new { id = "#=FurnitureJobOrderProductionId#" }))
                          .Update(update => update.Action("FurnitureUnfinishedMaterialTransferForms_Update", "FurnitureUnfinishedMaterialTransferForm"))
                          .Destroy(destroy => destroy.Action("FurnitureUnfinishedMaterialTransferForms_Destroy", "FurnitureUnfinishedMaterialTransferForm"))
                      ).ToClientTemplate()
    )
}





<script type="text/javascript">
    function filterTaskCategory() {
        return {
            taskType: $("#WorkShop").val()
        }
    }

    function filterEmployee() {
        return {
            text: $("#EmployeeId").val()
        }
    }

    function filterJobType() {
        return {
            text: $("#JobTypeId").val()
        }
    }
    function onChildDataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);           
            if (dataItem.IsSent) {
                $(this).find(".k-grid-edit").remove();
                $(this).find(".k-grid-delete").remove();
                $(this).find(".k-grid-send").remove();
            }

        });

    }
    function delayResonDataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            
            if (IsClosed) {
                $(this).find(".k-grid-edit").remove();
                $(this).find(".k-grid-delete").remove();
                
            }

        });
    }
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);
            $(this).find(".k-grid-reject").hide();
            if (dataItem.IsOnlineApproved) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-approve").hide();
                $(this).find(".k-grid-reject").hide();
                $(this).find(".k-grid-delete").hide();
            }
            else if (dataItem.IsSendForApproval) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-delete").hide();
                $(this).find(".k-grid-reject").show();

                $(this).find(".k-grid-approve").show();
            }
            else {
                $(this).find(".k-grid-approve").hide();
            }

        });
    }
    var masterRow;
    var masterGrid;
    var masterDataItem;
    var codeid;
    var isApproved;
    var isChecked;
    var IsClosed;
    function detailExpand(e) {
        masterRow = e.masterRow;
        masterGrid = $("#grid").data("kendoGrid");
        masterDataItem = masterGrid.dataItem(masterRow);
        codeid = masterDataItem.FurnitureJobOrderProductionId;
        isApproved = masterDataItem.IsOnlineApproved;
        isChecked = masterDataItem.IsOnlineTransferred;
        IsClosed = masterDataItem.IsClosed;
        if (isChecked || isApproved) {
            $(".k-grid-add", "#grid_" + codeid).hide();
            if (IsClosed) {
                $(".k-grid-top", "#metal_" + codeid).hide();
                $(".k-grid-top", "#wood_" + codeid).hide();
                $(".k-grid-top", "#Transfer_" + codeid).hide();
            }
        }


    }
    function detailExpandMetal(e) {
        masterRow = e.masterRow;
        var grid = $("#metal_" + codeid).data("kendoGrid");
        masterDataItem = grid.dataItem(masterRow);
        var id = masterDataItem.FurnitureDailyProductionFollowUpId
            if(IsClosed){
                $(".k-grid-top", "#reason_" + id).hide();
            }
    }
    function detailExpandWood(e) {
        masterRow = e.masterRow;
        var grid = $("#wood_" + codeid).data("kendoGrid");
        masterDataItem = grid.dataItem(masterRow);
        var id = masterDataItem.FurnitureDailyProductionFollowUpId
        if (IsClosed) {
            $(".k-grid-top", "#reason_" + id).hide();
        }
    }

    function handleSend(e) {

        if (confirm("Are you sure you want to send this to assembly/finishing")) {
            //var grid = this;
            var grid = $("#Transfer_" + codeid).data("kendoGrid");
            var dataItem = grid.dataItem(e.currentTarget.closest("tr"));
            var id = dataItem.FurnitureUnfinishedMaterialTransferFormId;
            $.ajax({
                type: "POST",
                url: '@Url.Action("SendUnfinishedGoodsForAssembly", "FurnitureProductionDailyFollowUp", new { Area = "Manufacturing" })',
                data: { id: id},
                success: function (result) {
                    if (result.Success) {
                        toastr.success(result.Message);
                        var grid = $("#Transfer_" + codeid).data("kendoGrid");
                        grid.dataSource.read();
                    }
                    else {
                        toastr.error(result.Message);
                    }
                },
                error: function (result) {
                    alert(result)
                }
            });
        }
    }

</script>
<style>
    div.k-edit-form-container {
        width: auto;
        height: auto;
    }

    .row .col-sm-2 {
        width: 150px;
    }

    .row {
        margin: auto;
    }
</style>