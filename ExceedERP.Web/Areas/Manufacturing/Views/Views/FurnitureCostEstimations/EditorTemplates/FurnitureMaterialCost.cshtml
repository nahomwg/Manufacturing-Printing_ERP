@model ExceedERP.Core.Domain.Furniture.FurnitureMaterialCost
@using ExceedERP.Core.Localization

<form id="lineForm" method="post">


    @Html.HiddenFor(model => model.FurnitureMaterialCostId)

    <div class="form-group row">
        <label for="cat" class="control-label control-label col-sm-2 text-right text-right">Store:</label>

        <div class="col-sm-8">
            @(Html.Kendo().DropDownListFor(m => m.StoreCode)
                                .OptionLabel(Resources.Select)
                                .DataTextField("Name")
                                .DataValueField("StoreCode")
                                .Events(ev =>
                                {
                                    ev.Change("selectInventory").DataBound("selectInventory");

                                }).DataSource(dataSource =>
                                {
                                    dataSource.Read(read => read.Action("GetAllStores", "PrintingEstimationDataProvider"));
                                //.ServerFiltering(true);
                            })
                                .Filter("contains")
                                .MinLength(2)
                                .ValuePrimitive(true)
            )
        </div>
    </div>

    <div class="row">
        <label for="cat" class="control-label control-label col-sm-2 text-right text-right">Category:</label>
        <div class="col-sm-8">
            @(Html.Kendo().DropDownListFor(m => m.InventoryCategoryId)
                                        .OptionLabel(Resources.Select)
                                            .DataTextField("Name")
                                            .DataValueField("ItemCategoryCode")
                                            //    .BindTo((IEnumerable)ViewData["Items"])
                                            .DataSource(dataSource =>
                                            {
                                                dataSource.Read(read => read.Action("GetItemCategory", "PrintingEstimationDataProvider", new { Area = "Printing" }));
                                                //.ServerFiltering(true);
                                            })
                                            .Filter("contains")
                                            .MinLength(2)
                                            .ValuePrimitive(true)
            )
        </div>
    </div>


    <div class="form-group row">
        <label for="Product" class="control-label col-sm-2 text-right">Item:</label>
        <div class="col-sm-8">
@(Html.Kendo().DropDownListFor(model => model.InventoryId)
        .DataTextField("Name")
        .DataValueField("ItemCode")
        .Events(ev =>
        {
            ev.Change("selectInventory").DataBound("selectInventory");

        })
                                                                                                                                                    .CascadeFrom("InventoryCategoryId")

                        //    .BindTo((IEnumerable)ViewData["Items"])
                        .DataSource(dataSource =>
                        {
                            dataSource.Read(read => read.Action("GetItems1", "PrintingEstimationDataProvider", new { Area = "Printing" })
                            .Data("filterCategories"))
                            .ServerFiltering(true);
                        })

                        .Filter("contains")
                        .MinLength(2)
                        .ValuePrimitive(true)
            )
        </div>
    </div>

    <div class="form-group row">
        <label for="Balance" class="control-label col-sm-2 text-right col-form-label">Balance:</label>
        <div class="col-sm-8">
            @(Html.Kendo().TextBoxFor(model => model.Balance)
                                        .HtmlAttributes(new
                                        { style = "color:red;", @readonly = "readonly" }))
        </div>
    </div> 
    
    <div class="form-group row">
        <label for="Quantity" class="control-label col-sm-2 text-right col-form-label">Quantity:</label>
        <div class="col-sm-8">
            @(Html.Kendo().TextBoxFor(model => model.Quantity)
                                .HtmlAttributes(new
                                { onchange = "onChange(this)" }))
        </div>
    </div>


    <div class="form-group row">
        <label for="UnitPrice" class="control-label col-sm-2 text-right col-form-label">Unit Price:</label>
        <div class="col-sm-8">
            @(Html.Kendo().TextBoxFor(model => model.UnitPrice)
                                          .HtmlAttributes(new { style = "color:red;", onchange = "onChange(this)"/*, @readonly = "readonly" */}))
        </div>
    </div>


    <div class="form-group row">
        <label for="TotalPrice" class="control-label col-sm-2 text-right col-form-label">Total Price:</label>
        <div class="col-sm-8">
            @(Html.Kendo().TextBoxFor(model => model.TotalPrice)
.HtmlAttributes(new { style = "color:red;", @readonly = "readonly" }) )
        </div>
    </div>

</form>

<style>
    /*.label {
        float: left;
    }*/
</style>