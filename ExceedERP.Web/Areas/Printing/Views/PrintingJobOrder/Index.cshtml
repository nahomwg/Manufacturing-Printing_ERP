@using ExceedERP.Core.Domain.Printing


<label>Job Order</label>
@(Html.Kendo().Grid<PrintingJobOrder>()
                              .Name("grid")
                              .Columns(columns =>
                              {
                                  columns.ForeignKey(c => c.CustomerId, (IEnumerable)ViewData["Customer"], "Value", "Text").Width(120).Title("Customer");
                                  columns.Bound(c => c.JobStartDate).Width(120);
                                  columns.Bound(c => c.DeliveryDate).Width(120);
                                  columns.Bound(c => c.CRVNo).Width(100);
                                  columns.Bound(c => c.AdvancePaymentInPercent).Width(90);
                                  columns.Bound(c => c.Remark).Width(100);
                                  columns.Command(command =>
                                  {
                                      //command.Edit().Text(" ");
                                      command.Custom("check").Text(" ").IconClass("fa fa-check").HtmlAttributes(new { @class = "check", title = "check" }).Click("handleChecked");
                                      command.Custom("approve").Text(" ").IconClass("fa fa-thumbs-o-up").HtmlAttributes(new { @class = "approve", title = "approve" }).Click("handleApprove");
                                      //command.Destroy().Text(" ");
                                  }).Width(180);
                              })
                              .ToolBar(toolbar =>
                              {
                                  toolbar.Create();
                              })
                              .Editable(editable => editable.Mode(GridEditMode.PopUp)
                              .TemplateName("PrintingJoborderEditorTemplate"))
                              .Filterable()
                              .Scrollable(s => s.Height(400))
                              .Events(ev => ev.DetailExpand("detailExpand")
                              .DataBound("dataBound"))
                              .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .Sort(sort => sort.Add(e => e.PrintingJobOrderId).Descending())
                                  .Events(ev => ev.Error("error_handler(\"grid\")")
                                            .RequestStart("onRequestStart(\"grid\")")
                                            .RequestEnd("onRequestEnd(\"grid\")"))
                                  .Model(model => model.Id(p => p.PrintingJobOrderId))
                                  .Read(read => read.Action("PrintingJobOrder_Read", "PrintingJobOrder"))
                                  .Create(create => create.Action("PrintingJobOrder_Create", "PrintingJobOrder"))
                              //.Update(update => update.Action("FurnitureJobOrderForms_Update", "PrintingJobOrder"))
                              //.Destroy(destroy => destroy.Action("FurnitureJobOrderForms_Destroy", "PrintingJobOrder"))
                              ).ClientDetailTemplateId("tabstrip")
)


<script id="tabstrip" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip()
                                .Name("tab_#=PrintingJobOrderId#")
                                .Items(item1 =>
                                {
                                    item1.Add().Text("job Item").Content(
                                    @<text>
                                        @JobOrderItem()
                                    </text>);
                                        }).ToClientTemplate())
</script>


@helper JobOrderItem()
{
    @(Html.Kendo().Grid<PrintingJobOrderItem>()
                              .Name("grid_#=PrintingJobOrderId#")
                              .Columns(columns =>
                              {
                                  columns.ForeignKey(c => c.JobTypeId, (IEnumerable)ViewData["JobType"], "Value", "Text").Width(120);
                                  columns.Bound(c => c.Quantity);
                                  columns.Bound(c => c.NumberOfPages);
                                  columns.Bound(c => c.UnitPrice);
                                  columns.Bound(c => c.TotalPrice);
                                  columns.Bound(c => c.Remark);
                                  //columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
                              })
                              //.ToolBar(toolbar =>
                              //{
                              //    toolbar.Create();
                              //})
                              .Editable(editable => editable.Mode(GridEditMode.InLine))
                              .Filterable()
                              .Events(ev => ev.DataBound("onChildDataBound"))
                              .Scrollable()
                              .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .Events(ev => ev.Error("error_handler(\"grid_#=PrintingJobOrderId#\")")
                                            .RequestStart("onRequestStart(\"grid_#=PrintingJobOrderId#\")")
                                            .RequestEnd("onRequestEnd(\"grid_#=PrintingJobOrderId#\")"))
                                  .Model(model =>
                                  {
                                      model.Id(p => p.PrintingJobOrderItemId);
                                      model.Field(p => p.JobTypeId).Editable(false);
                                      model.Field(p => p.Quantity).Editable(false);
                                      model.Field(p => p.UnitPrice).Editable(false);
                                      model.Field(p => p.NumberOfPages).Editable(false);
                                      model.Field(p => p.TotalPrice).Editable(false);
                                  })
                                  .Read(read => read.Action("PrintingJobOrderItem_Read", "PrintingJobOrderItem", new { id = "#=PrintingJobOrderId#" }))
                              //.Create(create => create.Action("FurnitureJobOrderItems_Create", "FurnitureJobOrderItem", new { id = "#=PrintingJobOrderId#" }))
                              //.Update(update => update.Action("FurnitureJobOrderItems_Update", "FurnitureJobOrderItem"))
                              //.Destroy(destroy => destroy.Action("FurnitureJobOrderItems_Destroy", "FurnitureJobOrderItem"))
                              ).ToClientTemplate()
    )
}


<script type="text/javascript">

    function filterProformaNo() {
        return {
            text: $("#PrintingProformaInvoiceId").data("kendoDropDownList").filterInput.val(),
        }
    }

    function filterJobType() {
        return {
            text: $("#JobTypeId").data("kendoDropDownList").filterInput.val(),
        }
    }

    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);
            $(this).find(".k-grid-reject").hide();
            if (dataItem.IsOnlineApproved) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-approve").hide();
                $(this).find(".k-grid-reject").hide();
                $(this).find(".k-grid-delete").hide();
                if (dataItem.JobClosed) {
                    $(this).addClass("Job-Closed");
                }
            }
            else if (dataItem.IsSendForApproval) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-delete").hide();
                $(this).find(".k-grid-reject").show();

                $(this).find(".k-grid-approve").show();
            }

            else {
                $(this).find(".k-grid-approve").hide();
            }

        });
    }
    var masterRow;
    var masterGrid;
    var masterDataItem;
    var codeid;
    var isApproved;
    var isChecked;
    function detailExpand(e) {
        masterRow = e.masterRow;
        masterGrid = $("#grid").data("kendoGrid");
        masterDataItem = masterGrid.dataItem(masterRow);

        codeid = masterDataItem.PrintingJobOrderId;
        isApproved = masterDataItem.IsOnlineApproved;
        isChecked = masterDataItem.IsOnlineTransferred;
        if (isChecked || isApproved) {
            $(".k-grid-add", "#grid_" + codeid).hide();

        }


    }
    function onChildDataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);
            if (isChecked == true || isApproved) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-delete").hide();
                if (dataItem.IsClosed) {

                    $(this).addClass("Job-Closed");
                }
            }


        });

    }
    function handleChecked(e) {

        if (confirm("Are you sure you this form is checked?")) {
            var grid = this;
            var dataItem = grid.dataItem(e.currentTarget.closest("tr"));
            var id = dataItem.PrintingJobOrderId;
            $.ajax({
                type: "POST",
                url: '@Url.Action("CheckJob", "PrintingJobOrder", new { Area = "Printing" })',
                data: { id: id},
                success: function (result) {
                    if (result.Success) {
                        toastr.success(result.Message);
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        toastr.error(result.Message);
                    }
                },
                error: function (result) {
                    alert(result)
                }
            });
        }
    }

    function handleApprove(e) {
        if (confirm("Are you sure you want to approve?")) {
            var grid = this;
            dataItem = grid.dataItem(e.currentTarget.closest("tr"));
            $.ajax({
                type: "POST",
                url: '@Url.Action("ApproveJobOrder", "PrintingJobOrder", new { Area = "Printing" })',
                data: { id: dataItem.PrintingJobOrderId},
                success: function (result) {
                    if (result.Success) {
                        toastr.success(result.Message)
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        toastr.error(result.Message)
                    }
                },
                error: function (result) {
                    alert(result)
                }
            });
        }
    }

</script>



<style>
    div.k-edit-form-container {
        width: auto;
        height: auto;
    }

    .row .col-sm-2 {
        width: 150px;
    }

    .row {
        margin: auto;
    }

    .Job-Closed {
        background-color: #CCCCCC;
    }
</style>