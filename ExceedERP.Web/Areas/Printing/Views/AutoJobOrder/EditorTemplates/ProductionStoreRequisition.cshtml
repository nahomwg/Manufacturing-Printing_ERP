
@model ExceedERP.Core.Domain.Inventory.StoreRequisition

@Html.HiddenFor(model => model.StoreRequisitionID)

<div class="form">
    <div class="row">
        <div class="col-md-1">
            </div>

                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label col-md-8" })
                        <div>
                            @Html.Kendo().TextBoxFor(model => model.Reference)
                            @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">

                    <div class="form-group">
                        @Html.LabelFor(model => model.OrgStructureId, htmlAttributes: new { @class = "control-label col-md-8" })
                        <div>
                            @*@Html.Kendo().TextBoxFor(model => model.OrgStructureId).HtmlAttributes(new { @readonly = "readonly" })*@
                            @(Html.Kendo().DropDownListFor(model => model.OrgStructureId)
                                .ValuePrimitive(true)
                                .OptionLabel("Select Work Unit")
                                .DataTextField("Name")
                                .DataValueField("OrgStructureId")
                                .Filter("contains")
                                .DataSource(dataSource =>
                                {
                                    dataSource.Read(read => read.Action("GetSelectedDepartments", "HRMDataProvider", new {area = "HRM"}))
                                        .ServerFiltering(false);
                                })
                                )
                        </div>
                    </div>
                </div>
                <div class="col-md-3">

                    <div class="form-group">
                        @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "control-label col-md-8" })
                        <div>
                            @(Html.Kendo().DropDownListFor(model => model.BranchId)
                                    .ValuePrimitive(true)
                                    .OptionLabel("Select Branch...")
                                    .DataTextField("Name")
                                    .DataValueField("BranchId")
                                    .Filter("contains")
                                    .DataSource(dataSource =>
                                    {
                                        dataSource.Read(read => read.Action("GetAllBranches", "ProductionDataProvider"))
                                            .ServerFiltering(false);
                                    })
                            )

                            @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
    <div class="row">
        <div class="col-md-1">
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.StoreCode, htmlAttributes: new { @class = "control-label col-md-8" })
                <div>
                    @(Html.Kendo().DropDownListFor(model => model.StoreCode)
                            .ValuePrimitive(true)
                            .OptionLabel("Select Store...")
                            .DataTextField("Name")
                            .DataValueField("StoreCode")
                            .Filter("contains")
                            .CascadeFrom("BranchId")
                            .DataSource(dataSource =>
                            {
                                dataSource.Read(read => read.Action("GetAllStoresByBranch", "ProductionDataProvider").Data("filterStoresByBranch"))
                                    .ServerFiltering(true);
                            })
                    )
                    @Html.ValidationMessageFor(model => model.StoreCode, "", new { @class = "text-danger" })
                </div>
            </div>



        </div>
        <div class="col-md-3">

            <div class="form-group">
                @Html.LabelFor(model => model.GLPeriodId, htmlAttributes: new { @class = "control-label col-md-8" })
                <div>
                    @(Html.Kendo().DropDownListFor(model => model.GLPeriodId)
                            .ValuePrimitive(true)
                            .OptionLabel("Select Period...")
                            .DataTextField("Name")
                            .DataValueField("GLPeriodId")
                            .CascadeFrom("StoreCode")
                            .Filter("contains")
                            .Events(e =>
                            {
                                e.Change("onSelectedPeriod");
                            })
                            .DataSource(dataSource =>
                            {
                                dataSource.Read(read => read.Action("GetOpenInventoryPeriodsByStore", "ProductionDataProvider").Data("filterPeriodsByStore"))
                                    .ServerFiltering(true);
                            })
                    )
                    @Html.ValidationMessageFor(model => model.GLPeriodId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.RequestDate, htmlAttributes: new { @class = "control-label col-md-8" })
                <div>
                    @Html.Kendo().DatePickerFor(model => model.RequestDate)
                    @Html.ValidationMessageFor(model => model.RequestDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-1">
        </div>


        <div class="col-md-3">

            <div class="form-group">
                @Html.LabelFor(model => model.PlateNo, htmlAttributes: new { @class = "control-label col-md-8" })
                <div>
                    @Html.Kendo().TextBoxFor(model => model.PlateNo)
                    @Html.ValidationMessageFor(model => model.PlateNo, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="col-md-3">

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-8" })
                <div>
                    @(Html.Kendo().DropDownListFor(model => model.EmployeeId)
                            .ValuePrimitive(true)
                            .OptionLabel("Select Employee")
                            .DataTextField("Name")
                            .DataValueField("Code")
                            .Filter("contains")
                            .DataSource(dataSource =>
                            {
                                dataSource.Read(read => read.Action("GetEmployes", "ProductionDataProvider"))
                                        .ServerFiltering(false);
                            }))
                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">


            <div class="form-group">
                @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-8" })
                <div>
                    @Html.Kendo().TextBoxFor(model => model.Remark)
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.JobOrderNo, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-md-6">
                    @(Html.Kendo().DropDownListFor(model => model.JobOrderNo)
                          .ValuePrimitive(true)
                          .DataTextField("Name")
                          .DataValueField("Value")
                          .Filter(FilterType.Contains)
                          .OptionLabel("Select Job Order ")
                          .HtmlAttributes(new { style = "width:100%" })
                          .DataSource(d => d.Read(r => r.Action("JobOrderDDBind", "FleetDataProvider", new { area = "FleetManagement" }))
                              .ServerFiltering(false)))
                    @Html.ValidationMessageFor(model => model.JobOrderNo, "", new { @class = "text-danger" })
                </div>
            </div>*@

        </div>
    </div>
    @*<div class="row">
        <div class="col-md-1">
        </div>
        
        @*<div class="col-md-3">

            <div class="form-group">
                @Html.LabelFor(model => model.IsForOther, htmlAttributes: new { @class = "control-label col-md-8" })*@
                @*<div>
                    @Html.Kendo().CheckBoxFor(model => model.IsForOther).HtmlAttributes(new { onchange = "isForOther(this)" })
                    @Html.ValidationMessageFor(model => model.IsForOther, "", new { @class = "text-danger" })
                </div>
            </div>*@
        @*</div>*@

        @*<div class="form-group" id="forbranchDiv" style="display: none">
            @Html.LabelFor(model => model.ForBranchId, htmlAttributes: new { @class = "control-label col-md-8" })
            @*<div class="col-md-6">
                @(Html.Kendo().DropDownListFor(model => model.ForBranchId)
                      .ValuePrimitive(true)
                            //.OptionLabel("Select Branch...")
                            .DataTextField("Name")
                            .DataValueField("Code")
                            .Filter("contains")
                            .DataSource(dataSource =>
                            {
                                dataSource.Read(read => read.Action("GetAllBranches", "MaintenanceDataProvider"))
                                    .ServerFiltering(false);
                            })
                      )
                @Html.ValidationMessageFor(model => model.ForBranchId, "", new { @class = "text-danger" })
            </div>
        </div>*@
        
    @*</div>*@
        </div>
