
<link href="~/Content/toast/toastr.css" rel="stylesheet" />
<script src="~/Content/toast/toastr.js"></script>

<legend>Estimation Form</legend>
@(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.PrintingEstimation.EstimationForm>()
                .Name("grid")
                .Columns(columns =>
                {
                    columns.Bound(c => c.JobNumber).Width(100);
                    columns.ForeignKey(c => c.JobTypeId, (IEnumerable)ViewData["JobTypes"], "JobTypeId", "Type").Width(130);
                    columns.ForeignKey(c => c.CustomerId, (IEnumerable)ViewData["Customers"], "Code", "Name")
                                        .Width(110).Title("Customer");


                    columns.Bound(c => c.Quantity).Width(100);
                    columns.Bound(c => c.Size).Width(80);
                    columns.Bound(c => c.TextPaper).Width(80);
                    columns.Bound(c => c.TextPrint).Width(80);
                    columns.Bound(c => c.CoverPrint).Width(80);
                    columns.Bound(c => c.BindingStyle).Width(100);
                    columns.Bound(c => c.Others).Width(100);
                    columns.Command(command =>
                    {
                        command.Edit().Text(" ").IconClass("fa fa-pencil").HtmlAttributes(new { title = "Edit" });
                        command.Custom("check").Text(" ").IconClass("fa fa-check").HtmlAttributes(new { @class="check", title = "Check" }).Click("checkEstimation");
                        command.Custom("approve").Text(" ").IconClass("fa fa-thumbs-o-up").HtmlAttributes(new { @class = "approve", title = "Approve" }).Click("approveEstimation");
                        command.Custom("reject").Text(" ").IconClass("fa fa-remove").HtmlAttributes(new { @class = "reject", title = "Reject" }).Click("rejectEstimation");
                        command.Destroy().Text(" ").IconClass("fa fa-trash").HtmlAttributes(new { title = "Delete" });
                    }).Width(200);

                })
                .ToolBar(toolbar =>
                {
                    toolbar.Create();
                    toolbar.Excel();
                    toolbar.Pdf();
                })
              .Events(ev => ev.DetailExpand("detailExpand").DataBound("dataBound"))
                .Scrollable(s => s.Height(400))
                .ClientDetailTemplateId("cost_estimation")
                .Sortable()
                .Filterable()
                .Editable(editable => editable.Mode(GridEditMode.PopUp)
                .TemplateName("EstimationForm")
                .Window(w => w.Title("Estimation Form").Width(600)))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Events(ev => ev.Error("error_handler(\"grid\")")
                                .RequestStart("onRequestStart(\"grid\")")
                                .RequestEnd("onRequestEnd(\"grid\")"))
                .Model(model => model.Id(p => p.EstimationFormId))
                .Read(read => read.Action("EstimationForms_Read", "EstimationForm"))
                .Create(create => create.Action("EstimationForms_Create", "EstimationForm"))
                .Update(update => update.Action("EstimationForms_Update", "EstimationForm"))
                .Destroy(destroy => destroy.Action("EstimationForms_Destroy", "EstimationForm"))
                .PageSize(10)
                .Sort(sort =>
                {
                    sort.Add(e => e.EstimationFormId).Descending();

                }))
)


<script id="cost_estimation" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip()
        .Name("tabstrip_grid_#=EstimationFormId#")
        .SelectedIndex(0)
        .Items(itemn =>
         {

             itemn.Add().Text("Material Costs")
            .Content(@<text>
               @(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.PrintingEstimation.MaterialCost>()
                    .Name("material_costs_#=EstimationFormId#") // template expression, to be evaluated in the master context
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.MaterialCostId).Hidden(true).Filterable(false);
                        //columns.Bound(c => c.StoreCode).Title("Store").Width(100);
                        columns.ForeignKey(c => c.InventoryCategoryId, (IEnumerable)ViewData["Categorys"], "Code", "Name").Width(90);
                        columns.ForeignKey(c => c.InventoryId, (IEnumerable)ViewData["Inventories"], "Code", "Name") .Width(90);
                        columns.Bound(c => c.Quantity).Width(80);
                        columns.Bound(c => c.UnitPrice).Width(80);
                        columns.Bound(c => c.TotalPrice).Width(150).ClientFooterTemplate("Material Cost: \\#=sum\\# ");
                        // escaped template expression, to be evaluated in the child/detail context
                        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);

                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Create();

                    })
                    .Events(ev => ev.DataBound("onChildDataBound"))
                    .Editable(editable => editable.Mode(GridEditMode.PopUp)
                    .TemplateName("MaterialCost")
                    .Window(w => w.Title("Material Cost Form").Width(500)))
                    .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        //   .ServerOperation(false)
                        .Events(ev => ev.Error("error_handler(\"material_costs_#=EstimationFormId#\")")
                        .RequestStart("onRequestStart(\"material_costs_#=EstimationFormId#\")")
                        .RequestEnd("onRequestEnd(\"material_costs_#=EstimationFormId#\")"))
                        .Aggregates(aggregates =>

                        {
                            aggregates.Add(c => c.TotalPrice).Sum();
                        })
                        .Model(model => model.Id(p => p.MaterialCostId))
                        .Read(read => read.Action("MaterialCosts_Read", "MaterialCost", new { estimationFormId = "#=EstimationFormId #" }))
                        .Create(create => create.Action("MaterialCosts_Create", "MaterialCost", new { parentId = "#=EstimationFormId #" }))
                        .Update(update => update.Action("MaterialCosts_Update", "MaterialCost"))
                        .Destroy(destroy => destroy.Action("MaterialCosts_Destroy", "MaterialCost"))
                        .Sort(sort =>
                        {
                            sort.Add(m => m.LastModified).Descending();

                        })
                        .PageSize(5))
                        .ToClientTemplate())
                            </text>);
             itemn.Add().Text("Labor Costs").Content(@<text>
                 @(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.PrintingEstimation.LaborCost>()
                          .Name("labor_costs_#=EstimationFormId#")
                          .Columns(columns =>
                          {
                              columns.Bound(x => x.LaborCostId).Hidden(true);
                              columns.Bound(c => c.PrintingSteps).EditorTemplateName("PrintingCategory").Title("Printing Category").Width(100);
                              columns.ForeignKey(c => c.PrintingStepId, (IEnumerable)ViewData["PrintingSteps"], "PrintingStepId", "Name").Title("Name").Width(100);
                              columns.Bound(o => o.WorkingTime).Width(80);
                              columns.Bound(o => o.CostPerHour).Width(80);
                              columns.Bound(o => o.TotalCost).Width(150).ClientFooterTemplate("Labor Cost: \\#=sum\\# ");
                              columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);

                          })
                        //.ToolBar(toolbar =>
                        //{
                        //    toolbar.Custom().Name("cmdAddRecord")
                        //    .Text("Add New Record")
                        //    .HtmlAttributes(new { @id = "cmdAddRecord" });
                        //})
                        .ToolBar(toolbar =>
                        {
                            toolbar.Create();

                        })
                        .Editable(editable => editable.Mode(GridEditMode.PopUp)
                        .TemplateName("LaborCost")
                        .Window(w => w.Title("Labor Cost Form").Width(500)))
                        .Events(ev => ev.DataBound("onChildDataBound"))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            //.ServerOperation(false)
                            .Events(ev => ev.Error("error_handler(\"labor_costs_#=EstimationFormId#\")")
                            .RequestStart("onRequestStart(\"labor_costs_#=EstimationFormId#\")")
                            .RequestEnd("onRequestEnd(\"labor_costs_#=EstimationFormId#\")"))
                            .Aggregates(aggregates =>

                            {
                                aggregates.Add(c => c.TotalCost).Sum();
                            })
                            .Model(model => model.Id(p => p.LaborCostId))
                            .Read(read => read.Action("LaborCosts_Read", "LaborCost", new { estimationFormId = "#=EstimationFormId#" }))
                            .Create(create => create.Action("LaborCosts_Create", "LaborCost", new { parentId = "#=EstimationFormId#" }))
                            .Update(update => update.Action("LaborCosts_Update", "LaborCost"))
                            .Destroy(destroy => destroy.Action("LaborCosts_Destroy", "LaborCost"))
                            .Sort(sort =>
                            {
                                sort.Add(l => l.LastModified).Descending();
                            })
                            .PageSize(5))
                            .ToClientTemplate()

                                        )
                                    </text>

                                                    );
                                            itemn.Add().Text("Overall Costs")
                    .Content(@<text>
            #if(IsApproved){#
              <a href='@Url.Action("PrintingEstimationForms", "PrintingEstimationReport")/#=EstimationFormId#' title="Print"><i class="fa fa-print  fa-2x"></i></a>
            #}#
            @(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.PrintingEstimation.OverallCost>()
                .Name("overall_costs_#=EstimationFormId#")
                .Columns(columns =>
                {
                    columns.Bound(c => c.MaterialCost).Title("M.C").Width(80);
                    columns.Bound(c => c.LaborCost).Title("L.C").Width(80);
                    columns.Bound(c => c.OverHeadCost).Title("O.H(%)").Width(80).EditorTemplateName("NumericTextBox");
                    columns.Bound(c => c.T).Width(80);
                    columns.Bound(c => c.MarginalCost).Title("M(%)").EditorTemplateName("NumericTextBox").Width(80);
                    columns.Bound(c => c.NBT).Title("N.B.T").Width(80);
                    columns.Bound(c => c.TInpercent).Title("T(%)").EditorTemplateName("NumericTextBox").Width(80);
                    columns.Bound(c => c.GT).Title("G.T").Width(80);
                    columns.Bound(c => c.Graphic).EditorTemplateName("NumericTextBox").Width(80);
                    columns.Bound(c => c.EstimatedNetPrice).Width(80);
                    columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);
                })

                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Events(ev => ev.DataBound("onChildDataBound"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        //.ServerOperation(false)
                        .Events(events => events.Error("error_handler")
                            .RequestStart("onRequestStart(\"overall_costs_#=EstimationFormId#\")")
                            .RequestEnd("onRequestEnd(\"overall_costs_#=EstimationFormId#\")"))
                        .Model(model =>
                        {
                            model.Id(p => p.OverallCostId);
                            //model.Field(p => p.LaborCost).Editable(false);
                            //model.Field(p => p.MaterialCost).Editable(false);
                            model.Field(p => p.OverallCostId).Editable(false);
                        })
                        .Read(read => read.Action("OverallCosts_Read", "OverallCost", new { estimationFormId = "#=EstimationFormId#" }))
                        .Create(create => create.Action("OverallCosts_Create", "OverallCost", new { parentId = "#=EstimationFormId#" }))
                        .Update(update => update.Action("OverallCosts_Update", "OverallCost"))
                        .Destroy(destroy => destroy.Action("OverallCosts_Destroy", "OverallCost")))

                        .Sortable()
                        .ToClientTemplate()

                        )
                    </text>

                                );
                    }).ToClientTemplate())


</script>


<script>

    $("#cmdAddRecord").click(function (e) {

        var grid = $("#labor_costs_" + codeid).data("kendoGrid");
        var sorting = grid.dataSource.sort();
        var filtering = grid.dataSource.filter();
        if (filtering) {
            grid.dataSource.filter(null);
        }
        if (sorting) {
            grid.dataSource.sort(null);
        }
        grid.addRow();
        e.preventDefault();

    });
    function onChangeOC() {
        //var lc = parseInt($("#LaborCost").val());
        //var mc = parseInt($("#MaterialCost").val());
        //$("#MaterialCost").attr("disabled", "true");
        //$("#LaborCost").attr("disabled", "true");
        //console.log($("#LaborCost").val());
        //console.log($("#MaterialCost").val());
        //console.log($("#OverHeadCost").val());
        //var ohC = $("#OverHeadCost").val();
       
        //var oc = lc + mc;
        //var tc = oc + oc + (ohC/100);
        //var tt = $("#T").val(tc);
        //tt.trigger("change");
    }
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);
            $(this).find(".k-grid-reject").hide();
            if (dataItem.IsApproved == true) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-approve").hide();
                $(this).find(".k-grid-reject").hide();

                $(this).find(".k-grid-delete").hide();
            }
            else if (dataItem.IsChecked == true) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-delete").hide();
                $(this).find(".k-grid-reject").show();
            }
            else {
                $(this).find(".k-grid-approve").hide();
            }
            
        });
    }
    function onChildDataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);
            if (isChecked == true ||isApproved) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-delete").hide();
            }

        });
    }
    function selectInventory() {
        var productId = $("#InventoryId").val()
        var storeCode = $("#StoreCode").val()

        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetItemDetail", "PrintingEstimationDataProvider", new { Area = "Printing" })',
            data: {
                itemCode: productId, storeCode: storeCode

            },
            async: false,
            success: function (result) {
                data = result;

                var up = $("#UnitPrice").val(data.AvgPrice);
                var ba = $("#Balance").val(data.Balance);
                up.trigger("change");
                ba.trigger("change");




            }
        });
    }
    function checkEstimation(e) {
        if (confirm("Are you sure this estimation form is to be checked?")) {
             var grid = this,
            dataItem = grid.dataItem(e.currentTarget.closest("tr"));
        $.ajax({
           type: "POST",
            url: '@Url.Action("CheckEstimation", "EstimationForm", new { Area = "Printing" })',
            data: { id: dataItem.EstimationFormId },
            success: function (result) {
                if (result.Success) {
                    toastr.success(result.Message);
                    $("#grid").data("kendoGrid").dataSource.read();
                }
                else {
                    toastr.error(result.Message);

                }
           },
           error: function(result) {
               alert(result);
           }
       });
        }

        }
   
        function approveEstimation(e) {
            if (confirm("Are you sure to approve this estimation form?")) {
             var grid = this,
            dataItem = grid.dataItem(e.currentTarget.closest("tr"));
        $.ajax({
           type: "POST",
            url: '@Url.Action("ApproveEstimation", "EstimationForm", new { Area = "Printing" })',
            data: { id: dataItem.EstimationFormId },
            success: function (result) {
                if (result.Success) {
                    toastr.success(result.Message);
                    $("#grid").data("kendoGrid").dataSource.read();
                }
                else {
                    toastr.error(result.Message);

                }
           },
           error: function(result) {
               alert(result);
           }
       });
        }
    }
      function rejectEstimation(e) {
            if (confirm("Are you sure to reject this checked estimation form?")) {
             var grid = this,
            dataItem = grid.dataItem(e.currentTarget.closest("tr"));
        $.ajax({
           type: "POST",
            url: '@Url.Action("RejectEstimation", "EstimationForm", new { Area = "Printing" })',
            data: { id: dataItem.EstimationFormId },
            success: function (result) {
                if (result.Success) {
                    toastr.success(result.Message);
                    $("#grid").data("kendoGrid").dataSource.read();
                }
                else {
                    toastr.error(result.Message);

                }
           },
           error: function(result) {
               alert(result);
           }
       });
        }
        }

    function onChange() {

        var unitPricenumerictextbox = $("#UnitPrice");
        var quantitynumerictextbox = $("#Quantity");
        var totalPricenumerictextbox = $("#TotalPrice");
        console.log(1000000);
        var unitPrice = unitPricenumerictextbox.val();
        var quantity = quantitynumerictextbox.val();
        var totalPrice = unitPrice * quantity;
        totalPrice = totalPrice.toFixed(3);
        totalPricenumerictextbox.val(totalPrice);
        totalPricenumerictextbox.trigger("change");
    }
    function filterCategories() {
        //
        // summary:
             // send the filtering text along with the parent widget's value
        var dropdownlist = $("#InventoryId").data("kendoDropDownList");

        var filterInput = dropdownlist.filterInput.val();
        

        return {
            ItemCategoryCode: $("#InventoryCategoryId").val(),
          text: filterInput
        };
    }
    function onSave(e) {
        //$("#grid").data("kendoGrid").dataSource.read();
    }
    function filterPrintingSteps() {
        return {
            PrintingStep: $("#PrintingSteps").val()

        };
    }
    var masterRow;
    var masterGrid;
    var masterDataItem;
    var codeid;
    var isApproved;
    var isChecked;
    function detailExpand(e) {
        masterRow = e.masterRow;
        masterGrid = $("#grid").data("kendoGrid");
        masterDataItem = masterGrid.dataItem(masterRow);
        codeid = masterDataItem.EstimationFormId;
        isApproved = masterDataItem.IsApproved;
        isChecked = masterDataItem.IsChecked;
        if (isChecked || isApproved) {
            $(".k-grid-add", "#material_costs_" + codeid).hide();
            $(".k-grid-add", "#labor_costs_" + codeid).hide();
        }
        

    }

</script>

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>
<style>
    .k-grid .k-grid-toolbar .k-grid-add,
    .k-grid tbody .k-grid-edit,
    .k-grid tbody .k-grid-update,
    .k-grid tbody .k-grid-cancel,
    .k-grid tbody .k-grid-delete {
        min-width: 0;
    }

        .k-grid .k-grid-toolbar .k-grid-add .k-icon,
        .k-grid tbody .k-grid-edit .k-icon,
        .k-grid tbody .k-grid-update .k-icon,
        .k-grid tbody .k-grid-cancel .k-icon,
        .k-grid tbody .k-grid-delete .k-icon {
            margin: 0;
        }
    .k-grid tbody .k-button {
       
        min-width: 30px;
        min-height: 30px;
    }
    .check {
        background-color: #e68a00;
        color: white;
    }
    .approve {
        background-color: #077d01;
        color: white;
    }
    .reject {
        color:white;
        background-color: #fc0000;
    }
</style>
<style>
    div.k-edit-form-container {
        width: auto;
    }

    .row {
        margin: 10px;
    }

        .row .col-sm-3 {
            margin: 10px;
        }
    .k-textbox,
    .k-numerictextbox,
    .k-dropdown,
    .k-dropdowntree,
    .k-datepicker,
    .k-upload {
        width: 80%;
    }
</style>