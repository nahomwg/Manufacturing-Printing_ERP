@using ExceedERP.Core.Localization
@using ExceedERP.Core.Domain.Printing.ProductionFollowUp
@using Kendo.Mvc.Extensions

<div class="content-wrapper">
    <section class="content-header">
        <h4><i class="fa fa-list"></i>Weekly Plans </h4>

    </section>
    <section class="content">


        @(Html.Kendo().Grid<MonthlyProductionPlan>()
                          .Name("monthly_grid")
                          .Columns(columns =>
                          {


                              columns.ForeignKey(c => c.MonthlyProductionPlanId, (System.Collections.IEnumerable)ViewData["MonthlyProductionPlans"], "MonthlyProductionPlanId", "NameAm").Filterable(f => f.Multi(true).Search(true)).Width(300);
                              columns.ForeignKey(c => c.MonthlyProductionPlanId, (System.Collections.IEnumerable)ViewData["MonthlyProductionPlans"], "MonthlyProductionPlanId", "Name").Filterable(f => f.Multi(true).Search(true)).Width(300);
                              columns.Bound(c => c.StartDateEth).Filterable(f => f.Multi(true).Search(true)).Width(120);
                              columns.Bound(c => c.EndDateEth).Filterable(f => f.Multi(true).Search(true)).Width(120);
                              columns.Bound(c => c.StartDate).Filterable(f => f.Multi(true).Search(true)).Width(120);
                              columns.Bound(c => c.EndDate).Filterable(f => f.Multi(true).Search(true)).Width(120);
                              columns.Bound(c => c.ProductionPlanQuantity).Filterable(f => f.Multi(true).Search(true)).Width(100);
                              columns.Bound(c => c.ProductionPlanBirr).Filterable(f => f.Multi(true).Search(true)).Width(100);



                          })

                          .Events(ev => ev.DetailExpand("onMonthlyDetailExpand").Edit("onEdit"))
                          .Editable(editable => editable.Mode(GridEditMode.InCell))
                                .PersistSelection()
                              .HtmlAttributes(new { style = "height: 520px;" })
                                               .Pageable(pageable => pageable
                                                                 .Input(true)
                                                                 .Numeric(false)
                                                                 .Refresh(true)
                                                                 .PageSizes(true)
                                                                 .ButtonCount(5))

                              .Navigatable()
                              .Sortable(sortable =>
                              {
                                  sortable.SortMode(GridSortMode.SingleColumn);
                              })
                              .Filterable()
                              .Scrollable()
                              .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .PageSize(12)
                                  .ServerOperation(false)
                                  .Batch(true)
                                  .Sort(sort =>
                                  {
                                      sort.Add(m => m.MonthlyProductionPlanId).Ascending();
                                  })
                                   .Events(ev => ev
                            .Error("error_handler(\"monthly_grid#\")")
                            .RequestStart("onRequestStart(\"monthly_grid\")")
                            .RequestEnd("onRequestEnd(\"monthly_grid\")"))
                                  .Model(model =>
                                  {

                                      model.Id(p => p.MonthlyProductionPlanId);
                                      model.Field(p => p.MonthlyProductionPlanId).Editable(false);
                                      model.Field(p => p.Name).Editable(false);
                                      model.Field(p => p.NameAm).Editable(false);
                                      model.Field(p => p.StartDate).Editable(false);
                                      model.Field(p => p.ProductionPlanBirr).Editable(false);
                                      model.Field(p => p.ProductionPlanQuantity).Editable(false);
                                      model.Field(p => p.EndDate).Editable(false);
                                      model.Field(p => p.StartDateEth).Editable(false);
                                      model.Field(p => p.EndDateEth).Editable(false);
                                  })

                                  .Read(read => read.Action("MonthlyProductionPlans_Read", "MonthlyProductionPlans"))

                              ).ClientDetailTemplateId("weeklyPlans")


        )



    </section>
</div>





<script id="weeklyPlans" type="text/kendo-tmpl">


    @(Html.Kendo().TabStrip()
                     .Name("weekly_tab_#=MonthlyProductionPlanId#")
                   .SelectedIndex(0)
                   .Items(items =>
                   {

                       items.Add().Text("Weekly Plans").Content(
                @<text>
                    @WeeklyProductionPlan()


                </text>
        );


                   }).ToClientTemplate()

    )

</script>



<script id="jobTypePlan" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
                             .Name("job_type_tab_#=WeeklyProductionPlanId#")
                           .SelectedIndex(0)
                           .Items(items =>
                           {
                               items.Add().Text("Job Type Plans").Content(
                        @<text>
                            @JobTypeProductionPlan()
                        </text>
                        );

                           }).ToClientTemplate()
    )
</script>

@helper WeeklyProductionPlan()
{

    @(Html.Kendo().Grid<WeeklyProductionPlan>
                    ()
                    .Name("weekly_year_grid_#=MonthlyProductionPlanId#")
                    .Columns(columns =>
                    {


                        columns.Bound(c => c.NameAm).Filterable(f => f.Multi(true).Search(true)).Width(120);
                        columns.Bound(c => c.StartDateEth).EditorTemplateName("EthDatePickerTemplate").Filterable(f => f.Multi(true).Search(true)).Width(150);
                        columns.Bound(c => c.EndDateEth).EditorTemplateName("EthDatePickerTemplate").Filterable(f => f.Multi(true).Search(true)).Width(150);
                        columns.Bound(c => c.Name).Filterable(f => f.Multi(true).Search(true)).Width(120);
                        columns.Bound(c => c.StartDate).Filterable(f => f.Multi(true).Search(true)).EditorTemplateName("DatePickerTemplate").Width(120);
                        columns.Bound(c => c.EndDate).Filterable(f => f.Multi(true).Search(true)).EditorTemplateName("DatePickerTemplate").Width(120);
                        columns.Bound(c => c.ProductionPlanBirr).Filterable(f => f.Multi(true).Search(true)).Width(100);
                        columns.Bound(c => c.ProductionPlanQuantity).Filterable(f => f.Multi(true).Search(true)).Width(100);


                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Save();
                    })
                    .Events(ev => ev.DataBound("dataBound").Edit("onWeeklyEdit").Edit("onWeeklyProductionPlanEdit"))

                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .PersistSelection()
                    .HtmlAttributes(new { style = "height: 520px;" })
                    .Pageable(pageable => pageable
                    .Input(true)
                    .Numeric(false)
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))
                    .Navigatable()
                    .Sortable(sortable =>
                    {
                        sortable.SortMode(GridSortMode.SingleColumn);
                    })
                    .Filterable()
                    .Scrollable()
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(12)
                    .Batch(true)
                    .ServerOperation(true)
                    .Sort(sort =>
                    {
                        sort.Add(m => m.MonthlyProductionPlanId).Descending();
                    })


                    .Events(ev => ev
                    .Error("error_handler(\"weekly_year_grid_#=MonthlyProductionPlanId#\")")
                    .RequestStart("onRequestStart(\"weekly_year_grid_#=MonthlyProductionPlanId#\")")
                    .RequestEnd("onRequestEnd(\"weekly_year_grid_#=MonthlyProductionPlanId#\")"))
                    .Model(model =>
                    {

                        model.Id(p => p.WeeklyProductionPlanId);
                        model.Field(p => p.Name).Editable(false);
                        model.Field(p => p.NameAm).Editable(false);
                        model.Field(p => p.StartDateEth).Editable(false);
                        model.Field(p => p.EndDateEth).Editable(false);

                    })

                    .Read(read => read.Action("WeeklyProductionPlans_Read", "WeeklyProductionPlans", new { id = "#=MonthlyProductionPlanId#" }))
                    .Create(create => create.Action("WeeklyProductionPlans_Create", "WeeklyProductionPlans", new { id = "#=MonthlyProductionPlanId#" }))
                    .Update(update => update.Action("WeeklyProductionPlans_Update", "WeeklyProductionPlans", new { id = "#=MonthlyProductionPlanId#" }))
                    .Destroy(destroy => destroy.Action("WeeklyProductionPlans_Destroy", "WeeklyProductionPlans"))

                    )
                    .ClientDetailTemplateId("jobTypePlan")
                    .ToClientTemplate()

    )
}
@helper JobTypeProductionPlan()
{


@(Html.Kendo().Grid<ExceedERP.Core.Domain.Printing.ProductionFollowUp.ProductionJobTypePlan>()
              .Name("production_month_job_type_plan_#=WeeklyProductionPlanId#")
                  .Columns(columns =>
              {
                columns.ForeignKey(c => c.JobTypeId, (IEnumerable)ViewData["JobTypes"], "JobCategoryId", "JobName").Width(150);
                columns.Bound(c => c.ProductionPlanQuantity).ClientFooterTemplate("Total Price: \\#=sum\\# ").Width(150);
                columns.Bound(c => c.ProductionPlanBirr).ClientFooterTemplate("Total Price: \\#=sum\\# ").Width(150);

            })
                  .ToolBar(toolbar =>
                  {
                toolbar.Save();
            })
                  .Editable(editable => editable.Mode(GridEditMode.InCell))
                      .Pageable(pageable => pageable
                                                 .Input(true)
                                                 .Numeric(false)
                                                 .Refresh(true)
                                                 .PageSizes(true)
                                                 .ButtonCount(5))
                                       .Filterable()
                                           .Scrollable(h => h.Height(500))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                    .Events(ev => ev.Error("error_handler(\"production_month_job_type_plan_#=WeeklyProductionPlanId#\")")
                                       .RequestStart("onRequestStart(\"production_month_job_type_plan_#=WeeklyProductionPlanId#\")")
                                       .RequestEnd("onRequestEnd(\"production_month_job_type_plan_#=WeeklyProductionPlanId#\")"))
                .Aggregates(ag =>
                {
                ag.Add(a => a.ProductionPlanQuantity).Sum();
                ag.Add(a => a.ProductionPlanBirr).Sum();
            })
                                   .Model(model => {
                model.Id(p => p.ProductionJobTypePlanId);
                model.Field(p => p.JobTypeId).Editable(false);
            })
                .Read(read => read.Action("ProductionJobTypePlans_Read", "ProductionJobTypePlans", new { id = "#=WeeklyProductionPlanId#" }))
                .Create(create => create.Action("ProductionJobTypePlans_Create", "ProductionJobTypePlans", new { id = "#=WeeklyProductionPlanId#" }))
                .Update(update => update.Action("ProductionJobTypePlans_Update", "ProductionJobTypePlans", new { id = "#=WeeklyProductionPlanId#" }))
                .Destroy(destroy => destroy.Action("ProductionJobTypePlans_Destroy", "ProductionJobTypePlans"))
                  ).ToClientTemplate()
)
}

<script>
    function GetDate(e) {
        $("#StartDateEth").trigger("change");
        $("#EndDateEth").trigger("change");
    }


    function dataBound(e) {
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function (e) {
            var model = grid.dataItem(this);
            if (model.IsApproved) {
                //   $(this).css("background-color", "#7FFFD4");
                $(this).find(".k-grid-delete").remove();
                $(this).find(".k-grid-edit").remove();
                $(this).find(".k-grid-custom-delete-command").remove();
                $(this).find(".k-grid-custom-approve-command").remove();
            }

        });
        console.log(10000);

    }

    function filterPeriods() {
        return {
            budgetYearId: $("#BudgetYearId").val()
        };
    }



    $(".k-grid-add").first().on("click", function (e) {
        var grid = $('#grid').data('kendoGrid');
        if (grid.dataSource.view().length > 0) {
            console.log("true");
            e.preventDefault();
            var sorting = grid.dataSource.sort();
            if (sorting) {
                grid.dataSource.sort(null);

            }
            grid.addRow();
        }
    });


    function onWeeklyEdit(e) {
        console.log("Yeah");
        $("#StartDate").kendoDatePicker({
            format: "MM/dd/yyyy",
            min: startDate,
            max: endDate,
            change: onStartDateChange

        });
        //var startD = $("#StartDate").val();
        //console.log(startD);
        //if (startD.value != null) {
        //    startDate = startD.value;
        //}
        $("#EndDate").kendoDatePicker({
            format: "MM/dd/yyyy",
            min: startDate,
            max: endDate,
            change: onEndDateChange

        });
        //var dateStartPicker = $("#StartDate").data("kendoDatePicker");
        //dateStartPicker.min(startDate);
        //dateStartPicker.max(endDate);

        //var dateEndPicker = $("#EndDate").data("kendoDatePicker");
        //dateEndPicker.min(startDate);
        //dateEndPicker.max(endDate);

    }
    function onStartDateChange(e) {
        var dt = e.sender;
        startDate = dt.value();
    }
    function onEndDateChange(e) {
        var dt = e.sender;
        endDate = dt.value();
    }
    var masterId;
    var isApproved;
    var isTransferred;
    var isWeeklyApproved;
    var isWeeklyApproved;
    var isTransferredAd;
    var isApprovedAd;
    function onQuarterlyDetailExpand(e) {
        masterRow = e.masterRow;
        masterGrid = $("#grid").data("kendoGrid");
        masterDataItem = masterGrid.dataItem(masterRow);
        masterId = masterDataItem.QuarterlyPlanId;
        //    isApprovedAd = masterDataItem.IsApproved;
        //    isTransferredAd = masterDataItem.IsTransferred;
        //    if (isApproved || isTransferredAd) {
        //    $(".k-grid-save-changes", "#monthly_grid_" + masterId).hide();
        //    $(".k-grid-cancel-changes", "#monthly_grid_" + masterId).hide();
        //}


    }
    var startDate;
    var endDate;
    function onMonthlyDetailExpand(e) {
        masterRow = e.masterRow;
        masterGrid = $("#monthly_grid").data("kendoGrid");
        masterDataItem = masterGrid.dataItem(masterRow);
        var masterMonId = masterDataItem.MonthlyProductionPlanId;
        startDate = masterDataItem.StartDate;
        endDate = masterDataItem.EndDate;

        //    isWeeklyApproved = masterDataItem.IsWeeklyApproved;
        //    isWeeklyTransferred = masterDataItem.IsWeeklyTransferred;
        //    if (isWeeklyApproved || isWeeklyTransferred) {
        //        $(".k-grid-save-changes", "#weekly_year_grid_" + masterMonId).hide();
        //        $(".k-grid-cancel-changes", "#weekly_year_grid_" + masterMonId).hide();
        //}



    }
    function onEdit(e) {
        //if (isApprovedAd) {
        //    var grid = this;
        //   grid.closeCell();
        //}
        //else if (isTransferredAd) {
        //    var grid = this;
        //    grid.closeCell();
        //}
    }

    function onWeeklyProductionPlanEdit() {
        if (isWeeklyApproved) {
            var grid = this;
            grid.closeCell();
        }
        else if (isWeeklyTransferred) {
            var grid = this;
            grid.closeCell();
        }
    }



</script>
<style>
    .approve {
        background-color: darkgreen;
        border-radius: 10px;
        color: white;
        border: 2px solid darkgreen;
    }

        .approve:hover {
            background-color: green;
            border-radius: 10px;
            color: white;
            border: 2px solid green;
        }

    .reject {
        background-color: darkred;
        border-radius: 10px;
        border: 2px solid darkred;
        color: white;
    }

        .reject:hover {
            background-color: darkred;
            border-radius: 10px;
            border: 2px solid darkred;
            color: white;
        }

    .approveP {
        background-color: darkgreen;
        color: white;
    }

    .k-editor-toolbar {
        display: none !important;
    }
</style>
