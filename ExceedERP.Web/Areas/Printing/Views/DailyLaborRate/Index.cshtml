
@(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.JobCosting.DailyLaborRate>()
          .Name("grid")
          .Columns(columns =>
          {

              columns.ForeignKey(c => c.CostCenter, (IEnumerable)ViewData["CostCenters"], "Values", "Values")
.Title("Cost Center").Width(120);
              columns.ForeignKey(c => c.GlFiscalYearId, (IEnumerable)ViewData["FiscalYears"], "GlFiscalYearId", "Name")
.Title("Fiscal Year").Width(90);
              columns.ForeignKey(c => c.GLPeriodId, (IEnumerable)ViewData["Periods"], "GLPeriodId", "Name")
.EditorTemplateName("YearCascading").Title("Month").Width(90);
              columns.Bound(c => c.TotalSalary).EditorTemplateName("ReadOnlyTemplate").Width(90);
              columns.Bound(c => c.TotalExpectedHour).EditorTemplateName("ReadOnlyTemplate").Title("Expected Hour").Width(90);
              columns.Bound(c => c.DLR).EditorTemplateName("ReadOnlyTemplate").Width(60);
              columns.Bound(c => c.EmployeeType).EditorTemplateName("EmployeeTypeEnumMapping").Width(100);

              columns.Command(command =>
              {
                  command.Edit();
                  command.Destroy();
              }).Width(180);
          })
                              .ToolBar(toolbar =>
                              {
                                  toolbar.Create();
                              })
            .Editable(editable => editable.Mode(GridEditMode.InLine))
            .Pageable(pageable => pageable
                                        .Input(true)
                                        .Numeric(false)
                                        .Refresh(true)
                                        .PageSizes(true)
                                        .ButtonCount(5))
                                .Filterable()
                                .Scrollable(h => h.Height(500))
             .Events(ev => ev.DetailExpand("onDetailExpand").DataBound("onDataBound"))
            .DataSource(dataSource => dataSource
        .Ajax()
                            .Sort(sort => sort.Add(s => s.DailyLaborRateId).Descending())

        .Model(model =>
        {
            model.Id(p => p.DailyLaborRateId);
            //model.Field(p => p.DLR).Editable(false);
            //model.Field(p => p.TotalExpectedHour).Editable(false);
            //model.Field(p => p.TotalSalary).Editable(false);
        })
        .Read(read => read.Action("DailyLaborRates_Read", "DailyLaborRate"))
        .Create(create => create.Action("DailyLaborRates_Create", "DailyLaborRate"))
        .Update(update => update.Action("DailyLaborRates_Update", "DailyLaborRate"))
        .Destroy(destroy => destroy.Action("DailyLaborRates_Destroy", "DailyLaborRate"))
            ).ClientDetailTemplateId("DetailTemplate")
)

<script id="DetailTemplate" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip().Name("DocumentTabstrip_#=DailyLaborRateId#").SelectedIndex(0)
                                                                      .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
                                                                      .Items(itemn =>
                                                                      {
                                                                          itemn.Add().Text("Salaries ").Content(@<text>

                                                                            @(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.JobCosting.DLRSalary>()
                                                                                                          .Name("DLRSalary#=DailyLaborRateId#")
                                                                                                             .Columns(columns =>
                                                                                                             {
                                                                                                                 columns.Bound(c => c.NoOfDay).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                 columns.Bound(c => c.RatePerDay).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                 columns.Bound(c => c.NoOfEmployee).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                 columns.Bound(c => c.BasicSalary).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                 columns.Bound(c => c.LessIndirectLabor).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                 columns.Bound(c => c.NetSalary).EditorTemplateName("ReadOnlyTemplate");
                                                                                                                 columns.Bound(c => c.LessAbsence).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                 columns.Bound(c => c.Total).EditorTemplateName("ReadOnlyTemplate");
                                                                                                                 columns.Bound(c => c.Pension).EditorTemplateName("ReadOnlyTemplate");
                                                                                                                 columns.Bound(c => c.TotalSalary).EditorTemplateName("ReadOnlyTemplate").ClientFooterTemplate("Total:\\#=sum\\# ");

                                                                                                                 columns.Command(command =>
                                                                                                                 {

                                                                                                                     command.Edit();
                                                                                                                     command.Destroy();
                                                                                                                 }).Width(200);

                                                                                                             })
                                                                                                           .ToolBar(toolbar =>
                                                                                                           {
                                                                                                               toolbar.Create();

                                                                                                           })
                                                                                                           .Events(ev => ev.Save("onSave").Remove("onSave").Edit("onEdit"))
                                                                                                           .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                                                                           .DataSource(dataSource => dataSource
                                                                                                           .Ajax()
                                                                                                           .ServerOperation(true)
                                                                                                           .Aggregates(aggregates =>

                                                                                                           {
                                                                                                               aggregates.Add(c => c.TotalSalary).Sum();
                                                                                                           })
                                                                                                           .Sort(sort => sort.Add(s => s.DLRSalaryId).Descending())
                                                                                                           .Events(ev => ev.Error("error_handler(\"DLRSalary#=DailyLaborRateId#\")")
                                                                                                           .RequestStart("onRequestStart(\"DLRSalary#=DailyLaborRateId#\")")
                                                                                                           .RequestEnd("onRequestEnd(\"DLRSalary#=DailyLaborRateId#\")"))

                                                                                                           .PageSize(5)
                                                                                                            .Model(model =>
                                                                                                            {
                                                                                                                model.Id(p => p.DLRSalaryId);
                                                                                                                //model.Field(p => p.NetSalary).Editable(false);
                                                                                                                //model.Field(p => p.TotalExpectedHour).Editable(false);
                                                                                                                //model.Field(p => p.TotalSalary).Editable(false);
                                                                                                            }).Read(read => read.Action("DLRSalaries_Read", "DLRSalary", new { id = "#=DailyLaborRateId #" }))
                                                                                                           .Create(create => create.Action("DLRSalaries_Create", "DLRSalary", new { id = "#=DailyLaborRateId #" }))
                                                                                                           .Update(update => update.Action("DLRSalaries_Update", "DLRSalary"))
                                                                                                           .Destroy(destroy => destroy.Action("DLRSalaries_Destroy", "DLRSalary"))
                                                                                                           .PageSize(10))

                                                                                                           .Pageable()

                                                                                                           .Sortable()
                                                                                                           .ToClientTemplate())
                                                                        </text>);

                                                                                itemn.Add().Text("Hours ").Content(@<text>

                                                                                    @(Html.Kendo().Grid<ExceedERP.Core.Domain.printing.JobCosting.DLRHour>()
                                                                                                                  .Name("DLRHour#=DailyLaborRateId#")
                                                                                                                     .Columns(columns =>
                                                                                                                     {
                                                                                                                         columns.Bound(c => c.NoOfDay).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                         columns.Bound(c => c.NoOfWorkingHour).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                         columns.Bound(c => c.NoOfEmployee).EditorTemplateName("NummericTextBoxTemplate");
                                                                                                                         columns.Bound(c => c.ExpectedTime).EditorTemplateName("ReadOnlyTemplate").ClientFooterTemplate("Total:\\#=sum\\# ");
                                                                                                                         columns.Command(command =>
                                                                                                                         {

                                                                                                                             command.Edit();
                                                                                                                             command.Destroy();
                                                                                                                         }).Width(200);

                                                                                                                     })
                                                                                                                   .ToolBar(toolbar =>
                                                                                                                   {
                                                                                                                       toolbar.Create();

                                                                                                                   })
                                                                                                                   .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                                                                                   .Events(ev=>ev.Save("onSave").Remove("onSave"))
                                                                                                                   .DataSource(dataSource => dataSource
                                                                                                                   .Ajax()
                                                                                                                   .Aggregates(aggregates =>

                                                                                                                   {
                                                                                                                       aggregates.Add(c => c.ExpectedTime).Sum();
                                                                                                                   })
                                                                                                                   .ServerOperation(false)
                                                                                                                   .Events(ev => ev.Error("error_handler(\"DLRHour#=DailyLaborRateId#\")")
                                                                                                                   .RequestStart("onRequestStart(\"DLRHour#=DailyLaborRateId#\")")
                                                                                                                   .RequestEnd("onRequestEnd(\"DLRHour#=DailyLaborRateId#\")"))

                                                                                                                   .PageSize(5)
                                                                                                                   .Model(model => model.Id(p => p.DLRHourId))
                                                                                                                   .Read(read => read.Action("DLRHours_Read", "DLRHour", new { id = "#=DailyLaborRateId #" }))
                                                                                                                   .Create(create => create.Action("DLRHours_Create", "DLRHour", new { id = "#=DailyLaborRateId #" }))
                                                                                                                   .Update(update => update.Action("DLRHours_Update", "DLRHour"))
                                                                                                                   .Destroy(destroy => destroy.Action("DLRHours_Destroy", "DLRHour"))
                                                                                                                   .PageSize(10))

                                                                                                                   .Pageable()

                                                                                                                   .Sortable()
                                                                                                                   .ToClientTemplate())
                                                                                </text>);
                                                                                    })

                          .ToClientTemplate())
</script>
<script>
    function filterPeriods() {
        return {
            YearId: $("#GlFiscalYearId").val()

        };
    }
    var codeid = 0;
    var emptype = 0;
    function onDetailExpand(e) {
        var masterRow = e.masterRow;
        var masterGrid = $("#grid").data("kendoGrid");
        var masterDataItem = masterGrid.dataItem(masterRow);
        var codeid = masterDataItem.DailyLaborRateId;
         emptype = masterDataItem.EmployeeType;
        var grid = $('#DLRSalary' + codeid).data('kendoGrid');
        if (emptype == 0 || emptype == 1) {
            grid.hideColumn('NoOfDay');
            grid.hideColumn('RatePerDay');
            grid.hideColumn('NoOfEmployee');
            
        }
        else {
            
            grid.hideColumn('LessAbsence');
            grid.hideColumn('BasicSalary');
            grid.hideColumn('LessIndirectLabor');
            grid.hideColumn('NetSalary');
            grid.hideColumn('Total');
            grid.hideColumn('Pension');
        }
    }

    function onDataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
    function RequestEnd(e) {
        console.log(0000);
        if (e.type == "create" || e.type == "destroy" || e.type == "update") {
            setTimeout(function myfunction() {
                $("#grid").data("kendoGrid").dataSource.read();
            }, 100);
        }
    }
    function onEdit(e) {
        //if(e.n)
        //var detailGridWrapper = this.wrapper;
        //// GET PARENT ROW ELEMENT
        //var parentRow = detailGridWrapper.closest("tr.k-detail-row").prev("tr");
        //// GET PARENT GRID ELEMENT
        //var parentGrid = parentRow.closest("[data-role=grid]").data("kendoGrid");
        //// GET THE PARENT ROW MODEL
        //var parentModel = parentGrid.dataItem(parentRow);
        //emptype = parentModel.EmployeeType;

    }
    function onSave(e) {

        var grid = $("#grid").data("kendoGrid").dataSource.read();
    }
    function onChange() {
       
        var BasicSalary = $("#BasicSalary").val();
        var LessIndirectLabor = $("#LessIndirectLabor").val();
        var LessAbsence = $("#LessAbsence").val();
        var netSalary = BasicSalary - LessIndirectLabor;
        var total = netSalary - LessAbsence;
        $("#NetSalary").val(netSalary).trigger("change");
        $("#Total").val(total).trigger("change");

        var NoOfDay = $("#NoOfDay").val();
        var RatePerDay = $("#RatePerDay").val();
        var NoOfEmployee = $("#NoOfEmployee").val();
        var NoOfWorkingHour = $("#NoOfWorkingHour").val();
        if (emptype != 1 && emptype != 0) {
            var TotalSalary = NoOfDay * RatePerDay * NoOfEmployee;
            $("#TotalSalary").val(TotalSalary).trigger("change");
        }
        else {
            $("#TotalSalary").val(total).trigger("change");

        }
       

        var ExpectedTime = NoOfDay * NoOfWorkingHour * NoOfEmployee;
        $("#ExpectedTime").val(ExpectedTime).trigger("change");
    
    }
    
</script>
<script>
    $("#numerictextbox").kendoNumericTextBox({
        decimals: 3,
        restrictDecimals: true
    });
</script>