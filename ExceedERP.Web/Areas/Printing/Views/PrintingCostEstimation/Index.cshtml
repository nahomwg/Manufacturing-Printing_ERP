
<label>Printing Cost Estimation</label>

@(Html.Kendo().Grid<ExceedERP.Core.Domain.Printing.PrintingCostEstimation>()
                  .Name("grid")
                  .Columns(columns =>
                  {
                      columns.ForeignKey(c => c.JobTypeId, (IEnumerable)ViewData["JobType"], "Value", "Text");
                      columns.ForeignKey(c => c.PaperSizeId, (IEnumerable)ViewData["PaperSize"], "Value", "Text");
                      columns.ForeignKey(c => c.CustomerId, (IEnumerable)ViewData["Customer"], "Value", "Text");
                      columns.ForeignKey(c => c.BindingStyleId, (IEnumerable)ViewData["BindingStyle"], "Value", "Text");

                      columns.Bound(c => c.TextNoOfColors);
                      columns.Bound(c => c.CoverNoOfColor);
                      columns.Bound(c => c.ProductQuantity);
                      columns.Bound(c => c.TotalTextNoPages).Title("Number Of Pages");
                      
                      columns.Command(command =>
                      {
                          command.Edit().Text(" ").IconClass("fa fa-pencil").HtmlAttributes(new { title = "Edit" });
                          command.Custom("check").Text(" ").IconClass("fa fa-check").HtmlAttributes(new { @class = "check", title = "Check" }).Click("checkEstimation");
                          command.Custom("approve").Text(" ").IconClass("fa fa-thumbs-o-up").HtmlAttributes(new { @class = "approve", title = "Approve" }).Click("approveEstimation");
                          //command.Custom("reject").Text(" ").IconClass("fa fa-remove").HtmlAttributes(new { @class = "reject", title = "Reject" }).Click("rejectEstimation");
                          command.Destroy().Text(" ").IconClass("fa fa-trash").HtmlAttributes(new { title = "Delete" });
                      }).Width(180);
                  })
                  .ToolBar(toolbar =>
                  {
                      toolbar.Create();
                  })
                  .Events(ev => ev.DetailExpand("detailExpand")
                    .DataBound("dataBound")
                    )
                  .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("PrintingCostEstimationTemplate"))
                  .Filterable()
                  .Scrollable()
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .Model(model => model.Id(p => p.PrintingCostEstimationId))
                      .Read(read => read.Action("PrintingCostEstimations_Read", "PrintingCostEstimation"))
                      .Create(create => create.Action("PrintingCostEstimations_Create", "PrintingCostEstimation"))
                      .Update(update => update.Action("PrintingCostEstimations_Update", "PrintingCostEstimation"))
                      .Destroy(destroy => destroy.Action("PrintingCostEstimations_Destroy", "PrintingCostEstimation"))
                  ).ClientDetailTemplateId("cost_estimation")
)

<script id="cost_estimation" type="text/x-kendo-template">
    @(Html.Kendo().TabStrip()
                .Name("tabstrip_grid_#=PrintingCostEstimationId#")
                .SelectedIndex(0)
                .Items(itemn =>
                {
                    itemn.Add().Text("Estimation Material List").Content(@<text>@MaterialCost()</text>);
                            itemn.Add().Text("Labor Cost").Content(@<text>@LaborCost()</text>);
                                    itemn.Add().Text("Over All Cost").Content(
                                    @<text>
                                        <span class=".sum"><a onclick='return calculateOverallCost("#=PrintingCostEstimationId#")' href=' \#' title="Calculate overallcost"><i class="fa fa-plus-square fa-2x"></i></a></span>
                                        @OverAllCost()
                                    </text>);
                                    }).ToClientTemplate())
</script>

@helper MaterialCost()
{
    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Printing.PrintingEstimationMaterialCost>()
                                      .Name("material_#=PrintingCostEstimationId#")
                                      .Columns(columns =>
                                      {
                                          columns.ForeignKey(c => c.PrintingMaterialCategoryId, (IEnumerable)ViewData["Category"], "Value", "Text");
                                          columns.ForeignKey(c => c.PrintingMaterialCategoryItemId, (IEnumerable)ViewData["Item"], "Value", "Text");
                                          columns.Bound(c => c.UnitOfMeasurment);
                                          columns.Bound(c => c.Quantity);
                                          columns.Bound(c => c.UnitCost);
                                          columns.Bound(c => c.TotalCost).Format("{0:n4}").Width(130).ClientFooterTemplate("Material Cost: \\#=sum\\# "); ;
                                          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
                                      })
                                      .ToolBar(toolbar =>
                                      {
                                          toolbar.Create();
                                      })
                                      .Events(ev => ev.DataBound("onChildDataBound"))
                                      .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("PrintMaterialEstimationTemplate"))
                                      .Filterable()
                                      .Scrollable()
                                      .DataSource(dataSource => dataSource
                                          .Ajax()
                                          .Aggregates(aggregates =>
                                          {
                                              aggregates.Add(c => c.TotalCost).Sum(); 
                                          })
                                          .Model(model => model.Id(p => p.PrintingEstimationMaterialCostId))
                                          .Read(read => read.Action("PrintingEstimationMaterialCosts_Read", "PrintingEstimationMaterialCost", new { estId = "#=PrintingCostEstimationId#" }))
                                          .Create(create => create.Action("PrintingEstimationMaterialCosts_Create", "PrintingEstimationMaterialCost", new { estId = "#=PrintingCostEstimationId#" }))
                                          .Update(update => update.Action("PrintingEstimationMaterialCosts_Update", "PrintingEstimationMaterialCost"))
                                          .Destroy(destroy => destroy.Action("PrintingEstimationMaterialCosts_Destroy", "PrintingEstimationMaterialCost"))
                                      ).ToClientTemplate()
    )
}
@helper LaborCost()
{
    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Printing.PrintingEstimationLaborCost>()
                      .Name("labor_#=PrintingCostEstimationId#")
                      .Columns(columns =>
                      {
                          columns.Bound(c => c.ProcessCategory).EditorTemplateName("PrintingCategoryDropDownTemplate");
                          columns.ForeignKey(c => c.PrintingProcessId, (IEnumerable)ViewData["PrintingProcess"], "Value", "Text");
                          columns.ForeignKey(c => c.PrintingMachineTypeId, (IEnumerable)ViewData["PrintingMachineType"], "Value", "Text");
                          columns.Bound(c => c.EstimatedHours);
                          columns.Bound(c => c.LaborRate);
                          columns.Bound(c => c.TotalCost).Format("{0:n4}").Width(130).ClientFooterTemplate("Total Cost: \\#=sum\\# "); ;

                          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
                      })
                      .ToolBar(toolbar =>
                      {
                          toolbar.Create();
                      })
                      .Events(ev => ev.DataBound("onChildDataBound"))
                      .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("laborTemplate"))
                      .Filterable()
                      .Scrollable()
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Sort(sort => sort.Add(e => e.ProcessCategory).Ascending())

                          .Aggregates(aggregates =>
                          {
                              aggregates.Add(c => c.TotalCost).Sum();
                          })
                          .Model(model => model.Id(p => p.PrintingEstimationLaborCostId))
                          .Read(read => read.Action("PrintingEstimationLaborCosts_Read", "PrintingEstimationLaborCost", new { estId = "#=PrintingCostEstimationId#" }))
                          .Create(create => create.Action("PrintingEstimationLaborCosts_Create", "PrintingEstimationLaborCost", new { estId = "#=PrintingCostEstimationId#" }))
                          .Update(update => update.Action("PrintingEstimationLaborCosts_Update", "PrintingEstimationLaborCost"))
                          .Destroy(delete => delete.Action("PrintingEstimationLaborCosts_Delete", "PrintingEstimationLaborCost"))
                      ).ToClientTemplate()
    )

}


@helper OverAllCost()
{
    @(Html.Kendo().Grid<ExceedERP.Core.Domain.Printing.PrintingOverAllCost>()
                              .Name("overall_#=PrintingCostEstimationId#")
                              .Columns(columns =>
                              {
                                  columns.Bound(c => c.MaterialCost);
                                  columns.Bound(c => c.LaborCost);
                                  columns.Bound(c => c.TotalProductionCost);
                                  columns.Bound(c => c.AdminstrativeCost);
                                  columns.Bound(c => c.OverHeadCost);
                                  columns.Bound(c => c.ProfitMargin);
                                  columns.Bound(c => c.GraphicsCost);                                 
                                  columns.Bound(c => c.GrandTotal);
                                  columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
                              })                              
                              .Editable(editable => editable.Mode(GridEditMode.InLine))
                              .Filterable()
                              .Scrollable()
                              .Events(ev => ev.DataBound("onChildDataBound"))
                              .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .Model(model => 
                                  {
                                       model.Id(p => p.PrintingOverAllCostId);
                                       model.Field(p => p.MaterialCost).Editable(false);
                                       model.Field(p => p.LaborCost).Editable(false);
                                       model.Field(p => p.TotalProductionCost).Editable(false);
                                       model.Field(p => p.GrandTotal).Editable(false);
                                  })
                                  .Read(read => read.Action("PrintingOverAllCosts_Read", "PrintingOverAllCost", new { id = "#=PrintingCostEstimationId#" }))
                                  .Create(create => create.Action("PrintingOverAllCosts_Create", "PrintingOverAllCost", new { id = "#=PrintingCostEstimationId#" }))
                                  .Update(update => update.Action("PrintingOverAllCosts_Update", "PrintingOverAllCost"))
                                  .Destroy(destroy => destroy.Action("PrintingOverAllCosts_Destroy", "PrintingOverAllCost"))
                              ).ToClientTemplate()
    )

}


<script type="text/javascript">
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);
            $(this).find(".k-grid-reject").hide();
            if (dataItem.IsOnlineApproved) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-approve").hide();
                $(this).find(".k-grid-reject").hide();
                $(this).find(".k-grid-delete").hide();
            }
            else if (dataItem.IsOnlineTransferred && dataItem.IsOnlineApproved == false) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-check").hide();
                $(this).find(".k-grid-delete").hide();
            }

        });
    }
    var masterRow;
    var masterGrid;
    var masterDataItem;
    var codeid;
    var isApproved;
    var isChecked;
    var sendMarginApprove;
    function detailExpand(e) {
        masterRow = e.masterRow;
        masterGrid = $("#grid").data("kendoGrid");
        masterDataItem = masterGrid.dataItem(masterRow);
        codeid = masterDataItem.PrintingCostEstimationId;
        isApproved = masterDataItem.IsOnlineApproved;
        isChecked = masterDataItem.IsOnlineTransferred;
        sendMarginApprove = masterDataItem.IsSentForMarginApproval;
        if (isChecked || isApproved) {
            $(".k-grid-add", "#material_" + codeid).hide();
            $(".k-grid-add", "#labor_" + codeid).hide();
            $(".sum").hide();
        }
    }
    function onChildDataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var dataItem = grid.dataItem(this);

            if (isChecked || isApproved) {
                $(this).find(".k-grid-edit").hide();
                $(this).find(".k-grid-delete").hide();
                //$(this).find(".k-grid-approvemargin").hide();

            }

        });

    }
    function filterJobType() {
        return {
            text: $("#JobTypeId").data("kendoDropDownList").filterInput.val(),
        }
    }

    function filterCustomer() {
        return {
            text: $("#CustomerId").data("kendoDropDownList").filterInput.val(),
        }
    }

    function filterPaperSize() {
        return {
            text: $("#PaperSizeId").data("kendoDropDownList").filterInput.val(),
        }
    }


    function filterBindingStyle() {
        return {
            text: $("#BindingStyleId").data("kendoDropDownList").filterInput.val(),
        }
    }

    function filterCategory() {
        return {
            text: $("#PrintingMaterialCategoryId").data("kendoDropDownList").filterInput.val(),
        }
    }
    function filterCategoryItem() {
        return {
            text: $("#PrintingMaterialCategoryItemId").data("kendoDropDownList").filterInput.val(),
            materialCategoryId: $("#PrintingMaterialCategoryId").val()
        }
    }
    function filterProcess() {
        return {
            text: $("#PrintingProcessId").data("kendoDropDownList").filterInput.val(),
            printingProcessCategory: $("#ProcessCategory").val()
        }
    }

    function showMachineType() {
        var ProcessCategory = $("#ProcessCategory").val()
        if (ProcessCategory == 1) {
            $(".machine-type").show();
        }
        else {
            $(".machine-type").hide();
        }
    }
    function calculateOverallCost(id) {
        var recordStatus = "";

        $.ajax({
            type: "POST",
            url: '@Url.Action("CalculateOverAllCost", "PrintingCostEstimation", new { area = "Printing" })',
            data: { id: id },
            success: function (result) {
                // toastr.warnning(result.Message);
                alert(result);
                recordStatus = result.Status;
                location.reload(true);
            }, //end succ
            error: function (result) {
                alert(result);
            }
        });
    }
    function checkEstimation(e) {
        if (confirm("Are you sure this estimation form is to be checked?")) {
             var grid = this,
            dataItem = grid.dataItem(e.currentTarget.closest("tr"));
        $.ajax({
           type: "POST",
            url: '@Url.Action("CheckEstimation", "PrintingCostEstimation", new { Area = "Printing" })',
            data: { id: dataItem.PrintingCostEstimationId },
            success: function (result) {
                if (result.Success) {
                    toastr.success(result.Message);
                    $("#grid").data("kendoGrid").dataSource.read();
                }
                else {
                    toastr.error(result.Message);

                }
           },
           error: function(result) {
               alert(result);
           }
       });
      }
    }
   
        function approveEstimation(e) {
            if (confirm("Are you sure to approve this estimation form?")) {
             var grid = this,
            dataItem = grid.dataItem(e.currentTarget.closest("tr"));
            $.ajax({
               type: "POST",
                url: '@Url.Action("ApproveEstimationForm", "PrintingCostEstimation", new { Area = "Printing" })',
                data: { id: dataItem.PrintingCostEstimationId },
                success: function (result) {
                    if (result.Success) {
                        toastr.success(result.Message);
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        toastr.error(result.Message);

                    }
           },
           error: function(result) {
               alert(result);
           }
       });
        }
    }
</script>

<style>
    div.k-edit-form-container {
        width: auto;
        height: auto;
    }

    .row .col-sm-2 {
        width: 150px;
    }

    .row {
        margin: auto;
    }
</style>