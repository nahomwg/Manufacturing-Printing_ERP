@using ExceedERP.Core.Localization
@using ExceedERP.Web.Models

@(Html.Kendo().Grid<RegisterViewModel>()
      .Name("appUserGrid")
      .Columns(columns =>
      {
        columns.Bound(c => c.UserName);
        columns.Bound(c => c.Email);
        columns.Bound(c => c.FirstName);
        columns.Bound(c => c.MiddleName);
        columns.Bound(c => c.LastName);
        columns.Bound(c => c.PhoneNo);
        columns.Command(command => { command.Edit().UpdateText(Resources.ActionButton_Update).CancelText(Resources.ActionButton_Cancel).Text(Resources.ActionButton_Update);command.Destroy().Text(Resources.ActionButton_Cancel);  }).Width(180);
      })
      .ToolBar(toolbar => {
            toolbar.Create().Text(Resources.ActionButton_AddNewRecord);
            toolbar.Excel();
            toolbar.Pdf();
      })
      .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("UserEdit").Window(x => x.Title("User Registration")))
      .Pageable()
      .Sortable(sortable => {
          sortable.SortMode(GridSortMode.SingleColumn);
          
      })
      .Events(events => events.Edit("onEditUser").DetailExpand("onDetailExpandUser"))
      .Filterable()
      .Scrollable(height => height.Height(500))
      .DataSource(dataSource => dataSource
          .Ajax()
               .Events(events => events.Error("error_handler")
                              .Sync("sync_handler"))

              .Model(model => model.Id(p => p.Id))
          .Events(events => events.Sync("sync_handler"))
          .Read(read => read.Action("ApplicationUsers_Read", "ApplicationUser"))
          .Create(create => create.Action("ApplicationUsers_Create", "ApplicationUser"))
          .Update(update => update.Action("ApplicationUsers_Update", "ApplicationUser"))
          .Destroy(destroy => destroy.Action("ApplicationUsers_Destroy", "ApplicationUser"))
        ).ClientDetailTemplateId("templategroup")
      )
<script id="templategroup" type="text/kendo-tmpl">
    @Html.Kendo().TabStrip().Name("groupTab_#=Id#").SelectedIndex(0).Items(items =>
    {
        items.Add().Text("User Groups").Content(@<text>
                                                   @UserGroups() 
                                                 </text>);
        items.Add().Text("UserRoles").Content(@<text>
                                                  @(Html.Kendo().Grid<ExceedERP.Web.Models.RoleViewModel>()
                                          .Name("userRole#=Id#")
                                          .Columns(columns =>
                                          {
                                              columns.Bound(c => c.Name);
                                              columns.Bound(c => c.Description);
                                             
                                          })
                                          .ToolBar(toolbar =>
                                          {
                                               
                                          })
                                          .Editable(editable => editable.Mode(GridEditMode.InLine))
                                          .Selectable(selectable =>
                                          {
                                              selectable.Mode(GridSelectionMode.Single);
                                              selectable.Type(GridSelectionType.Row);
                                          })
                                          .Sortable(sortable =>
                                          {
                                              sortable.SortMode(GridSortMode.SingleColumn);
                                          })
                                          .Filterable()
                                          .Scrollable()
                                          .DataSource(dataSource => dataSource
                                              .Ajax()
                                                       .Events(events => events.Error("error_handler")
                                  .Sync("sync_handler"))
                                              .Model(model => model.Id(p => p.RoleViewModelId))
                                              .Read(read => read.Action("UserRole_Read", "ApplicationRole" , new {id = "#=Id#"}))
                                              
                                          ).ToClientTemplate()
                                          )

                                               </text>);
        items.Add().Text("Branch").Content(@<text>
                                               @UserBranch()
                                            </text>);
    }).ToClientTemplate()

    
</script>
 @helper UserGroups()
 {
     @(Html.Kendo().Grid<GroupViewModel>()
          .Name("userGroup_#=Id#")
          .Columns(columns =>
          {
              columns.Bound(c => c.Name);
              columns.Bound(c => c.Description);
              columns.Bound(c => c.IsAllowed).ClientTemplate("<input type='checkbox' \\#= IsAllowed? checked='checked': checked='' \\# class='checkbox'  />");

              
          })
             .ToolBar(toolbar => toolbar.Template(@<text>
                                               @Html.Kendo().Button().Name("assigGroupbtn_#=Id#").Content("Save Change").Events(events => events.Click("sendGroups")).Enable(false).ToClientTemplate()
                                                </text>))

          .Events(events => events.DataBound("detaildatabound"))
          .Sortable(sortable =>
          {
              sortable.SortMode(GridSortMode.SingleColumn);
          })
          .Filterable()
          .Scrollable(height => height.Height(500))
         
        //  .Selectable(s => s.Mode(GridSelectionMode.Multiple))
          .DataSource(dataSource => dataSource
                                                                
              .Ajax()
                                                                 .Events(events => events.Error("error_handler")
                                                                            .Sync("sync_handler"))
              .Events(events => events.Sync("sync_handler"))
              .Model(model => model.Id(p => p.Id))
              .Read(read => read.Action("ApplicationUserGroups", "Groups", new { id = "#=Id#" }))
              

          ).ToClientTemplate()
    )

}

@helper UserBranch()
{

    @(Html.Kendo().Grid<BranchVm>()
      .Name("userBranch_#=Id#")
      .Columns(columns =>
      {
          columns.Bound(c => c.BranchName);
          columns.Bound(c => c.Remark);
          columns.Bound(c => c.IsAllowed).ClientTemplate("<input  type='checkbox'  \\#= IsAllowed ? checked='checked': checked='' \\# class='checkbox'  />");
          columns.Bound(c => c.IsDefault).ClientTemplate("<input  type='checkbox' \\#= IsDefault ? checked='checked': checked='' \\# class='checkbox'  />");
          //columns.Command(command => { command.Edit().UpdateText(Resources.ActionButton_Update).CancelText(Resources.ActionButton_CancelUpdate).Text(Resources.ActionButton_Edit); }).Width(180);
      })
      .ToolBar(toolbar =>
                  toolbar.Save()
          @*toolbar.Template(@<text>
        @Html.Kendo().Button().Name("assignBranchbtn#=Id#").Content("Save Change").Events(events => events.Click("sendBranch")).Enable(false).ToClientTemplate()
    </text>
    )*@
)
                  .Events(events => { events.DataBound("branchdetaildatabound");
                  })
                          .Editable(editable => editable.Mode(GridEditMode.InCell))
                  .Scrollable()
                  .DataSource(dataSource => dataSource
                      .Ajax()
                               .Events(events => events.Error("error_handler")
                                  .Sync("sync_handler"))
                       .Batch(true)
                                  .Model(model =>
                                  {
                                      model.Id(p => p.BranchId);
                                  })
                                              .Read(read => read.Action("ApplicationBranch", "BranchUser", new { id = "#=Id#" }))
                                                                                                                        
                                              .Create(create => create.Action("EditingBranches_Create", "ApplicationUser", new { id = "#=Id#" }))
                                                                                                                                        
                                              .Update(create => create.Action("EditingBranches_Create", "ApplicationUser", new { id = "#=Id#" }))
                  ).ToClientTemplate()
    )

}
<script>
    function sync_handler(e) {
        this.read();

    }
    function onEditUser(e) {

        var insertionMode = e.model.isNew();
        if (insertionMode) {
             
        }
        else {
            $(".forCreate").remove();
            e.container.data("kendoWindow").title('Edit User');
        }
        
    }
    var gridName;
    var branchGridName; 
    var masterId;
    function onDetailExpandUser(e) {
        var masterRow = e.masterRow;

        var masterGrid = $("#appUserGrid").data("kendoGrid");

        var masterDataItem = masterGrid.dataItem(masterRow);

        masterId = masterDataItem.Id;
        gridName = "#userGroup_" + masterDataItem.Id;
        branchGridName = "#userBranch_" + masterDataItem.Id; 
        var subgrid = $(gridName).data("kendoGrid");
        var branchgrid = $(branchGridName).data("kendoGrid");
        subgrid.table.on("click", ".checkbox", selectRow);
        branchgrid.table.on("click", ".checkbox", Check);

    }

    var checkedIds = [];
    var checkedBranches = [];
    var items = {};
    var buttonName; 
    var buttonNameBranch;
    function selectRow() {
        buttonName = "#assigGroupbtn_" + masterId;
        var button = $(buttonName).data("kendoButton");
        button.enable(true);
        var checked = this.checked,
            row = $(this).closest("tr"),
            gridappuser = $(gridName).data("kendoGrid"),
            dataItem = gridappuser.dataItem(row);
        var item = dataItem;
        checkedIds.push(dataItem.BranchId);
        if (checked) {

            row.addClass("k-state-selected");
        } else {

            row.removeClass("k-state-selected");
        }
    }
    function selectBranch() {
        buttonNameBranch = "#assignBranchbtn" + masterId;
        var button = $(buttonNameBranch).data("kendoButton");
        //button.enable(true);
        var checked = this.checked,
            row = $(this).closest("tr"),
            gridbranch = $(branchGridName).data("kendoGrid"),
            dataItem = gridbranch.dataItem(row);
        var item = dataItem;
        checkedBranches.push(dataItem.BranchId);
        if (checked) {

            row.addClass("k-state-selected");
        } else {

            row.removeClass("k-state-selected");
        }
    }
     

    function sendGroups(e) {
        var dataItemssel;
      
        var items = {};
         
        var count = 0;
        var gridappuser = $(gridName).data("kendoGrid");
        
        $(gridName).find("input:checked").each(function () {

            var item = gridappuser.dataItem($(this).closest('tr'));

            items['result[' + count + '].Name'] = item.Name;
            items['result[' + count + '].Id'] = item.Id;
            items['result[' + count + '].IsAllowed'] = item.IsAllowed;
       
            items['result[' + count + '].Description'] = item.Description;
            count++;
        });

        items['result[' + count + '].Name'] = "masterGridParameter";
        items['result[' + count + '].Id'] = masterId;
        items['result[' + count + '].IsAllowed'] = false;
       
        items['result[' + count + '].Description'] = "master Grid Description";

      

        buttonName = "#assigGroupbtn_" + masterId;
        var button = $(buttonName).data("kendoButton");
        button.enable(false);
        $.ajax({
            type: "POST",
            data: items,
            url: '@Url.Action("Groups","ApplicationUser")',
            success: function (result) {
                console.log(result);
            }
        });
      
       

    }

    function sendBranch(e) {
        
     

        var items = {};

        var count = 0;
        var gridbranch = $(branchGridName).data("kendoGrid");

        $(branchGridName).find("input:checked").each(function () {

            var item = gridbranch.dataItem($(this).closest('tr'));

            items['result[' + count + '].BranchName'] = item.BranchName;
            items['result[' + count + '].BranchId'] = item.BranchId;
            items['result[' + count + '].IsAllowed'] = item.IsAllowed;
            items['result[' + count + '].IsDefault'] = item.IsDefault;
            items['result[' + count + '].Remark'] = item.Remark;
            count++;
        });

        items['result[' + count + '].BranchName'] = "masterGridParameter";
        items['result[' + count + '].BranchId'] = masterId;
        items['result[' + count + '].IsAllowed'] = false;
        items['result[' + count + '].IsDefault'] = false;
        items['result[' + count + '].Remark'] = "master Grid Description";



        buttonNameBranch = "#assignBranchbtn" + masterId;
        var button = $(buttonNameBranch).data("kendoButton");
        button.enable(false);
        $.ajax({
            type: "POST",
            data: items,
            url: '@Url.Action("Branches", "ApplicationUser")',
            success: function (result) {
                console.log(result);
            }
        });


    }
    function detaildatabound(e) {

        var rows = e.sender.tbody.children();

        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var dataItem = e.sender.dataItem(row);

            if (dataItem.IsAllowed) {
                row.addClass("k-state-selected");

            }


        }


    }
    function branchdetaildatabound(e) {

        var rows = e.sender.tbody.children();

        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var dataItem = e.sender.dataItem(row);

            if (dataItem.IsAllowed) {
                row.addClass("k-state-selected");

            }
            if (dataItem.IsDefault) {
                row.addClass("k-state-selected");

            }

        }


    }
    function GetName()
    {
        var id = $("#EmployeeId").data("kendoComboBox");
        var empId = id.value();
        $.ajax({
            url: '@Url.Action("GetFullName", "ApplicationUser")',

            data: { empId: empId},
            type: 'POST',
            cache: false,
            success: function (result) {
                r = result;
                var s = r.split(/-/);

                $("#FirstName").val(s[0]);
                $("#FirstName").trigger("change");
               
                $("#MiddleName").val(s[1]);
                $("#MiddleName").trigger("change");
                $("#LastName").val(s[2]);
                $("#LastName").trigger("change");
            }

        });
    }
   

</script>

<script type="text/javascript">
    var checkedIds = [];
    function Check() {
       
        var checked = this.checked;
              
        gridbranch = $(branchGridName).data("kendoGrid");
        gridbranch.closeCell();
        //var dataRows = gridbranch.items();
        //var row = dataRows.index(gridbranch.select());
        row = $(this).closest("tr"),
        dataItem = gridbranch.dataItem(row);
       
        checkedBranches.push(dataItem.BranchId);
        $(this).trigger('change');
        var col = $(this).closest('td');
        gridbranch.editCell(col);
        if (checked) {
            $.each(gridbranch.dataSource.view(), function () {
                if (gridbranch.columns[col.index()].field == "IsDefault") {
                    this.IsDefault = false;
                    dataItem.set(this.IsDefault, false);
                }
                
            })
        }
        dataItem.set(gridbranch.columns[col.index()].field, checked);
        gridbranch.closeCell(col);

       

        
        

        if (checked) {
            //-select the row
            row.addClass("k-state-selected");
        } else {
            //-remove selection
            row.removeClass("k-state-selected");
        }
     
    }
   
    </script>
<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);

        }

    }

    function sync_handler(e) {
        this.read();

    }
</script>
