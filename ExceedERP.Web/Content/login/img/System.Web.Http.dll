     while (count-- > 0 && content.indexOf(promptChar) === 0) {\n                    content = content.substring(1);\n                }\n                return content;\n            },\n            _findCaretPosBackwards: function (pos) {\n                var caretStart = this._find(pos, true);\n                if (caretStart < pos) {\n                    caretStart += 1;\n                }\n                return caretStart;\n            },\n            _inputHandler: function () {\n                if (kendo._activeElement() !== this.element[0]) {\n                    return;\n                }\n                this.inputChange(this.__backward);\n            },\n            _legacyIEInputHandler: function (e) {\n                var that = this;\n                var input = that.element[0];\n                var value = input.value;\n                var type = e.type;\n                that.__pasting = type === 'paste';\n                setTimeout(function () {\n                    if (type === 'mouseup' && that.__pasting) {\n                        return;\n                    }\n                    if (input.value && input.value !== value) {\n                        that.inputChange(that.__backward);\n                    }\n                });\n            },\n            _trackChange: function () {\n                var that = this;\n                that.__changing = true;\n                setTimeout(function () {\n                    that.__changing = false;\n                });\n            },\n            _form: function () {\n                var that = this;\n                var element = that.element;\n                var formId = element.attr('form');\n                var form = formId ? $('#' + formId) : element.closest('form');\n                if (form[0]) {\n                    that._resetHandler = function () {\n                        setTimeout(function () {\n                            that.value(element[0].value);\n                        });\n                    };\n                    that._submitHandler = function () {\n                        that.element[0].value = that._old = that.raw();\n                    };\n                    if (that.options.unmaskOnPost) {\n                        form.on('submit', that._submitHandler);\n                    }\n                    that._formElement = form.on('reset', that._resetHandler);\n                }\n            },\n            _keydown: function (e) {\n                var key = e.keyCode;\n                this.__backward = key === keys.BACKSPACE;\n                if (key === keys.ENTER) {\n                    this._change();\n                }\n            },\n            _drop: function () {\n                this.__dropping = true;\n            },\n            _find: function (idx, backward) {\n                var value = this.element.val() || this._emptyMask;\n                var step = 1;\n                if (backward === true) {\n                    step = -1;\n                }\n                while (idx > -1 || idx <= this._maskLength) {\n                    if (value.charAt(idx) !== this.tokens[idx]) {\n                        return idx;\n                    }\n                    idx += step;\n                }\n                return -1;\n            },\n            _mask: function (start, end, value, backward) {\n                var element = this.element[0];\n                var current = element.value || this._emptyMask;\n                var empty = this.options.promptChar;\n                var valueLength;\n                var chrIdx = 0;\n                var unmasked;\n                var chr;\n                var idx;\n                start = this._find(start, backward);\n                if (start > end) {\n                    end = start;\n                }\n                unmasked = this._unmask(current.substring(end), end);\n                value = this._unmask(value, start);\n                valueLength = value.length;\n                if (value) {\n                    unmasked = unmasked.replace(new RegExp('^_{0,' + valueLength + '}'), '');\n                }\n                value += unmasked;\n                current = current.split('');\n                chr = value.charAt(chrIdx);\n                while (start < this._maskLength) {\n                    current[start] = chr || empty;\n                    chr = value.charAt(++chrIdx);\n                    if (idx === undefined && chrIdx > valueLength) {\n                        idx = start;\n                    }\n                    start = this._find(start + 1);\n                }\n                element.value = this._old = current.join('');\n                if (kendo._activeElement() === element) {\n                    if (idx === undefined) {\n                        idx = this._maskLength;\n                    }\n                    caret(element, idx);\n                }\n                return idx;\n            },\n            _unmask: function (value, idx) {\n                if (!value) {\n                    return '';\n                }\n                if (this._unmaskedValue === value) {\n                    return this._unmaskedValue;\n                }\n                value = (value + '').split('');\n                var chr;\n                var token;\n                var chrIdx = 0;\n                var tokenIdx = idx || 0;\n                var empty = this.options.promptChar;\n                var valueLength = value.length;\n                var tokensLength = this.tokens.length;\n                var result = '';\n                while (tokenIdx < tokensLength) {\n                    chr = value[chrIdx];\n                    token = this.tokens[tokenIdx];\n                    if (chr === token || chr === empty) {\n                        result += chr === empty ? empty : '';\n                        chrIdx += 1;\n                        tokenIdx += 1;\n                    } else if (typeof token !== 'string') {\n                        if (token && token.test && token.test(chr) || $.isFunction(token) && token(chr)) {\n                            result += chr;\n                            tokenIdx += 1;\n                        } else {\n                            if (valueLength === 1) {\n                                this._blinkInvalidState();\n                            }\n                        }\n                        chrIdx += 1;\n                    } else {\n                        tokenIdx += 1;\n                    }\n                    if (chrIdx >= valueLength) {\n                        break;\n                    }\n                }\n                this._unmaskedValue = result;\n                return result;\n            },\n            _wrapper: function () {\n                var that = this;\n                var element = that.element;\n                var DOMElement = element[0];\n                var wrapper = element.wrap('<span class=\\'k-widget k-maskedtextbox\\'></span>').parent();\n                wrapper[0].style.cssText = DOMElement.style.cssText;\n                DOMElement.style.width = '100%';\n                that.wrapper = wrapper.addClass(DOMElement.className);\n            },\n            _blinkInvalidState: function () {\n                var that = this;\n                that.wrapper.addClass(STATEINVALID);\n                clearTimeout(that._invalidStateTimeout);\n                that._invalidStateTimeout = setTimeout(proxy(that._removeInvalidState, that), 100);\n            },\n            _removeInvalidState: function () {\n                var that = this;\n                that.wrapper.removeClass(STATEINVALID);\n                that._invalidStateTimeout = null;\n            },\n            _tokenize: function () {\n                var tokens = [];\n                var tokenIdx = 0;\n                var mask = this.options.mask || '';\n                var maskChars = mask.split('');\n                var length = maskChars.length;\n                var idx = 0;\n                var chr;\n                var rule;\n                var emptyMask = '';\n                var promptChar = this.options.promptChar;\n                var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n                var rules = this._rules;\n                for (; idx < length; idx++) {\n                    chr = maskChars[idx];\n                    rule = rules[chr];\n                    if (rule) {\n                        tokens[tokenIdx] = rule;\n                        emptyMask += promptChar;\n                        tokenIdx += 1;\n                    } else {\n                        if (chr === '.' || chr === ',') {\n                            chr = numberFormat[chr];\n                        } else if (chr === '$') {\n                            chr = numberFormat.currency.symbol;\n                        } else if (chr === '\\\\') {\n                            idx += 1;\n                            chr = maskChars[idx];\n                        }\n                        chr = chr.split('');\n                        for (var i = 0, l = chr.length; i < l; i++) {\n                            tokens[tokenIdx] = chr[i];\n                            emptyMask += chr[i];\n                            tokenIdx += 1;\n                        }\n                    }\n                }\n                this.tokens = tokens;\n                this._emptyMask = emptyMask;\n                this._maskLength = emptyMask.length;\n            }\n        });\n        ui.plugin(MaskedTextBox);\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('kendo.toolbar', [\n        'kendo.core',\n        'kendo.userevents',\n        'kendo.popup'\n    ], f);\n}(function () {\n    var __meta__ = {\n        id: 'toolbar',\n        name: 'ToolBar',\n        category: 'web',\n        description: 'The ToolBar widget displays one or more command buttons divided into groups.',\n        depends: ['core']\n    };\n    (function ($, undefined) {\n        var kendo = window.kendo, Class = kendo.Class, Widget = kendo.ui.Widget, proxy = $.proxy, isFunction = kendo.isFunction, keys = kendo.keys, outerWidth = kendo._outerWidth, TOOLBAR = 'k-toolbar', BUTTON = 'k-button', OVERFLOW_BUTTON = 'k-overflow-button', TOGGLE_BUTTON = 'k-toggle-button', BUTTON_GROUP = 'k-button-group', SPLIT_BUTTON = 'k-split-button', SEPARATOR = 'k-separator', POPUP = 'k-popup', RESIZABLE_TOOLBAR = 'k-toolbar-resizable', STATE_ACTIVE = 'k-state-active', STATE_DISABLED = 'k-state-disabled', STATE_HIDDEN = 'k-state-hidden', GROUP_START = 'k-group-start', GROUP_END = 'k-group-end', PRIMARY = 'k-primary', ICON = 'k-icon', ICON_PREFIX = 'k-i-', BUTTON_ICON = 'k-button-icon', BUTTON_ICON_TEXT = 'k-button-icontext', LIST_CONTAINER = 'k-list-container k-split-container', SPLIT_BUTTON_ARROW = 'k-split-button-arrow', OVERFLOW_ANCHOR = 'k-overflow-anchor', OVERFLOW_CONTAINER = 'k-overflow-container', FIRST_TOOLBAR_VISIBLE = 'k-toolbar-first-visible', LAST_TOOLBAR_VISIBLE = 'k-toolbar-last-visible', CLICK = 'click', TOGGLE = 'toggle', OPEN = 'open', CLOSE = 'close', OVERFLOW_OPEN = 'overflowOpen', OVERFLOW_CLOSE = 'overflowClose', OVERFLOW_NEVER = 'never', OVERFLOW_AUTO = 'auto', OVERFLOW_ALWAYS = 'always', OVERFLOW_HIDDEN = 'k-overflow-hidden', OPTION_LIST_SUFFIX = '_optionlist', KENDO_UID_ATTR = kendo.attr('uid');\n        kendo.toolbar = {};\n        var components = {\n            overflowAnchor: '<div tabindex=\"0\" class=\"k-overflow-anchor\"></div>',\n            overflowContainer: '<ul class=\"k-overflow-container k-list-container\"></ul>'\n        };\n        kendo.toolbar.registerComponent = function (name, toolbar, overflow) {\n            components[name] = {\n                toolbar: toolbar,\n                overflow: overflow\n            };\n        };\n        var Item = kendo.Class.extend({\n            addOverflowAttr: function () {\n                this.element.attr(kendo.attr('overflow'), this.options.overflow || OVERFLOW_AUTO);\n            },\n            addUidAttr: function () {\n                this.element.attr(KENDO_UID_ATTR, this.options.uid);\n            },\n            addIdAttr: function () {\n                if (this.options.id) {\n                    this.element.attr('id', this.options.id);\n                }\n            },\n            addOverflowIdAttr: function () {\n                if (this.options.id) {\n                    this.element.attr('id', this.options.id + '_overflow');\n                }\n            },\n            attributes: function () {\n                if (this.options.attributes) {\n                    this.element.attr(this.options.attributes);\n                }\n            },\n            show: function () {\n                this.element.removeClass(STATE_HIDDEN).show();\n                this.options.hidden = false;\n            },\n            hide: function () {\n                this.element.addClass(STATE_HIDDEN).hide();\n                if (this.overflow && this.overflowHidden) {\n                    this.overflowHidden();\n                }\n                this.options.hidden = true;\n            },\n            remove: function () {\n                this.element.remove();\n            },\n            enable: function (isEnabled) {\n                if (isEnabled === undefined) {\n                    isEnabled = true;\n                }\n                this.element.toggleClass(STATE_DISABLED, !isEnabled);\n                this.options.enable = isEnabled;\n            },\n            twin: function () {\n                var uid = this.element.attr(KENDO_UID_ATTR);\n                if (this.overflow && this.options.splitContainerId) {\n                    return $('#' + this.options.splitContainerId).find('[' + KENDO_UID_ATTR + '=\\'' + uid + '\\']').data(this.options.type);\n                } else if (this.overflow) {\n                    return this.toolbar.element.find('[' + KENDO_UID_ATTR + '=\\'' + uid + '\\']').data(this.options.type);\n                } else if (this.toolbar.options.resizable) {\n                    return this.toolbar.popup.element.find('[' + KENDO_UID_ATTR + '=\\'' + uid + '\\']').data(this.options.type);\n                }\n            }\n        });\n        kendo.toolbar.Item = Item;\n        var Button = Item.extend({\n            init: function (options, toolbar) {\n                var element = options.useButtonTag ? $('<button tabindex=\"0\"></button>') : $('<a href tabindex=\"0\"></a>');\n                this.element = element;\n                this.options = options;\n                this.toolbar = toolbar;\n                this.attributes();\n                if (options.primary) {\n                    element.addClass(PRIMARY);\n                }\n                if (options.togglable) {\n                    element.addClass(TOGGLE_BUTTON);\n                    this.toggle(options.selected);\n                }\n                if (options.url !== undefined && !options.useButtonTag) {\n                    element.attr('href', options.url);\n                    if (options.mobile) {\n                        element.attr(kendo.attr('role'), 'button');\n                    }\n                }\n                if (options.group) {\n                    element.attr(kendo.attr('group'), options.group);\n                    this.group = this.toolbar.addToGroup(this, options.group);\n                }\n                if (!options.togglable && options.click && isFunction(options.click)) {\n                    this.clickHandler = options.click;\n                }\n                if (options.togglable && options.toggle && isFunction(options.toggle)) {\n                    this.toggleHandler = options.toggle;\n                }\n            },\n            toggle: function (state, propagate) {\n                state = !!state;\n                if (this.group && state) {\n                    this.group.select(this);\n                } else if (!this.group) {\n                    this.select(state);\n                }\n                if (propagate && this.twin()) {\n                    this.twin().toggle(state);\n                }\n            },\n            getParentGroup: function () {\n                if (this.options.isChild) {\n                    return this.element.closest('.' + BUTTON_GROUP).data('buttonGroup');\n                }\n            },\n            _addGraphics: function () {\n                var element = this.element, icon = this.options.icon, spriteCssClass = this.options.spriteCssClass, imageUrl = this.options.imageUrl, isEmpty, span, img;\n                if (spriteCssClass || imageUrl || icon) {\n                    isEmpty = true;\n                    element.contents().filter(function () {\n                        return !$(this).hasClass('k-sprite') && !$(this).hasClass(ICON) && !$(this).hasClass('k-image');\n                    }).each(function (idx, el) {\n                        if (el.nodeType == 1 || el.nodeType == 3 && $.trim(el.nodeValue).length > 0) {\n                            isEmpty = false;\n                        }\n                    });\n                    if (isEmpty) {\n                        element.addClass(BUTTON_ICON);\n                    } else {\n                        element.addClass(BUTTON_ICON_TEXT);\n                    }\n                }\n                if (icon) {\n                    span = element.children('span.' + ICON).first();\n                    if (!span[0]) {\n                        span = $('<span class=\"' + ICON + '\"></span>').prependTo(element);\n                    }\n                    span.addClass(ICON_PREFIX + icon);\n                } else if (spriteCssClass) {\n                    span = element.children('span.k-sprite').first();\n                    if (!span[0]) {\n                        span = $('<span class=\"k-sprite ' + ICON + '\"></span>').prependTo(element);\n                    }\n                    span.addClass(spriteCssClass);\n                } else if (imageUrl) {\n                    img = element.children('img.k-image').first();\n                    if (!img[0]) {\n                        img = $('<img alt=\"icon\" class=\"k-image\" />').prependTo(element);\n                    }\n                    img.attr('src', imageUrl);\n                }\n            }\n        });\n        kendo.toolbar.Button = Button;\n        var ToolBarButton = Button.extend({\n            init: function (options, toolbar) {\n                Button.fn.init.call(this, options, toolbar);\n                var element = this.element;\n                element.addClass(BUTTON);\n                this.addIdAttr();\n                if (options.align) {\n                    element.addClass('k-align-' + options.align);\n                }\n                if (options.showText != 'overflow' && options.text) {\n                    if (options.mobile) {\n                        element.html('<span class=\"km-text\">' + options.text + '</span>');\n                    } else {\n                        element.html(options.text);\n                    }\n                }\n                options.hasIcon = options.showIcon != 'overflow' && (options.icon || options.spriteCssClass || options.imageUrl);\n                if (options.hasIcon) {\n                    this._addGraphics();\n                }\n                this.addUidAttr();\n                this.addOverflowAttr();\n                this.enable(options.enable);\n                if (options.hidden) {\n                    this.hide();\n                }\n                this.element.data({\n                    type: 'button',\n                    button: this\n                });\n            },\n            select: function (selected) {\n                if (selected === undefined) {\n                    selected = false;\n                }\n                this.element.toggleClass(STATE_ACTIVE, selected);\n                this.options.selected = selected;\n            }\n        });\n        kendo.toolbar.ToolBarButton = ToolBarButton;\n        var OverflowButton = Button.extend({\n            init: function (options, toolbar) {\n                this.overflow = true;\n                Button.fn.init.call(this, $.extend({}, options), toolbar);\n                var element = this.element;\n                if (options.showText != 'toolbar' && options.text) {\n                    if (options.mobile) {\n                        element.html('<span class=\"km-text\">' + options.text + '</span>');\n                    } else {\n                        element.html('<span class=\"k-text\">' + options.text + '</span>');\n                    }\n                }\n                options.hasIcon = options.showIcon != 'toolbar' && (options.icon || options.spriteCssClass || options.imageUrl);\n                if (options.hasIcon) {\n                    this._addGraphics();\n                }\n                if (!options.isChild) {\n                    this._wrap();\n                }\n                this.addOverflowIdAttr();\n                this.attributes();\n                this.addUidAttr();\n                this.addOverflowAttr();\n                this.enable(options.enable);\n                element.addClass(OVERFLOW_BUTTON + ' ' + BUTTON);\n                if (options.hidden) {\n                    this.hide();\n                }\n                if (options.togglable) {\n                    this.toggle(options.selected);\n                }\n                this.element.data({\n                    type: 'button',\n                    button: this\n                });\n            },\n            _wrap: function () {\n                this.element = this.element.wrap('<li></li>').parent();\n            },\n            overflowHidden: function () {\n                this.element.addClass(OVERFLOW_HIDDEN);\n            },\n            select: function (selected) {\n                if (selected === undefined) {\n                    selected = false;\n                }\n                if (this.options.isChild) {\n                    this.element.toggleClass(STATE_ACTIVE, selected);\n                } else {\n                    this.element.find('.k-button').toggleClass(STATE_ACTIVE, selected);\n                }\n                this.options.selected = selected;\n            }\n        });\n        kendo.toolbar.OverflowButton = OverflowButton;\n        kendo.toolbar.registerComponent('button', ToolBarButton, OverflowButton);\n        var ButtonGroup = Item.extend({\n            createButtons: function (buttonConstructor) {\n                var options = this.options;\n                var items = options.buttons || [];\n                var item;\n                for (var i = 0; i < items.length; i++) {\n                    if (!items[i].uid) {\n                        items[i].uid = kendo.guid();\n                    }\n                    item = new buttonConstructor($.extend({\n                        mobile: options.mobile,\n                        isChild: true,\n                        type: 'button'\n                    }, items[i]), this.toolbar);\n                    item.element.appendTo(this.element);\n                }\n            },\n            refresh: function () {\n                this.element.children().filter(':not(\\'.' + STATE_HIDDEN + '\\'):first').addClass(GROUP_START);\n                this.element.children().filter(':not(\\'.' + STATE_HIDDEN + '\\'):last').addClass(GROUP_END);\n            }\n        });\n        kendo.toolbar.ButtonGroup = ButtonGroup;\n        var ToolBarButtonGroup = ButtonGroup.extend({\n            init: function (options, toolbar) {\n                var element = this.element = $('<div></div>');\n                this.options = options;\n                this.toolbar = toolbar;\n                this.addIdAttr();\n                if (options.align) {\n                    element.addClass('k-align-' + options.align);\n                }\n                this.createButtons(ToolBarButton);\n                this.attributes();\n                this.addUidAttr();\n                this.addOverflowAttr();\n                this.refresh();\n                element.addClass(BUTTON_GROUP);\n                this.element.data({\n                    type: 'buttonGroup',\n                    buttonGroup: this\n                });\n            }\n        });\n        kendo.toolbar.ToolBarButtonGroup = ToolBarButtonGroup;\n        var OverflowButtonGroup = ButtonGroup.extend({\n            init: function (options, toolbar) {\n                var element = this.element = $('<li></li>');\n                this.options = options;\n                this.toolbar = toolbar;\n                this.overflow = true;\n                this.addOverflowIdAttr();\n                this.createButtons(OverflowButton);\n                this.attributes();\n                this.addUidAttr();\n                this.addOverflowAttr();\n                this.refresh();\n                element.addClass((options.mobile ? '' : BUTTON_GROUP) + ' k-overflow-group');\n                this.element.data({\n                    type: 'buttonGroup',\n                    buttonGroup: this\n                });\n            },\n            overflowHidden: function () {\n                this.element.addClass(OVERFLOW_HIDDEN);\n            }\n        });\n        kendo.toolbar.OverflowButtonGroup = OverflowButtonGroup;\n        kendo.toolbar.registerComponent('buttonGroup', ToolBarButtonGroup, OverflowButtonGroup);\n        var ToolBarSplitButton = Item.extend({\n            init: function (options, toolbar) {\n                var element = this.element = $('<div class=\"' + SPLIT_BUTTON + '\" tabindex=\"0\"></div>');\n                this.options = options;\n                this.toolbar = toolbar;\n                this.mainButton = new ToolBarButton($.extend({}, options, { hidden: false }), toolbar);\n                this.arrowButton = $('<a class=\"' + BUTTON + ' ' + SPLIT_BUTTON_ARROW + '\"><span class=\"' + (options.mobile ? 'km-icon km-arrowdown' : 'k-icon k-i-arrow-60-down') + '\"></span></a>');\n                this.popupElement = $('<ul class=\"' + LIST_CONTAINER + '\"></ul>');\n                this.mainButton.element.removeAttr('href tabindex').appendTo(element);\n                this.arrowButton.appendTo(element);\n                this.popupElement.appendTo(element);\n                if (options.align) {\n                    element.addClass('k-align-' + options.align);\n                }\n                if (!options.id) {\n                    options.id = options.uid;\n                }\n                element.attr('id', options.id + '_wrapper');\n                this.addOverflowAttr();\n                this.addUidAttr();\n                this.createMenuButtons();\n                this.createPopup();\n                this._navigatable();\n                this.mainButton.main = true;\n                this.enable(options.enable);\n                if (options.hidden) {\n                    this.hide();\n                }\n                element.data({\n                    type: 'splitButton',\n                    splitButton: this,\n                    kendoPopup: this.popup\n                });\n            },\n            _navigatable: function () {\n                var that = this;\n                that.popupElement.on('keydown', '.' + BUTTON, function (e) {\n                    var li = $(e.target).parent();\n                    e.preventDefault();\n                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || e.altKey && e.keyCode === keys.UP) {\n                        that.toggle();\n                        that.focus();\n                    } else if (e.keyCode === keys.DOWN) {\n                        findFocusableSibling(li, 'next').focus();\n                    } else if (e.keyCode === keys.UP) {\n                        findFocusableSibling(li, 'prev').focus();\n                    } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {\n                        that.toolbar.userEvents.trigger('tap', { target: $(e.target) });\n                    } else if (e.keyCode === keys.HOME) {\n                        li.parent().find(':kendoFocusable').first().focus();\n                    } else if (e.keyCode === keys.END) {\n                        li.parent().find(':kendoFocusable').last().focus();\n                    }\n                });\n            },\n            createMenuButtons: function () {\n                var options = this.options;\n                var items = options.menuButtons;\n                var item;\n                for (var i = 0; i < items.length; i++) {\n                    item = new ToolBarButton($.extend({\n                        mobile: options.mobile,\n                        type: 'button',\n                        click: options.click\n                    }, items[i]), this.toolbar);\n                    item.element.wrap('<li></li>').parent().appendTo(this.popupElement);\n                }\n            },\n            createPopup: function () {\n                var that = this;\n                var options = this.options;\n                var element = this.element;\n                this.popupElement.attr('id', options.id + OPTION_LIST_SUFFIX).attr(KENDO_UID_ATTR, options.rootUid);\n                if (options.mobile) {\n                    this.popupElement = actionSheetWrap(this.popupElement);\n                }\n                this.popup = this.popupElement.kendoPopup({\n                    appendTo: options.mobile ? $(options.mobile).children('.km-pane') : null,\n                    anchor: element,\n                    isRtl: this.toolbar._isRtl,\n                    copyAnchorStyles: false,\n                    animation: options.animation,\n                    open: function (e) {\n                        var isDefaultPrevented = that.toolbar.trigger(OPEN, { target: element });\n                        if (isDefaultPrevented) {\n                            e.preventDefault();\n                            return;\n                        }\n                        that.adjustPopupWidth(e.sender);\n                    },\n                    activate: function () {\n                        this.element.find(':kendoFocusable').first().focus();\n                    },\n                    close: function (e) {\n                        var isDefaultPrevented = that.toolbar.trigger(CLOSE, { target: element });\n                        if (isDefaultPrevented) {\n                            e.preventDefault();\n                        }\n                        element.focus();\n                    }\n                }).data('kendoPopup');\n                this.popup.element.on(CLICK, 'a.k-button', preventClick);\n            },\n            adjustPopupWidth: function (popup) {\n                var anchor = popup.options.anchor, computedWidth = outerWidth(anchor), width;\n                kendo.wrap(popup.element).addClass('k-split-wrapper');\n                if (popup.element.css('box-sizing') !== 'border-box') {\n                    width = computedWidth - (outerWidth(popup.element) - popup.element.width());\n                } else {\n                    width = computedWidth;\n                }\n                popup.element.css({\n                    fontFamily: anchor.css('font-family'),\n                    'min-width': width\n                });\n            },\n            remove: function () {\n                this.popup.element.off(CLICK, 'a.k-button');\n                this.popup.destroy();\n                this.element.remove();\n            },\n            toggle: function () {\n                if (this.options.enable || this.popup.visible()) {\n                    this.popup.toggle();\n                }\n            },\n            enable: function (isEnabled) {\n                if (isEnabled === undefined) {\n                    isEnabled = true;\n                }\n                this.mainButton.enable(isEnabled);\n                this.element.toggleClass(STATE_DISABLED, !isEnabled);\n                this.options.enable = isEnabled;\n            },\n            focus: function () {\n                this.element.focus();\n            },\n            hide: function () {\n                if (this.popup) {\n                    this.popup.close();\n                }\n                this.element.addClass(STATE_HIDDEN).hide();\n                this.options.hidden = true;\n            },\n            show: function () {\n                this.element.removeClass(STATE_HIDDEN).hide();\n                this.options.hidden = false;\n            }\n        });\n        kendo.toolbar.ToolBarSplitButton = ToolBarSplitButton;\n        var OverflowSplitButton = Item.extend({\n            init: function (options, toolbar) {\n                var element = this.element = $('<li class=\"' + SPLIT_BUTTON + '\"></li>'), items = options.menuButtons, item, splitContainerId;\n                this.options = options;\n                this.toolbar = toolbar;\n                this.overflow = true;\n                splitContainerId = (options.id || options.uid) + OPTION_LIST_SUFFIX;\n                this.mainButton = new OverflowButton($.extend({}, options));\n                this.mainButton.element.appendTo(element);\n                for (var i = 0; i < items.length; i++) {\n                    item = new OverflowButton($.extend({\n                        mobile: options.mobile,\n                        type: 'button',\n                        splitContainerId: splitContainerId\n                    }, items[i]), this.toolbar);\n                    item.element.appendTo(element);\n                }\n                this.addUidAttr();\n                this.addOverflowAttr();\n                this.mainButton.main = true;\n                element.data({\n                    type: 'splitButton',\n                    splitButton: this\n                });\n            },\n            overflowHidden: function () {\n                this.element.addClass(OVERFLOW_HIDDEN);\n            }\n        });\n        kendo.toolbar.OverflowSplitButton = OverflowSplitButton;\n        kendo.toolbar.registerComponent('splitButton', ToolBarSplitButton, OverflowSplitButton);\n        var ToolBarSeparator = Item.extend({\n            init: function (options, toolbar) {\n                var element = this.element = $('<div>&nbsp;</div>');\n                this.element = element;\n                this.options = options;\n                this.toolbar = toolbar;\n                this.attributes();\n                this.addIdAttr();\n                this.addUidAttr();\n                this.addOverflowAttr();\n                element.addClass(SEPARATOR);\n                element.data({\n                    type: 'separator',\n                    separator: this\n                });\n            }\n        });\n        var OverflowSeparator = Item.extend({\n            init: function (options, toolbar) {\n                var element = this.element = $('<li>&nbsp;</li>');\n                this.element = element;\n                this.options = options;\n                this.toolbar = toolbar;\n                this.overflow = true;\n                this.attributes();\n                this.addUidAttr();\n                this.addOverflowIdAttr();\n                element.addClass(SEPARATOR);\n                element.data({\n                    type: 'separator',\n                    separator: this\n                });\n            },\n            overflowHidden: function () {\n                this.element.addClass(OVERFLOW_HIDDEN);\n            }\n        });\n        kendo.toolbar.registerComponent('separator', ToolBarSeparator, OverflowSeparator);\n        var TemplateItem = Item.extend({\n            init: function (template, options, toolbar) {\n                var element = isFunction(template) ? template(options) : template;\n                if (!(element instanceof jQuery)) {\n                    element = $('<div></div>').html(element);\n                } else {\n                    element = element.wrap('<div></div>').parent();\n                }\n                this.element = element;\n                this.options = options;\n                this.options.type = 'template';\n                this.toolbar = toolbar;\n                this.attributes();\n                this.addUidAttr();\n                this.addIdAttr();\n                this.addOverflowAttr();\n                element.data({\n                    type: 'template',\n                    template: this\n                });\n            }\n        });\n        kendo.toolbar.TemplateItem = TemplateItem;\n        var OverflowTemplateItem = Item.extend({\n            init: function (template, options, toolbar) {\n                var element = isFunction(template) ? $(template(options)) : $(template);\n                if (!(element instanceof jQuery)) {\n                    element = $('<li></li>').html(element);\n                } else {\n                    element = element.wrap('<li></li>').parent();\n                }\n                this.element = element;\n                this.options = options;\n                this.options.type = 'template';\n                this.toolbar = toolbar;\n                this.overflow = true;\n                this.attributes();\n                this.addUidAttr();\n                this.addOverflowIdAttr();\n                this.addOverflowAttr();\n                element.data({\n                    type: 'template',\n                    template: this\n                });\n            },\n            overflowHidden: function () {\n                this.element.addClass(OVERFLOW_HIDDEN);\n            }\n        });\n        kendo.toolbar.OverflowTemplateItem = OverflowTemplateItem;\n        function toggleActive(e) {\n            if (!e.target.is('.k-toggle-button')) {\n                e.target.toggleClass(STATE_ACTIVE, e.type == 'press');\n            }\n        }\n        function actionSheetWrap(element) {\n            element = $(element);\n            return element.hasClass('km-actionsheet') ? element.closest('.km-popup-wrapper') : element.addClass('km-widget km-actionsheet').wrap('<div class=\"km-actionsheet-wrapper km-actionsheet-tablet km-widget km-popup\"></div>').parent().wrap('<div class=\"km-popup-wrapper k-popup\"></div>').parent();\n        }\n        function preventClick(e) {\n            if ($(e.target).closest('a.k-button').length) {\n                e.preventDefault();\n            }\n        }\n        function findFocusableSibling(element, dir) {\n            var getSibling = dir === 'next' ? $.fn.next : $.fn.prev;\n            var getter = dir === 'next' ? $.fn.first : $.fn.last;\n            var candidate = getSibling.call(element);\n            if (candidate.is(':kendoFocusable') || !candidate.length) {\n                return candidate;\n            }\n            if (candidate.find(':kendoFocusable').length) {\n                return getter.call(candidate.find(':kendoFocusable'));\n            }\n            return findFocusableSibling(candidate, dir);\n        }\n        var Group = Class.extend({\n            init: function (name) {\n                this.name = name;\n                this.buttons = [];\n            },\n            add: function (button) {\n                this.buttons[this.buttons.length] = button;\n            },\n            remove: function (button) {\n                var index = $.inArray(button, this.buttons);\n                this.buttons.splice(index, 1);\n            },\n            select: function (button) {\n                var tmp;\n                for (var i = 0; i < this.buttons.length; i++) {\n                    tmp = this.buttons[i];\n                    tmp.select(false);\n                }\n                button.select(true);\n                if (button.twin()) {\n                    button.twin().select(true);\n                }\n            }\n        });\n        var ToolBar = Widget.extend({\n            init: function (element, options) {\n                var that = this;\n                Widget.fn.init.call(that, element, options);\n                options = that.options;\n                element = that.wrapper = that.element;\n                element.addClass(TOOLBAR + ' k-widget');\n                this.uid = kendo.guid();\n                this._isRtl = kendo.support.isRtl(element);\n                this._groups = {};\n                element.attr(KENDO_UID_ATTR, this.uid);\n                that.isMobile = typeof options.mobile === 'boolean' ? options.mobile : that.element.closest('.km-root')[0];\n                that.animation = that.isMobile ? { open: { effects: 'fade' } } : {};\n                if (that.isMobile) {\n                    element.addClass('km-widget');\n                    ICON = 'km-icon';\n                    ICON_PREFIX = 'km-';\n                    BUTTON = 'km-button';\n                    BUTTON_GROUP = 'km-buttongroup km-widget';\n                    STATE_ACTIVE = 'km-state-active';\n                    STATE_DISABLED = 'km-state-disabled';\n                }\n                if (options.resizable) {\n                    that._renderOverflow();\n                    element.addClass(RESIZABLE_TOOLBAR);\n                    that.overflowUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: 5,\n                        allowSelection: true,\n                        filter: '.' + OVERFLOW_ANCHOR,\n                        tap: proxy(that._toggleOverflow, that)\n                    });\n                    that._resizeHandler = kendo.onResize(function () {\n                        that.resize();\n                    });\n                } else {\n                    that.popup = { element: $([]) };\n                }\n                if (options.items && options.items.length) {\n                    for (var i = 0; i < options.items.length; i++) {\n                        that.add(options.items[i]);\n                    }\n                    if (options.resizable) {\n                        that._shrink(that.element.innerWidth());\n                    }\n                }\n                that.userEvents = new kendo.UserEvents(document, {\n                    threshold: 5,\n                    allowSelection: true,\n                    filter: '[' + KENDO_UID_ATTR + '=' + this.uid + '] a.' + BUTTON + ', ' + '[' + KENDO_UID_ATTR + '=' + this.uid + '] .' + OVERFLOW_BUTTON,\n                    tap: proxy(that._buttonClick, that),\n                    press: toggleActive,\n                    release: toggleActive\n                });\n                that.element.on(CLICK, 'a.k-button', preventClick);\n                that._navigatable();\n                if (options.resizable) {\n                    that.popup.element.on(CLICK, +'a.k-button', preventClick);\n                }\n                if (options.resizable) {\n                    this._toggleOverflowAnchor();\n                }\n                kendo.notify(that);\n            },\n            events: [\n                CLICK,\n                TOGGLE,\n                OPEN,\n                CLOSE,\n                OVERFLOW_OPEN,\n                OVERFLOW_CLOSE\n            ],\n            options: {\n                name: 'ToolBar',\n                items: [],\n                resizable: true,\n                mobile: null\n            },\n            addToGroup: function (button, groupName) {\n                var group;\n                if (!this._groups[groupName]) {\n                    group = this._groups[groupName] = new Group();\n                } else {\n                    group = this._groups[groupName];\n                }\n                group.add(button);\n                return group;\n            },\n            destroy: function () {\n                var that = this;\n                that.element.find('.' + SPLIT_BUTTON).each(function (idx, element) {\n                    $(element).data('kendoPopup').destroy();\n                });\n                that.element.off(CLICK, 'a.k-button');\n                that.userEvents.destroy();\n                if (that.options.resizable) {\n                    kendo.unbindResize(that._resizeHandler);\n                    that.overflowUserEvents.destroy();\n                    that.popup.element.off(CLICK, 'a.k-button');\n                    that.popup.destroy();\n                }\n                Widget.fn.destroy.call(that);\n            },\n            add: function (options) {\n                var component = components[options.type], template = options.template, tool, that = this, itemClasses = that.isMobile ? '' : 'k-item k-state-default', overflowTemplate = options.overflowTemplate, overflowTool;\n                $.extend(options, {\n                    uid: kendo.guid(),\n                    animation: that.animation,\n                    mobile: that.isMobile,\n                    rootUid: that.uid\n                });\n                if (options.menuButtons) {\n                    for (var i = 0; i < options.menuButtons.length; i++) {\n                        $.extend(options.menuButtons[i], { uid: kendo.guid() });\n                    }\n                }\n                if (template && !overflowTemplate) {\n                    options.overflow = OVERFLOW_NEVER;\n                } else if (!options.overflow) {\n                    options.overflow = OVERFLOW_AUTO;\n                }\n                if (options.overflow !== OVERFLOW_NEVER && that.options.resizable) {\n                    if (overflowTemplate) {\n                        overflowTool = new OverflowTemplateItem(overflowTemplate, options, that);\n                    } else if (component) {\n                        overflowTool = new component.overflow(options, that);\n                        overflowTool.element.addClass(itemClasses);\n                    }\n                    if (overflowTool) {\n                        if (options.overflow === OVERFLOW_AUTO) {\n                            overflowTool.overflowHidden();\n                        }\n                        overflowTool.element.appendTo(that.popup.container);\n                        that.angular('compile', function () {\n                            return { elements: overflowTool.element.get() };\n                        });\n                    }\n                }\n                if (options.overflow !== OVERFLOW_ALWAYS) {\n                    if (template) {\n                        tool = new TemplateItem(template, options, that);\n                    } else if (component) {\n                        tool = new component.toolbar(options, that);\n                    }\n                    if (tool) {\n                        tool.element.appendTo(that.element);\n                        that.angular('compile', function () {\n                            return { elements: tool.element.get() };\n                        });\n                    }\n                }\n            },\n            _getItem: function (candidate) {\n                var element, toolbarItem, overflowItem, isResizable = this.options.resizable, type;\n                element = this.element.find(candidate);\n                if (!element.length) {\n                    element = $('.k-split-container[data-uid=' + this.uid + ']').find(candidate);\n                }\n                type = element.length ? element.data('type') : '';\n                toolbarItem = element.data(type);\n                if (toolbarItem) {\n                    if (toolbarItem.main) {\n                        element = element.parent('.' + SPLIT_BUTTON);\n                        type = 'splitButton';\n                        toolbarItem = element.data(type);\n                    }\n                    if (isResizable) {\n                        overflowItem = toolbarItem.twin();\n                    }\n                } else if (isResizable) {\n                    element = this.popup.element.find(candidate);\n                    type = element.length ? element.data('type') : '';\n                    overflowItem = element.data(type);\n                    if (overflowItem && overflowItem.main) {\n                        element = element.parent('.' + SPLIT_BUTTON);\n                        type = 'splitButton';\n                        overflowItem = element.data(type);\n                    }\n                }\n                return {\n                    type: type,\n                    toolbar: toolbarItem,\n                    overflow: overflowItem\n                };\n            },\n            remove: function (candidate) {\n                var item = this._getItem(candidate);\n                if (item.toolbar) {\n                    item.toolbar.remove();\n                }\n                if (item.overflow) {\n                    item.overflow.remove();\n                }\n                this.resize(true);\n            },\n            hide: function (candidate) {\n                var item = this._getItem(candidate);\n                if (item.toolbar) {\n                    if (item.toolbar.options.type === 'button' && item.toolbar.options.isChild) {\n                        item.toolbar.hide();\n                        item.toolbar.getParentGroup().refresh();\n                    } else if (!item.toolbar.options.hidden) {\n                        item.toolbar.hide();\n                    }\n                }\n                if (item.overflow) {\n                    if (item.overflow.options.type === 'button' && item.overflow.options.isChild) {\n                        item.overflow.hide();\n                        item.overflow.getParentGroup().refresh();\n                    } else if (!item.overflow.options.hidden) {\n                        item.overflow.hide();\n                    }\n                }\n                this.resize(true);\n            },\n            show: function (candidate) {\n                var item = this._getItem(candidate);\n                if (item.toolbar) {\n                    if (item.toolbar.options.type === 'button' && item.toolbar.options.isChild) {\n                        item.toolbar.show();\n                        item.toolbar.getParentGroup().refresh();\n                    } else if (item.toolbar.options.hidden) {\n                        item.toolbar.show();\n                    }\n                }\n                if (item.overflow) {\n                    if (item.overflow.options.type === 'button' && item.overflow.options.isChild) {\n                        item.toolbar.show();\n                        item.overflow.getParentGroup().refresh();\n                    } else if (item.overflow.options.hidden) {\n                        item.overflow.show();\n                    }\n                }\n                this.resize(true);\n            },\n            enable: function (element, enable) {\n                var item = this._getItem(element);\n                if (typeof enable == 'undefined') {\n                    enable = true;\n                }\n                if (item.toolbar) {\n                    item.toolbar.enable(enable);\n                }\n                if (item.overflow) {\n                    item.overflow.enable(enable);\n                }\n            },\n            getSelectedFromGroup: function (groupName) {\n                return this.element.find('.' + TOGGLE_BUTTON + '[data-group=\\'' + groupName + '\\']').filter('.' + STATE_ACTIVE);\n            },\n            toggle: function (button, checked) {\n                var element = $(button), item = element.data('button');\n                if (item.options.togglable) {\n                    if (checked === undefined) {\n                        checked = true;\n                    }\n                    item.toggle(checked, true);\n                }\n            },\n            _renderOverflow: function () {\n                var that = this, overflowContainer = components.overflowContainer, isRtl = that._isRtl, horizontalDirection = isRtl ? 'left' : 'right';\n                that.overflowAnchor = $(components.overflowAnchor).addClass(BUTTON);\n                that.element.append(that.overflowAnchor);\n                if (that.isMobile) {\n                    that.overflowAnchor.append('<span class=\"km-icon km-more\"></span>');\n                    overflowContainer = actionSheetWrap(overflowContainer);\n                } else {\n                    that.overflowAnchor.append('<span class=\"k-icon k-i-more-vertical\"></span>');\n                }\n                that.popup = new kendo.ui.Popup(overflowContainer, {\n                    origin: 'bottom ' + horizontalDirection,\n                    position: 'top ' + horizontalDirection,\n                    anchor: that.overflowAnchor,\n                    isRtl: isRtl,\n                    animation: that.animation,\n                    appendTo: that.isMobile ? $(that.isMobile).children('.km-pane') : null,\n                    copyAnchorStyles: false,\n                    open: function (e) {\n                        var wrapper = kendo.wrap(that.popup.element).addClass('k-overflow-wrapper');\n                        if (!that.isMobile) {\n                            wrapper.css('margin-left', (isRtl ? -1 : 1) * ((outerWidth(wrapper) - wrapper.width()) / 2 + 1));\n                        } else {\n                            that.popup.container.css('max-height', parseFloat($('.km-content:visible').innerHeight()) - 15 + 'px');\n                        }\n                        if (that.trigger(OVERFLOW_OPEN)) {\n                            e.preventDefault();\n                        }\n                    },\n                    activate: function () {\n                        this.element.find(':kendoFocusable').first().focus();\n                    },\n                    close: function (e) {\n                        if (that.trigger(OVERFLOW_CLOSE)) {\n                            e.preventDefault();\n                        }\n                        this.element.focus();\n                    }\n                });\n                that.popup.element.on('keydown', '.' + BUTTON, function (e) {\n                    var target = $(e.target), li = target.parent(), isComplexTool = li.is('.' + BUTTON_GROUP) || li.is('.' + SPLIT_BUTTON), element;\n                    e.preventDefault();\n                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || e.altKey && e.keyCode === keys.UP) {\n                        that._toggleOverflow();\n                        that.overflowAnchor.focus();\n                    } else if (e.keyCode === keys.DOWN) {\n                        element = !isComplexTool || isComplexTool && target.is(':last-child') ? li : target;\n                        findFocusableSibling(element, 'next').focus();\n                    } else if (e.keyCode === keys.UP) {\n                        element = !isComplexTool || isComplexTool && target.is(':first-child') ? li : target;\n                        findFocusableSibling(element, 'prev').focus();\n                    } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {\n                        that.userEvents.trigger('tap', { target: $(e.target) });\n                        that.overflowAnchor.focus();\n                    } else if (e.keyCode === keys.HOME) {\n                        li.parent().find(':kendoFocusable').first().focus();\n                    } else if (e.keyCode === keys.END) {\n                        li.parent().find(':kendoFocusable').last().focus();\n                    }\n                });\n                if (that.isMobile) {\n                    that.popup.container = that.popup.element.find('.' + OVERFLOW_CONTAINER);\n                } else {\n                    that.popup.container = that.popup.element;\n                }\n                that.popup.container.attr(KENDO_UID_ATTR, this.uid);\n            },\n            _toggleOverflowAnchor: function () {\n                var hasVisibleChildren = false;\n                if (this.options.mobile) {\n                    hasVisibleChildren = this.popup.element.find('.' + OVERFLOW_CONTAINER).children(':not(.' + OVERFLOW_HIDDEN + ', .' + POPUP + ')').length > 0;\n                } else {\n                    hasVisibleChildren = this.popup.element.children(':not(.' + OVERFLOW_HIDDEN + ', .' + POPUP + ')').length > 0;\n                }\n                if (hasVisibleChildren) {\n                    this.overflowAnchor.css({\n                        visibility: 'visible',\n                        width: ''\n                    });\n                } else {\n                    this.overflowAnchor.css({\n                        visibility: 'hidden',\n                        width: '1px'\n                    });\n                }\n            },\n            _buttonClick: function (e) {\n                var that = this, popup, target, item, splitContainer, isSplitButtonArrow = e.target.closest('.' + SPLIT_BUTTON_ARROW).length, handler, eventData, urlTarget;\n                e.preventDefault();\n                if (isSplitButtonArrow) {\n                    that._toggle(e);\n                    return;\n                }\n                target = $(e.target).closest('.' + BUTTON, that.element);\n                if (target.hasClass(OVERFLOW_ANCHOR)) {\n                    return;\n                }\n                item = target.data('button');\n                if (!item && that.popup) {\n                    target = $(e.target).closest('.' + OVERFLOW_BUTTON, that.popup.container);\n                    item = target.parent('li').data('button');\n                }\n                if (!item || !item.options.enable) {\n                    return;\n                }\n                if (item.options.togglable) {\n                    handler = isFunction(item.toggleHandler) ? item.toggleHandler : null;\n                    item.toggle(!item.options.selected, true);\n                    eventData = {\n                        target: target,\n                        group: item.options.group,\n                        checked: item.options.selected,\n                        id: item.options.id\n                    };\n                    if (handler) {\n                        handler.call(that, eventData);\n                    }\n                    that.trigger(TOGGLE, eventData);\n                } else {\n                    handler = isFunction(item.clickHandler) ? item.clickHandler : null;\n                    eventData = {\n                        sender: that,\n                        target: target,\n                        id: item.options.id\n                    };\n                    if (handler) {\n                        handler.call(that, eventData);\n                    }\n                    that.trigger(CLICK, eventData);\n                }\n                if (item.options.url) {\n                    if (item.options.attributes && item.options.attributes.target) {\n                        urlTarget = item.options.attributes.target;\n                    }\n                    window.open(item.options.url, urlTarget || '_self');\n                }\n                if (target.hasClass(OVERFLOW_BUTTON)) {\n                    that.popup.close();\n                }\n                splitContainer = target.closest('.k-split-container');\n                if (splitContainer[0]) {\n                    popup = splitContainer.data('kendoPopup');\n                    (popup ? popup : splitContainer.parents('.km-popup-wrapper').data('kendoPopup')).close();\n                }\n            },\n            _navigatable: function () {\n                var that = this;\n                that.element.attr('tabindex', 0).on('focusin', function (ev) {\n                    var target = $(ev.target);\n                    var element = $(this).find(':kendoFocusable:first');\n                    if (!target.is('.' + TOOLBAR) || element.length === 0) {\n                        return;\n                    }\n                    if (element.is('.' + OVERFLOW_ANCHOR)) {\n                        element = findFocusableSibling(element, 'next');\n                    }\n                    element[0].focus();\n                }).on('keydown', proxy(that._keydown, that));\n            },\n            _keydown: function (e) {\n                var target = $(e.target), keyCode = e.keyCode, items = this.element.children(':not(.k-separator):visible'), direction = this._isRtl ? -1 : 1;\n                if (keyCode === keys.TAB) {\n                    var element = target.parentsUntil(this.element).last(), lastHasFocus = false, firstHasFocus = false;\n                    if (!element.length) {\n                        element = target;\n                    }\n                    if (element.is('.' + OVERFLOW_ANCHOR)) {\n                        if (e.shiftKey) {\n                            e.preventDefault();\n                        }\n                        if (items.last().is(':kendoFocusable')) {\n                            items.last().focus();\n                        } else {\n                            items.last().find(':kendoFocusable').last().focus();\n                        }\n                    }\n                    if (!e.shiftKey && items.index(element) === items.length - 1) {\n                        if (element.is('.' + BUTTON_GROUP)) {\n                            lastHasFocus = target.is(':last-child');\n                        } else {\n                            lastHasFocus = true;\n                        }\n                    }\n                    var isFirstTool = items.index(element) === items.not('.k-overflow-anchor').first().index();\n                    if (e.shiftKey && isFirstTool) {\n                        if (element.is('.' + BUTTON_GROUP)) {\n                            firstHasFocus = target.is(':first-child');\n                        } else {\n                            firstHasFocus = true;\n                        }\n                    }\n                    if (lastHasFocus && this.overflowAnchor && this.overflowAnchor.css('visibility') !== 'hidden') {\n                        e.preventDefault();\n                        this.overflowAnchor.focus();\n                    }\n                    if (firstHasFocus) {\n                        e.preventDefault();\n                        var prevFocusable = this._getPrevFocusable(this.wrapper);\n                        if (prevFocusable) {\n                            prevFocusable.focus();\n                        }\n                    }\n                    this._preventNextFocus = false;\n                }\n                if (e.altKey && keyCode === keys.DOWN) {\n                    var splitButton = $(document.activeElement).data('splitButton');\n                    var isOverflowAnchor = $(document.activeElement).is('.' + OVERFLOW_ANCHOR);\n                    if (splitButton) {\n                        splitButton.toggle();\n                    } else if (isOverflowAnchor) {\n                        this._toggleOverflow();\n                    }\n                    return;\n                }\n                if ((keyCode === keys.SPACEBAR || keyCode === keys.ENTER) && !target.is('input, checkbox')) {\n                    if (keyCode === keys.SPACEBAR) {\n                        e.preventDefault();\n                    }\n                    if (target.is('.' + SPLIT_BUTTON)) {\n                        target = target.children().first();\n                        this.userEvents.trigger('tap', { target: target });\n                    } else if (keyCode === keys.SPACEBAR) {\n                        this.userEvents.trigger('tap', { target: target });\n                    }\n                    return;\n                }\n                if (keyCode === keys.HOME) {\n                    if (target.is('.k-dropdown') || target.is('input')) {\n                        return;\n                    }\n                    if (this.overflowAnchor) {\n                        items.eq(1).focus();\n                    } else {\n                        items.first().focus();\n                    }\n                    e.preventDefault();\n                } else if (keyCode === keys.END) {\n                    if (target.is('.k-dropdown') || target.is('input')) {\n                        return;\n                    }\n                    if (this.overflowAnchor && $(this.overflowAnchor).css('visibility') != 'hidden') {\n                        this.overflowAnchor.focus();\n                    } else {\n                        items.last().focus();\n                    }\n                    e.preventDefault();\n                } else if (keyCode === keys.RIGHT && !this._preventNextFocus && !target.is('input, select, .k-dropdown, .k-colorpicker') && this._getNextElement(e.target, 1 * direction)) {\n                    this._getNextElement(e.target, 1 * direction).focus();\n                    e.preventDefault();\n                } else if (keyCode === keys.LEFT && !this._preventNextFocus && !target.is('input, select, .k-dropdown, .k-colorpicker') && this._getNextElement(e.target, -1 * direction)) {\n                    this._getNextElement(e.target, -1 * direction).focus();\n                    e.preventDefault();\n                }\n            },\n            _getNextElement: function (item, direction) {\n                var items = this.element.children(':not(.k-separator):visible');\n                var itemIndex = items.index(item) === -1 ? items.index(item.parentElement) : items.index(item);\n                var startIndex = this.overflowAnchor ? 1 : 0;\n                var directionNumber = direction;\n                var searchIndex = direction === 1 ? items.length - 1 : startIndex;\n                var index = direction === 1 ? startIndex : items.length - 1;\n                var focusableItem = items[itemIndex + direction];\n                this._preventNextFocus = false;\n                if ($(item).closest('.' + BUTTON_GROUP).length && !$(item).is(direction === 1 ? ':last-child' : ':first-child')) {\n                    return $(item).closest('.' + BUTTON_GROUP).children()[$(item).closest('.' + BUTTON_GROUP).children().index(item) + direction];\n                }\n                if (this.overflowAnchor && item === this.overflowAnchor[0] && direction === -1) {\n                    focusableItem = items[items.length - 1];\n                }\n                if (itemIndex === searchIndex) {\n                    focusableItem = !this.overflowAnchor || this.overflowAnchor && $(this.overflowAnchor).css('visibility') === 'hidden' ? items[index] : this.overflowAnchor;\n                }\n                while (!$(focusableItem).is(':kendoFocusable')) {\n                    if (direction === -1 && $(focusableItem).closest('.' + BUTTON_GROUP).length) {\n                        focusableItem = $(focusableItem).children(':not(label, div)').last();\n                    } else {\n                        focusableItem = $(focusableItem).children(':not(label, div)').first();\n                    }\n                    if (!focusableItem.length) {\n                        directionNumber = directionNumber + direction;\n                        focusableItem = items[itemIndex + directionNumber];\n                        if (!focusableItem) {\n                            return this.overflowAnchor;\n                        }\n                    }\n                    this._preventNextFocus = $(focusableItem).closest('.' + BUTTON_GROUP).length ? false : true;\n                }\n                return focusableItem;\n            },\n            _getPrevFocusable: function (element) {\n                if (element.is('html')) {\n                    return element;\n                }\n                var elementToFocus, prevElement, prevElements = element.prevAll();\n                prevElements.each(function () {\n                    prevElement = $(this);\n                    if (prevElement.is(':kendoFocusable')) {\n                        elementToFocus = prevElement;\n                        return false;\n                    } else if (prevElement.find(':kendoFocusable').length > 0) {\n                        elementToFocus = prevElement.find(':kendoFocusable').last();\n                        return false;\n                    }\n                });\n                if (elementToFocus) {\n                    return elementToFocus;\n                } else {\n                    return this._getPrevFocusable(element.parent());\n                }\n            },\n            _toggle: function (e) {\n                var splitButton = $(e.target).closest('.' + SPLIT_BUTTON).data('splitButton');\n                e.preventDefault();\n                if (!splitButton.options.enable) {\n                    return;\n                }\n                splitButton.toggle();\n            },\n            _toggleOverflow: function () {\n                this.popup.toggle();\n            },\n            _resize: function (e) {\n                var containerWidth = e.width;\n                if (!this.options.resizable) {\n                    return;\n                }\n                this.popup.close();\n                this._shrink(containerWidth);\n                this._stretch(containerWidth);\n                this._markVisibles();\n                this._toggleOverflowAnchor();\n            },\n            _childrenWidth: function () {\n                var childrenWidth = 0;\n                this.element.children(':visible:not(\\'.' + STATE_HIDDEN + '\\')').each(function () {\n                    childrenWidth += outerWidth($(this), true);\n                });\n                return Math.ceil(childrenWidth);\n            },\n            _shrink: function (containerWidth) {\n                var commandElement, visibleCommands;\n                if (containerWidth < this._childrenWidth()) {\n                    visibleCommands = this.element.children(':visible:not([data-overflow=\\'never\\'], .' + OVERFLOW_ANCHOR + ')');\n                    for (var i = visibleCommands.length - 1; i >= 0; i--) {\n                        commandElement = visibleCommands.eq(i);\n                        if (containerWidth > this._childrenWidth()) {\n                            break;\n                        } else {\n                            this._hideItem(commandElement);\n                        }\n                    }\n                }\n            },\n            _stretch: function (containerWidth) {\n                var commandElement, hiddenCommands;\n                if (containerWidth > this._childrenWidth()) {\n                    hiddenCommands = this.element.children(':hidden:not(\\'.' + STATE_HIDDEN + '\\')');\n                    for (var i = 0; i < hiddenCommands.length; i++) {\n                        commandElement = hiddenCommands.eq(i);\n                        if (containerWidth < this._childrenWidth() || !this._showItem(commandElement, containerWidth)) {\n                            break;\n                        }\n                    }\n                }\n            },\n            _hideItem: function (item) {\n                item.hide();\n                if (this.popup) {\n                    this.popup.container.find('>li[data-uid=\\'' + item.data('uid') + '\\']').removeClass(OVERFLOW_HIDDEN);\n                }\n            },\n            _showItem: function (item, containerWidth) {\n                if (item.length && containerWidth > this._childrenWidth() + outerWidth(item, true)) {\n                    item.show();\n                    if (this.popup) {\n                        this.popup.container.find('>li[data-uid=\\'' + item.data('uid') + '\\']').addClass(OVERFLOW_HIDDEN);\n                    }\n                    return true;\n                }\n                return false;\n            },\n            _markVisibles: function () {\n                var overflowItems = this.popup.container.children(), toolbarItems = this.element.children(':not(.k-overflow-anchor)'), visibleOverflowItems = overflowItems.filter(':not(.k-overflow-hidden)'), visibleToolbarItems = toolbarItems.filter(':visible');\n                overflowItems.add(toolbarItems).removeClass(FIRST_TOOLBAR_VISIBLE + ' ' + LAST_TOOLBAR_VISIBLE);\n                visibleOverflowItems.first().add(visibleToolbarItems.first()).addClass(FIRST_TOOLBAR_VISIBLE);\n                visibleOverflowItems.last().add(visibleToolbarItems.last()).addClass(LAST_TOOLBAR_VISIBLE);\n            }\n        });\n        kendo.ui.plugin(ToolBar);\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('kendo.mediaplayer', [\n        'kendo.slider',\n        'kendo.toolbar',\n        'kendo.dropdownlist',\n        'kendo.tooltip'\n    ], f);\n}(function () {\n    var __meta__ = {\n        id: 'mediaplayer',\n        name: 'MediaPlayer',\n        category: 'web',\n        description: '',\n        depends: [\n            'slider',\n            'toolbar',\n            'dropdownlist',\n            'tooltip'\n        ]\n    };\n    (function ($, undefined) {\n        var kendo = window.kendo, END = 'end', PAUSE = 'pause', PLAY = 'play', READY = 'ready', TIMECHANGE = 'timeChange', VOLUMECHANGE = 'volumeChange', FULLSCREEN_ENTER = 'k-i-full-screen', FULLSCREEN_EXIT = 'k-i-full-screen-exit', MUTE = 'k-i-volume-off', LOW_VOLUME = 'k-i-volume-down', HIGH_VOLUME = 'k-i-volume-up', VIDEO_QUALITY = 'k-mediaplayer-quality', STATE_PLAY = 'k-i-play', STATE_PAUSE = 'k-i-pause', TITLEBAR = 'k-mediaplayer-titlebar', TITLE = 'k-title', TOOLBARWRAP = 'k-mediaplayer-toolbar-wrap', TOOLBAR = 'k-mediaplayer-toolbar', SLIDER = 'k-mediaplayer-seekbar', VOLUME_SLIDER = 'k-mediaplayer-volume', MEDIA = 'k-mediaplayer-media', OVERLAY = 'k-mediaplayer-overlay', YTPLAYER = 'k-mediaplayer-yt', DOT = '.', ui = kendo.ui, ns = '.kendoMediaPlayer', baseTime = new Date(1970, 0, 1), timeZoneSec = baseTime.getTimezoneOffset() * 60, Widget = kendo.ui.Widget, isArray = $.isArray, timeFormats = {\n                shortTime: 'mm:ss',\n                longTime: 'HH:mm:ss'\n            }, template = kendo.template, proxy = $.proxy, keys = kendo.keys, templates = {\n                htmlPlayer: '<video class=\\'' + MEDIA + '\\'> </video>',\n                titleBar: template('<div class=\\'' + TITLEBAR + '\\' role=\\'heading\\'><span class=\\'' + TITLE + '\\'>Video Title</span></div>'),\n                toolBar: '<div class=\\'' + TOOLBARWRAP + '\\'><div class=\\'' + TOOLBAR + '\\'></div></div>',\n                youtubePlayer: '<div class=\\'' + YTPLAYER + '\\'> </div>',\n                toolBarTime: '<span class=\\'k-mediaplayer-currenttime\\'>00:00:00</span> / <span class=\\'k-mediaplayer-duration\\'>00:00:00</span>',\n                slider: '<input class=\\'' + SLIDER + '\\' value=\\'0\\' title=\\'seekbar\\' />',\n                volumeSlider: '<input class=\\'' + VOLUME_SLIDER + '\\' title=\\'volume\\'/>',\n                qualityDropDown: '<input class=\\'' + VIDEO_QUALITY + '\\' title=\\'video quality\\' />',\n                toolTip: '#= kendo.toString(new Date(value), \\'HH:mm:ss\\') #'\n            };\n        var MediaPlayer = Widget.extend({\n            init: function (element, options) {\n                this.wrapper = $(element);\n                Widget.fn.init.call(this, element, options);\n                this.wrapper.addClass('k-mediaplayer k-widget');\n                options = this.options;\n                this._currentIndex = 0;\n                this._createTitlebar();\n                this._createToolbar();\n                this._createDropDown();\n                this._createSlider();\n                this._createVolumeSlider();\n                this._timers = {};\n                this._aria();\n                this._navigatable();\n                if (options.fullScreen) {\n                    this.fullScreen(true);\n                }\n                if (options.media) {\n                    this.media(this.options.media);\n                }\n                kendo.notify(this);\n            },\n            events: [\n                END,\n                PAUSE,\n                PLAY,\n                READY,\n                TIMECHANGE,\n                VOLUMECHANGE\n            ],\n            options: {\n                name: 'MediaPlayer',\n                autoPlay: false,\n                autoRepeat: false,\n                volume: 100,\n                fullScreen: false,\n                mute: false,\n                navigatable: false,\n                forwardSeek: true,\n                media: null,\n                messages: {\n                    'pause': 'Pause',\n                    'play': 'Play',\n                    'mute': 'Mute',\n                    'unmute': 'Unmute',\n                    'quality': 'Quality',\n                    'fullscreen': 'Full Screen'\n                }\n            },\n            _msToTime: function (ms) {\n                var time = new Date(baseTime.getTime());\n                time.setSeconds(ms);\n                return time;\n            },\n            _timeToSec: function (time) {\n                var curTime = new Date(time).getTime();\n                return curTime / 1000;\n            },\n            _createTitlebar: function () {\n                this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n                if (this._titleBar.length === 0) {\n                    this.wrapper.append(templates.titleBar);\n                    this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n                }\n            },\n            _createSlider: function () {\n                var sliderElement = this.wrapper.find(DOT + SLIDER);\n                if (!this._slider) {\n                    this._sliderDragChangeHandler = proxy(this._sliderDragChange, this);\n                    this._sliderDraggingHandler = proxy(this._sliderDragging, this);\n                    sliderElement = this.wrapper.find(DOT + SLIDER);\n                    this._slider = new ui.Slider(sliderElement[0], {\n                        smallStep: 1000,\n                        tickPlacement: 'none',\n                        showButtons: false,\n                        change: this._sliderDragChangeHandler,\n                        slide: this._sliderDraggingHandler,\n                        tooltip: { template: templates.toolTip },\n                        dragHandleTitle: ''\n                    });\n                }\n            },\n            _createVolumeSlider: function () {\n                var volumeSliderElement = this.wrapper.find(DOT + VOLUME_SLIDER);\n                if (!this._volumeSlider) {\n                    this._volumeDraggingHandler = proxy(this._volumeDragging, this);\n                    this._volumeChangeHandler = proxy(this._volumeChange, this);\n                    volumeSliderElement.width(87);\n                    this._volumeSlider = new ui.Slider(volumeSliderElement[0], {\n                        smallStep: 1,\n                        min: 0,\n                        max: 100,\n                        value: this.options.volume,\n                        slide: this._volumeDraggingHandler,\n                        change: this._volumeChangeHandler,\n                        tickPlacement: 'none',\n                        showButtons: false,\n                        tooltip: { enabled: false },\n                        dragHandleTitle: ''\n                    });\n                }\n            },\n            _resetTime: function () {\n                if (this._youTubeVideo) {\n                    this._ytmedia.seekTo(0, true);\n                } else {\n                    this._media.currentTime = 0;\n                }\n                this._mediaTimeUpdate();\n                $.grep(this._toolBar.options.items, function (e) {\n                    return !!e.template;\n                }).template = templates.toolBarTime;\n            },\n            _currentUrl: function () {\n                var media = this.media();\n                return isArray(media.source) ? media.source[this._currentIndex].url : media.source;\n            },\n            _isYouTubeUrl: function () {\n                return !!this._currentUrl().match('youtube.com/|youtu.be/');\n            },\n            _setPlayerUrl: function () {\n                var oldPlayer = this._youTubeVideo;\n                this.stop();\n                this._youTubeVideo = this._isYouTubeUrl();\n                if (oldPlayer !== this._youTubeVideo) {\n                    this.wrapper.find(DOT + YTPLAYER).toggle();\n                    this.wrapper.find(DOT + MEDIA).toggle();\n                }\n                var initialized = this._media || this._ytmedia;\n                this._initializePlayer();\n                if (initialized) {\n                    this.mute(this.mute());\n                    this.volume(this.volume());\n                }\n                if (!this._youTubeVideo) {\n                    this._videoOverlay.show();\n                    this.wrapper.find(DOT + MEDIA + ' > source').remove();\n                    this.wrapper.find(DOT + MEDIA).attr('src', this._currentUrl());\n                    if (this.options.autoPlay) {\n                        this.play();\n                    }\n                } else if (this._ytmedia) {\n                    if (this._videoOverlay) {\n                        this._videoOverlay.hide();\n                    }\n                    if (this.options.autoPlay) {\n                        this._ytmedia.loadVideoById(this._getMediaId());\n                        this._playStateToggle(true);\n                    } else {\n                        this._ytmedia.cueVideoById(this._getMediaId());\n                        this._playStateToggle(true);\n                    }\n                }\n            },\n            _createToolbar: function () {\n                var toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n                if (toolBarElement.length === 0) {\n                    this._toolbarClickHandler = proxy(this._toolbarClick, this);\n                    this.wrapper.append(templates.toolBar);\n                    toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n                    toolBarElement.width(this.wrapper.find(DOT + MEDIA).width());\n                    this._toolBar = new ui.ToolBar(toolBarElement, {\n                        click: this._toolbarClickHandler,\n                        resizable: false,\n                        items: [\n                            {\n                                type: 'button',\n                                attributes: { 'class': 'k-play-button' },\n                                icon: 'play'\n                            },\n                            {\n                                template: templates.toolBarTime,\n                                attributes: { 'class': 'k-mediaplayer-currenttime-wrap' }\n                            },\n                            {\n                                type: 'separator',\n                                attributes: { 'class': 'k-toolbar-spacer' }\n                            },\n                            {\n                                type: 'button',\n                                attributes: { 'class': 'k-volume-button' },\n                                icon: 'volume-up'\n                            },\n                            {\n                                template: templates.volumeSlider,\n                                attributes: { 'class': 'k-mediaplayer-volume-wrap' }\n                            },\n                            {\n                                template: templates.qualityDropDown,\n                                attributes: { 'class': 'k-mediaplayer-quality-wrap' }\n                            },\n                            {\n                                type: 'button',\n                                attributes: { 'class': 'k-fullscreen-button' },\n                                icon: 'full-screen'\n                            }\n                        ]\n                    });\n                    this._toolBar.wrapper.off('keydown');\n                    toolBarElement.before(templates.slider);\n                    this._volumeButton = toolBarElement.find('.k-volume-button');\n                    this._fullscreenButton = toolBarElement.find('.k-fullscreen-button');\n                    this._volumeButton.attr('title', this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n                    this._volumeButton.attr('aria-label', this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n                    this._fullscreenButton.attr('title', this.options.messages.fullscreen);\n                    this._fullscreenButton.attr('aria-label', this.options.messages.fullscreen);\n                    toolBarElement.width('auto');\n                    this._currentTimeElement = toolBarElement.find('.k-mediaplayer-currenttime');\n                    this._durationElement = toolBarElement.find('.k-mediaplayer-duration');\n                    this._playButton = toolBarElement.find('.k-play-button');\n                    this._playButtonSpan = this._playButton.find('.k-i-play');\n                    if (this.options.autoPlay) {\n                        this._playStateToggle(true);\n                    }\n                    $([\n                        this._volumeButton[0],\n                        toolBarElement.find('.k-mediaplayer-volume-wrap')[0],\n                        toolBarElement.find('.k-mediaplayer-quality-wrap')[0],\n                        this._fullscreenButton[0]\n                    ]).wrapAll('<div class=\\'k-align-right\\' />');\n                    toolBarElement.find('.k-button').addClass('k-bare');\n                }\n            },\n            _createDropDown: function () {\n                var dropDownElement = this.wrapper.find(DOT + VIDEO_QUALITY);\n                var media = this.media();\n                if (typeof dropDownElement.data('kendoDropDownList') === 'undefined') {\n                    this._dropDownSelectHandler = proxy(this._dropDownSelect, this);\n                    this._dropDown = new ui.DropDownList(dropDownElement, {\n                        dataTextField: 'quality',\n                        dataValueField: 'url',\n                        popup: {\n                            position: 'bottom',\n                            origin: 'top',\n                            appendTo: this.wrapper\n                        },\n                        animation: {\n                            open: {\n                                effects: 'slideIn:up',\n                                duration: 1\n                            }\n                        },\n                        select: this._dropDownSelectHandler\n                    });\n                    if (media && isArray(media.source)) {\n                        this._dropDown.setDataSource(media.source);\n                        this._dropDown.select(0);\n                    }\n                    this._dropDown.wrapper.addClass('k-button k-bare');\n                    this._dropDown.wrapper.attr('title', this.options.messages.quality).hide();\n                    this._dropDown.wrapper.find('span.k-i-arrow-60-down').removeClass('k-i-arrow-60-down').addClass('k-icon k-i-hd');\n                    this._dropDown.list.addClass('k-quality-list');\n                }\n            },\n            _dropDownSelect: function (e) {\n                if (this._currentIndex !== e.item.index()) {\n                    this._currentIndex = e.item.index();\n                    this._setPlayerUrl();\n                }\n            },\n            _toolbarClick: function (e) {\n                var target = $(e.target).children().first();\n                var isPaused = target.hasClass(STATE_PLAY);\n                if (!this.media()) {\n                    return;\n                }\n                if (target.hasClass(STATE_PLAY) || target.hasClass(STATE_PAUSE)) {\n                    if (isPaused) {\n                        this.play();\n                    } else {\n                        this.pause();\n                    }\n                }\n                if (target.hasClass(FULLSCREEN_ENTER) || target.hasClass(FULLSCREEN_EXIT)) {\n                    if (this._isInFullScreen) {\n                        target.removeClass(FULLSCREEN_EXIT).addClass(FULLSCREEN_ENTER);\n                        this.fullScreen(false);\n                    } else {\n                        target.removeClass(FULLSCREEN_ENTER).addClass(FULLSCREEN_EXIT);\n                        this.fullScreen(true);\n                    }\n                }\n                if (target.hasClass(MUTE) || target.hasClass(LOW_VOLUME) || target.hasClass(HIGH_VOLUME)) {\n                    var muted = this.mute();\n                    this.mute(!muted);\n                }\n            },\n            _sliderDragging: function () {\n                if (!this.media()) {\n                    return;\n                }\n                this._isDragging = true;\n            },\n            _sliderDragChange: function (e) {\n                var that = this;\n                var slider = e.sender;\n                var tzOffset = timeZoneSec * 1000;\n                if (!this.media()) {\n                    return;\n                }\n                that._sliderChangeFired = true;\n                that._isDragging = false;\n                if (!this.options.forwardSeek && slider.value() > this._seekBarLastPosition) {\n                    setTimeout(function () {\n                        slider.value(that._seekBarLastPosition);\n                    }, 1);\n                } else if (this._youTubeVideo) {\n                    that._ytmedia.seekTo(that._timeToSec(e.value - tzOffset));\n                } else {\n                    that._media.currentTime = that._timeToSec(e.value - tzOffset);\n                }\n                that.trigger(TIMECHANGE);\n                that._preventPlay = true;\n            },\n            _changeVolumeButtonImage: function (volume) {\n                var volumeButton = this._volumeButton;\n                var volumeElement = volumeButton.find('span');\n                var cssClass = volumeElement.attr('class');\n                cssClass = cssClass.substring(0, cssClass.lastIndexOf(' '));\n                if (volume === 0) {\n                    volumeElement.attr('class', cssClass + ' ' + MUTE);\n                    volumeButton.attr('title', this.options.messages.unmute);\n                    volumeButton.attr('aria-label', this.options.messages.unmute);\n                } else if (volume > 0 && volume < 51) {\n                    volumeElement.attr('class', cssClass + ' ' + LOW_VOLUME);\n                    volumeButton.attr('title', this.options.messages.mute);\n                    volumeButton.attr('aria-label', this.options.messages.mute);\n                } else {\n                    volumeElement.attr('class', cssClass + ' ' + HIGH_VOLUME);\n                    volumeButton.attr('title', this.options.messages.mute);\n                    volumeButton.attr('aria-label', this.options.messages.mute);\n                }\n            },\n            _volumeDragging: function (e) {\n                if (!this.media()) {\n                    return;\n                }\n                this.volume(e.value);\n                this._changeVolumeButtonImage(e.value);\n                this.trigger(VOLUMECHANGE);\n            },\n            _volumeChange: function (e) {\n                if (!this.media()) {\n                    return;\n                }\n                this.volume(e.value);\n                this._changeVolumeButtonImage(e.value);\n                this.trigger(VOLUMECHANGE);\n            },\n            _mediaTimeUpdate: function () {\n                var currentTime = this._youTubeVideo ? this._ytmedia.getCurrentTime() : this._media.currentTime;\n                currentTime = currentTime ? currentTime : 0;\n                var timeInMs = this._msToTime(currentTime);\n                this._currentTimeElement.text(kendo.toString(timeInMs, this._timeFormat));\n                if (!this._isDragging) {\n                    this._seekBarLastPosition = (currentTime + timeZoneSec) * 1000;\n                    this._slider.value(this._seekBarLastPosition);\n                }\n                return this.isPlaying();\n            },\n            _playStateToggle: function (play) {\n                if (typeof play === 'undefined') {\n                    play = this._playButtonSpan.is(DOT + STATE_PLAY);\n                }\n                if (play) {\n                    this._playButtonSpan.removeClass(STATE_PLAY).addClass(STATE_PAUSE);\n                    this._playButton.attr('title', this.options.messages.pause);\n                    this._playButton.attr('aria-label', this.options.messages.pause);\n                } else {\n                    this._playButtonSpan.removeClass(STATE_PAUSE).addClass(STATE_PLAY);\n                    this._playButton.attr('title', this.options.messages.play);\n                    this._playButton.attr('aria-label', this.options.messages.play);\n                }\n            },\n            _mediaEnded: function () {\n                this._playStateToggle(false);\n                this._currentTimeElement.text(kendo.toString(this._msToTime(0), this._timeFormat));\n                this._slider.value((0 + timeZoneSec) * 1000);\n                this.trigger(END);\n            },\n            _mediaPlay: function () {\n                this.trigger(PLAY);\n            },\n            _mediaReady: function () {\n                this.trigger(READY);\n            },\n            _mediaDurationChange: function () {\n                var durationTime = this._msToTime(this._youTubeVideo ? this._ytmedia.getDuration() : this._media.duration);\n                this._timeFormat = durationTime.getHours() === 0 ? timeFormats.shortTime : timeFormats.longTime;\n                this._durationElement.text(kendo.toString(durationTime, this._timeFormat));\n                this._slider.setOptions({\n                    min: baseTime.getTime(),\n                    max: durationTime.getTime()\n                });\n                if (!this._isFirstRun) {\n                    this._resetTime();\n                    this._isFirstRun = true;\n                }\n            },\n            _createYoutubePlayer: function () {\n                this._mediaTimeUpdateHandler = proxy(this._mediaTimeUpdate, this);\n                this._mediaDurationChangeHandler = proxy(this._mediaDurationChange, this);\n                this.wrapper.prepend(templates.youtubePlayer);\n                this._ytPlayer = this.wrapper.find(DOT + YTPLAYER)[0];\n                $(this._ytPlayer).css({\n                    width: this.wrapper.width(),\n                    height: this.wrapper.height()\n                });\n                if (!window.YT || !window.YT.Player) {\n                    if (!window.onYouTubeIframeAPIReadyRegister) {\n                        window.onYouTubeIframeAPIReadyRegister = [];\n                        $.getScript('https://www.youtube.com/iframe_api');\n                        window.onYouTubeIframeAPIReady = function () {\n                            if (window.onYouTubeIframeAPIReadyRegister) {\n                                for (var i = 0; i < window.onYouTubeIframeAPIReadyRegister.length; i++) {\n                                    window.onYouTubeIframeAPIReadyRegister[i]._youtubeApiReady();\n                                }\n                            }\n                            window.onYouTubeIframeAPIReadyRegister.length = 0;\n                            window.onYouTubeIframeAPIReadyRegister = undefined;\n                        };\n                    }\n                    window.onYouTubeIframeAPIReadyRegister[window.onYouTubeIframeAPIReadyRegister.length] = this;\n                } else {\n                    this._configurePlayer();\n                }\n            },\n            _poll: function (name, callback, interval, context) {\n                var that = this;\n                if (that._timers[name] !== null) {\n                    clearTimeout(that._timers[name]);\n                }\n                that._timers[name] = setTimeout(function (context) {\n                    return function callLater() {\n                        if (callback.call(context)) {\n                            that._timers[name] = setTimeout(callLater, interval);\n                        }\n                    };\n                }(context), interval);\n                return that._timers[name];\n            },\n            _youtubeApiReady: function () {\n                this._configurePlayer();\n            },\n            _configurePlayer: function () {\n                var vars = {\n                    'autoplay': +this.options.autoPlay,\n                    'wmode': 'transparent',\n                    'controls': 0,\n                    'rel': 0,\n                    'showinfo': 0\n                };\n                this._onYouTubePlayerReady = proxy(this._onYouTubePlayerReady, this);\n                window.onYouTubePlayerReady = this._onYouTubePlayerReady;\n                this._onPlayerStateChangeHandler = proxy(this._onPlayerStateChange, this);\n                window.onPlayerStateChange = this._onPlayerStateChange;\n                var player = new window.YT.Player(this.wrapper.find(DOT + YTPLAYER)[0], {\n                    height: this.wrapper.height(),\n                    width: this.wrapper.width(),\n                    videoId: this._getMediaId(),\n                    playerVars: vars,\n                    events: {\n                        'onReady': this._onYouTubePlayerReady,\n                        'onStateChange': this._onPlayerStateChangeHandler\n                    }\n                });\n            },\n            _onYouTubePlayerReady: function (event) {\n                this._ytmedia = event.target;\n                this._ytmedia.getIframe().style.width = '100%';\n                this._ytmedia.getIframe().style.height = '100%';\n                this._youTubeVideo = true;\n                this._mediaDurationChangeHandler();\n                if (this.options.autoPlay) {\n                    this._playStateToggle(true);\n                    this._ytmedia.loadVideoById(this._getMediaId());\n                } else {\n                    this._ytmedia.cueVideoById(this._getMediaId());\n                }\n                if (this.options.mute) {\n                    this.mute(true);\n                }\n                this.trigger(READY);\n            },\n            _updateTitle: function () {\n                this.titlebar().text(this.media().title || this.media().source);\n            },\n            _onPlayerStateChange: function (event) {\n                if (event.data === 0) {\n                    this._slider.value(0);\n                    this._paused = false;\n                    this._playStateToggle(true);\n                    this.trigger(END);\n                    if (this.options.autoRepeat) {\n                        this.play();\n                    }\n                } else if (event.data === 1) {\n                    this._mediaDurationChange();\n                    this._ytmedia.setVolume(this.volume());\n                    if (this._sliderChangeFired) {\n                        this._sliderChangeFired = false;\n                    } else {\n                        this._uiDisplay(false);\n                    }\n                    this.trigger(PLAY);\n                    this._playStateToggle(true);\n                    this._poll('progress', this._mediaTimeUpdate, 500, this);\n                    this._paused = false;\n                } else if (event.data === 2) {\n                    if (!this._paused) {\n                        this._uiDisplay(true);\n                        this._playStateToggle(false);\n                        this.trigger(PAUSE);\n                        this._paused = true;\n                    }\n                }\n            },\n            _getMediaId: function () {\n                var result = this._currentUrl();\n                var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n                var match = result.match(regExp);\n                if (match && match[7].length === 11) {\n                    result = match[7];\n                }\n                return result;\n            },\n            _mouseClick: function () {\n                if (this.isPaused()) {\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            },\n            _initializePlayer: function () {\n                if (!this._mouseMoveHandler) {\n                    this._mouseMoveHandler = proxy(this._mouseMove, this);\n                    this._mouseInHandler = proxy(this._mouseIn, this);\n                    this._mouseOutHandler = proxy(this._mouseOut, this);\n                    $(this.wrapper).on('mouseenter' + ns, this._mouseInHandler).on('mouseleave' + ns, this._mouseOutHandler).on('mousemove' + ns, this._mouseMoveHandler);\n                }\n                if (!this._ytmedia && this._youTubeVideo) {\n                    this._createYoutubePlayer();\n                } else if (!this._media && !this._youTubeVideo) {\n                    this._createHtmlPlayer();\n                }\n            },\n            _createHtmlPlayer: function () {\n                if (!this._videoOverlay) {\n                    this._mouseClickHanlder = proxy(this._mouseClick, this);\n                    this.wrapper.append('<div class=\\'' + OVERLAY + '\\'></div>');\n                    this._videoOverlay = this.wrapper.find('.k-mediaplayer-overlay').on('click' + ns, this._mouseClickHanlder);\n                }\n                this._mediaTimeUpdateHandler = proxy(this._mediaTimeUpdate, this);\n                this._mediaDurationChangeHandler = proxy(this._mediaDurationChange, this);\n                this._mediaEndedHandler = proxy(this._mediaEnded, this);\n                this._mediaCanPlayHandler = proxy(this._mediaReady, this);\n                this._mediaPlayHandler = proxy(this._mediaPlay, this);\n                this._videoOverlay.after(templates.htmlPlayer);\n                this._media = this.wrapper.find(DOT + MEDIA)[0];\n                $(this._media).css({\n                    width: '100%',\n                    height: '100%'\n                });\n                if (this.options.mute) {\n                    this.mute(true);\n                }\n                this._media.ontimeupdate = this._mediaTimeUpdateHandler;\n                this._media.ondurationchange = this._mediaDurationChangeHandler;\n                this._media.oncanplay = this._mediaCanPlayHandler;\n                this._media.onplay = this._mediaPlayHandler;\n                this._media.onended = this._mediaEndedHandler;\n                this._media.loop = this.options.autoRepeat;\n            },\n            _mouseIn: function () {\n                this._uiDisplay(true);\n            },\n            _mouseOut: function () {\n                this._poll('mouseIdle', this._mouseIdle, 3000, this);\n            },\n            _mouseIdle: function () {\n                this._uiDisplay(false);\n                return false;\n            },\n            _mouseMove: function () {\n                if (!(this._titleBar.is(':animated') || this._toolBar.element.is(':animated') || this._slider.wrapper.is(':animated'))) {\n                    this._uiDisplay(true);\n                }\n                this._poll('mouseIdle', this._mouseIdle, 3000, this);\n            },\n            _uiDisplay: function (state) {\n                var animationSpeed = 'slow';\n                var uiElements = this._titleBar.add(this._toolBar.element.parent());\n                if (state) {\n                    uiElements.fadeIn(animationSpeed);\n                } else {\n                    uiElements.fadeOut(animationSpeed);\n                    if (this.options.navigatable) {\n                        this.wrapper.focus();\n                    }\n                }\n            },\n            setOptions: function (options) {\n                Widget.fn.setOptions.call(this, options);\n            },\n            destroy: function () {\n                Widget.fn.destroy.call(this);\n                if (!this.isPaused()) {\n                    this.pause();\n                }\n                this.element.off(ns);\n                this.element.find(DOT + OVERLAY).off(ns);\n                this._timers = null;\n                this._mouseMoveHandler = null;\n                this._mouseOutHandler = null;\n                this._mouseInHandler = null;\n                this._mouseClickHanlder = null;\n                this._keyDownHandler = null;\n                this._fullscreenHandler = null;\n                this._toolbarClickHandler = null;\n                this._sliderDragChangeHandler = null;\n                this._sliderDraggingHandler = null;\n                this._volumeDraggingHandler = null;\n                this._volumeChangeHandler = null;\n                this._youtubeApiReadyHandler = null;\n                this._onYouTubePlayerReady = null;\n                this._onPlayerStateChangeHandler = null;\n                this._dropDownSelectHandler = null;\n                if (this._youTubeVideo) {\n                    this._ytmedia.destroy();\n                } else {\n                    this._media.ontimeupdate = this._mediaTimeUpdateHandler = null;\n                    this._media.ondurationchange = this._mediaDurationChangeHandler = null;\n                    this._media.oncanplay = this._mediaCanPlayHandler = null;\n                    this._media.onplay = this._mediaPlayHandler = null;\n                    this._media.onended = this._mediaEndedHandler = null;\n                    this._media.src = '';\n                    this._media.remove();\n                }\n                this._mouseMoveTimer = null;\n                clearTimeout(this._mouseMoveTimer);\n                kendo.destroy(this.element);\n            },\n            seek: function (ms) {\n                if (typeof ms === 'undefined') {\n                    return 1000 * this._youTubeVideo ? this._ytmedia.getCurrentTime() : this._media ? this._media.currentTime : 0;\n                }\n                var seconds = ms / 1000;\n                if (this._youTubeVideo) {\n                    if (seconds + 3 >= this._ytmedia.getDuration() | 0) {\n                        this._ytmedia.seekTo(this._ytmedia.getDuration() - 3 | 0, true);\n                    } else {\n                        this._ytmedia.seekTo(seconds, true);\n                    }\n                } else {\n                    this._media.currentTime = seconds;\n                }\n                return this;\n            },\n            play: function () {\n                if (this._youTubeVideo) {\n                    this._ytmedia.playVideo();\n                } else {\n                    if (kendo.support.mobileOS) {\n                        this._uiDisplay(false);\n                    }\n                    this._media.play();\n                }\n                this._paused = false;\n                this._playStateToggle(true);\n                return this;\n            },\n            stop: function () {\n                if (this._youTubeVideo && this._ytmedia) {\n                    this._ytmedia.stopVideo();\n                } else if (this._media && !this._youTubeVideo) {\n                    if (kendo.support.mobileOS) {\n                        this._uiDisplay(true);\n                    }\n                    this._media.pause();\n                    this._media.currentTime = 0;\n                }\n                this._paused = true;\n                this._playStateToggle(false);\n                return this;\n            },\n            pause: function () {\n                if (this._youTubeVideo) {\n                    this._ytmedia.pauseVideo();\n                } else {\n                    if (kendo.support.mobileOS) {\n                        this._uiDisplay(true);\n                    }\n                    this._media.pause();\n                }\n                this._paused = true;\n                this._playStateToggle(false);\n                this.trigger(PAUSE);\n                return this;\n            },\n            toolbar: function () {\n                return this._toolBar;\n            },\n            dropdown: function () {\n                return this._dropDown;\n            },\n            titlebar: function () {\n                return this._titleBar;\n            },\n            fullScreen: function (enterFullScreen) {\n                if (typeof enterFullScreen === 'undefined') {\n                    return this._isInFullScreen || false;\n                }\n                var element = this.element.get(0);\n                if (enterFullScreen) {\n                    this.element.addClass('k-mediaplayer-fullscreen');\n                    if (element.requestFullscreen) {\n                        element.requestFullscreen();\n                    } else if (element.webkitRequestFullscreen) {\n                        element.webkitRequestFullscreen();\n                    } else if (element.mozRequestFullScreen) {\n                        element.mozRequestFullScreen();\n                    } else if (element.msRequestFullscreen) {\n                        element.msRequestFullscreen();\n                    }\n                    this._isInFullScreen = true;\n                } else {\n                    if (document.cancelFullscreen) {\n                        document.cancelFullscreen();\n                    } else if (document.webkitCancelFullScreen) {\n                        document.webkitCancelFullScreen();\n                    } else if (document.mozCancelFullScreen) {\n                        document.mozCancelFullScreen();\n                    } else if (document.msCancelFullscreen) {\n                        document.msCancelFullscreen();\n                    } else if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.msExitFullscreen) {\n                        document.msExitFullscreen();\n                    }\n                    this.element.removeClass('k-mediaplayer-fullscreen');\n                    this._isInFullScreen = false;\n                }\n                this._slider.resize();\n            },\n            volume: function (value) {\n                if (typeof value === 'undefined') {\n                    return typeof this._volume !== 'undefined' ? this._volume : this._volume = this.options.volume;\n                }\n                this._volume = value;\n                this.mute(value <= 0);\n                if (this._youTubeVideo) {\n                    this._ytmedia.setVolume(this._volume);\n                } else {\n                    this._media.volume = this._volume / 100;\n                }\n                this._volumeSlider.value(value);\n            },\n            mute: function (muted) {\n                var currentState = this._youTubeVideo ? this._ytmedia && this._ytmedia.isMuted() : this._media && this._media.muted;\n                if (typeof muted === 'undefined' || muted === currentState) {\n                    return currentState;\n                }\n                if (this._youTubeVideo) {\n                    if (muted) {\n                        this._ytmedia.mute();\n                    } else {\n                        this._ytmedia.unMute();\n                    }\n                } else {\n                    this._media.muted = muted;\n                }\n                if (muted) {\n                    this._volumeSlider.value(0);\n                } else {\n                    this._volumeSlider.value(this._media && this._media.volume * 100 || this._ytmedia && this._ytmedia.getVolume());\n                }\n                this.trigger(VOLUMECHANGE);\n                this._changeVolumeButtonImage(this._volumeSlider.value());\n            },\n            isEnded: function () {\n                if (this._youTubeVideo) {\n                    return this._ytmedia.getPlayerState() === 0;\n                } else {\n                    return this._media.ended;\n                }\n            },\n            media: function (value) {\n                var dropdown = this.dropdown();\n                if (typeof value === 'undefined') {\n                    return typeof this._mediaData !== 'undefined' ? this._mediaData : this._mediaData = this.options.media;\n                }\n                if (isArray(value.source)) {\n                    dropdown.setDataSource(value.source);\n                    dropdown.wrapper.show();\n                } else {\n                    dropdown.wrapper.hide();\n                }\n                this._mediaData = value;\n                this._updateTitle();\n                this._setPlayerUrl();\n            },\n            isPaused: function () {\n                return this._paused;\n            },\n            isPlaying: function () {\n                return !this.isEnded() && !this._paused;\n            },\n            _aria: function () {\n                this.wrapper.attr('role', 'region');\n            },\n            _navigatable: function () {\n                this._fullscreenHandler = proxy(this._fullscreen, this);\n                $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange' + ns, this._fullscreenHandler);\n                if (this.options.navigatable) {\n                    this.wrapper.attr('tabIndex', 0);\n                    this._keyDownHandler = proxy(this._keyDown, this);\n                    this.wrapper.on('keydown' + ns, this._keyDownHandler);\n                }\n            },\n            _fullscreen: function () {\n                var isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n                this._uiDisplay(true);\n                this._slider.resize();\n                if (!isFullScreen) {\n                    this.wrapper.find('span[class*=\"k-i-fullscreen\"]').removeClass(FULLSCREEN_EXIT).addClass(FULLSCREEN_ENTER);\n                    this.fullScreen(false);\n                }\n            },\n            _keyDown: function (e) {\n                e.preventDefault();\n                var fsButton = this.wrapper.find('span[class*=\"k-i-fullscreen\"]');\n                if (e.keyCode === keys.SPACEBAR) {\n                    if (this.isPlaying()) {\n                        this.pause();\n                    } else {\n                        this.play();\n                    }\n                } else if (e.keyCode === keys.ENTER && !this._isInFullScreen) {\n                    fsButton.removeClass(FULLSCREEN_ENTER).addClass(FULLSCREEN_EXIT);\n                    this.fullScreen(true);\n                } else if (e.keyCode === 77) {\n                    var muted = this.mute();\n                    this.mute(!muted);\n                } else if (e.keyCode === keys.ESC && this._isInFullScreen) {\n                    fsButton.removeClass(FULLSCREEN_EXIT).addClass(FULLSCREEN_ENTER);\n                    this.fullScreen(false);\n                }\n            },\n            _error: function () {\n            },\n            _progress: function () {\n            }\n        });\n        ui.plugin(MediaPlayer);\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define === 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('kendo.pivotgrid', [\n        'kendo.dom',\n        'kendo.data'\n    ], f);\n}(function () {\n    var __meta__ = {\n        id: 'pivotgrid',\n        name: 'PivotGrid',\n        category: 'web',\n        description: 'The PivotGrid widget is a data summarization tool.',\n        depends: [\n            'dom',\n            'data',\n            'data.xml',\n            'sortable'\n        ],\n        features: [\n            {\n                id: 'pivotgrid-configurator',\n                name: 'Configurator',\n                description: 'The PivotConfigurator widget allows the user to select data slices displayed in PivotGrid',\n                depends: ['pivot.configurator']\n            },\n            {\n                id: 'pivotgrid-filtering',\n                name: 'Filtering',\n                description: 'Support for filtering',\n                depends: ['pivot.fieldmenu']\n            },\n            {\n                id: 'pivotgrid-excel-export',\n                name: 'Excel export',\n                description: 'Export pivot grid data as Excel spreadsheet',\n                depends: ['ooxml']\n            },\n            {\n                id: 'pivotgrid-pdf-export',\n                name: 'PDF export',\n                description: 'Export pivot grid data as PDF',\n                depends: [\n                    'pdf',\n                    'drawing'\n                ]\n            },\n            {\n                id: 'mobile-scroller',\n                name: 'Mobile scroller',\n                description: 'Support for kinetic scrolling in mobile device',\n                depends: ['mobile.scroller']\n            }\n        ]\n    };\n    (function ($, undefined) {\n        var kendo = window.kendo, ui = kendo.ui, Class = kendo.Class, Widget = ui.Widget, DataSource = kendo.data.DataSource, outerWidth = kendo._outerWidth, outerHeight = kendo._outerHeight, toString = {}.toString, identity = function (o) {\n                return o;\n            }, map = $.map, extend = $.extend, isFunction = kendo.isFunction, CHANGE = 'change', ERROR = 'error', MEASURES = 'Measures', PROGRESS = 'progress', STATERESET = 'stateReset', AUTO = 'auto', DIV = '<div/>', NS = '.kendoPivotGrid', ROW_TOTAL_KEY = '__row_total__', DATABINDING = 'dataBinding', DATABOUND = 'dataBound', EXPANDMEMBER = 'expandMember', COLLAPSEMEMBER = 'collapseMember', STATE_EXPANDED = 'k-i-collapse', STATE_COLLAPSED = 'k-i-expand', HEADER_TEMPLATE = '<span>#: data.member.caption || data.member.name #</span>', KPISTATUS_TEMPLATE = '<span class=\"k-icon k-i-kpi-status-#=data.dataItem.value > 0 ? \"open\" : data.dataItem.value < 0 ? \"deny\" : \"hold\"#\" title=\"#:data.dataItem.value#\"></span>', KPITREND_TEMPLATE = '<span class=\"k-icon k-i-kpi-trend-#=data.dataItem.value > 0 ? \"increase\" : data.dataItem.value < 0 ? \"decrease\" : \"equal\"#\" title=\"#:data.dataItem.value#\"></span>', DATACELL_TEMPLATE = '#= data.dataItem ? kendo.htmlEncode(data.dataItem.fmtValue || data.dataItem.value) || \"&nbsp;\" : \"&nbsp;\" #', LAYOUT_TABLE = '<table class=\"k-pivot-layout\">' + '<tr>' + '<td>' + '<div class=\"k-pivot-rowheaders\"></div>' + '</td>' + '<td>' + '<div class=\"k-pivot-table k-state-default\"></div>' + '</td>' + '</tr>' + '</table>';\n        var AXIS_ROWS = 'rows';\n        var AXIS_COLUMNS = 'columns';\n        function normalizeMeasures(measure) {\n            var descriptor = typeof measure === 'string' ? [{ name: measure }] : measure;\n            var descriptors = toString.call(descriptor) === '[object Array]' ? descriptor : descriptor !== undefined ? [descriptor] : [];\n            return map(descriptors, function (d) {\n                if (typeof d === 'string') {\n                    return { name: d };\n                }\n                return {\n                    name: d.name,\n                    type: d.type\n                };\n            });\n        }\n        function normalizeMembers(member) {\n            var descriptor = typeof member === 'string' ? [{\n                    name: [member],\n                    expand: false\n                }] : member;\n            var descriptors = toString.call(descriptor) === '[object Array]' ? descriptor : descriptor !== undefined ? [descriptor] : [];\n            return map(descriptors, function (d) {\n                if (typeof d === 'string') {\n                    return {\n                        name: [d],\n                        expand: false\n                    };\n                }\n                return {\n                    name: toString.call(d.name) === '[object Array]' ? d.name.slice() : [d.name],\n                    expand: d.expand\n                };\n            });\n        }\n        function normalizeName(name) {\n            if (name.indexOf(' ') !== -1) {\n                name = '[\"' + name + '\"]';\n            }\n            return name;\n        }\n        function accumulateMembers(accumulator, rootTuple, tuple, level) {\n            var idx, length;\n            var children;\n            var member;\n            if (!tuple) {\n                tuple = rootTuple;\n            }\n            if (!level) {\n                level = 0;\n            }\n            member = tuple.members[level];\n            if (!member || member.measure) {\n                return;\n            }\n            children = member.children;\n            length = children.length;\n            if (tuple === rootTuple) {\n                accumulator[kendo.stringify([member.name])] = !!length;\n            } else if (length) {\n                accumulator[kendo.stringify(buildPath(tuple, level))] = true;\n            }\n            if (length) {\n                for (idx = 0; idx < length; idx++) {\n                    accumulateMembers(accumulator, rootTuple, children[idx], level);\n                }\n            }\n            accumulateMembers(accumulator, rootTuple, tuple, level + 1);\n        }\n        function descriptorsForAxes(tuples) {\n            var result = {};\n            if (tuples.length) {\n                accumulateMembers(result, tuples[0]);\n            }\n            var descriptors = [];\n            for (var k in result) {\n                descriptors.push({\n                    name: $.parseJSON(k),\n                    expand: result[k]\n                });\n            }\n            return descriptors;\n        }\n        function addMissingPathMembers(members, axis) {\n            var tuples = axis.tuples || [];\n            var firstTuple = tuples[0];\n            if (firstTuple && members.length < firstTuple.members.length) {\n                var tupleMembers = firstTuple.members;\n                for (var idx = 0; idx < tupleMembers.length; idx++) {\n                    if (tupleMembers[idx].measure) {\n                        continue;\n                    }\n                    var found = false;\n                    for (var j = 0; j < members.length; j++) {\n                        if (getName(members[j]).indexOf(tupleMembers[idx].hierarchy) === 0) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        members.push({\n                            name: [tupleMembers[idx].name],\n                            expand: false\n                        });\n                    }\n                }\n            }\n        }\n        function tupleToDescriptors(tuple) {\n            var result = [];\n            var members = tuple.members;\n            for (var idx = 0; idx < members.length; idx++) {\n                if (members[idx].measure) {\n                    continue;\n                }\n                result.push({\n                    name: [members[idx].name],\n                    expand: members[idx].children.length > 0\n                });\n            }\n            return result;\n        }\n        function descriptorsForMembers(axis, members, measures) {\n            axis = axis || {};\n            addMissingPathMembers(members, axis);\n            if (measures.length > 1) {\n                members.push({\n                    name: MEASURES,\n                    measure: true,\n                    children: normalizeMembers(measures)\n                });\n            }\n            var tupletoSearch = { members: members };\n            if (axis.tuples) {\n                var result = findExistingTuple(axis.tuples, tupletoSearch);\n                if (result.tuple) {\n                    members = tupleToDescriptors(result.tuple);\n                }\n            }\n            return members;\n        }\n        function createAggregateGetter(m) {\n            var measureGetter = kendo.getter(m.field, true);\n            return function (aggregatorContext, state) {\n                return m.aggregate(measureGetter(aggregatorContext.dataItem), state, aggregatorContext);\n            };\n        }\n        function isNumber(val) {\n            return typeof val === 'number' && !isNaN(val);\n        }\n        function isDate(val) {\n            return val && val.getTime;\n        }\n        var functions = {\n            sum: function (value, state) {\n                var accumulator = state.accumulator;\n                if (!isNumber(accumulator)) {\n                    accumulator = value;\n                } else if (isNumber(value)) {\n                    accumulator += value;\n                }\n                return accumulator;\n            },\n            count: function (value, state) {\n                return (state.accumulator || 0) + 1;\n            },\n            average: {\n                aggregate: function (value, state) {\n                    var accumulator = state.accumulator;\n                    if (state.count === undefined) {\n                        state.count = 0;\n                    }\n                    if (!isNumber(accumulator)) {\n                        accumulator = value;\n                    } else if (isNumber(value)) {\n                        accumulator += value;\n                    }\n                    if (isNumber(value)) {\n                        state.count++;\n                    }\n                    return accumulator;\n                },\n                result: function (state) {\n                    var accumulator = state.accumulator;\n                    if (isNumber(accumulator)) {\n                        accumulator = accumulator / state.count;\n                    }\n                    return accumulator;\n                }\n            },\n            max: function (value, state) {\n                var accumulator = state.accumulator;\n                if (!isNumber(accumulator) && !isDate(accumulator)) {\n                    accumulator = value;\n                }\n                if (accumulator < value && (isNumber(value) || isDate(value))) {\n                    accumulator = value;\n                }\n                return accumulator;\n            },\n            min: function (value, state) {\n                var accumulator = state.accumulator;\n                if (!isNumber(accumulator) && !isDate(accumulator)) {\n                    accumulator = value;\n                }\n                if (accumulator > value && (isNumber(value) || isDate(value))) {\n                    accumulator = value;\n                }\n                return accumulator;\n            }\n        };\n        var PivotCubeBuilder = Class.extend({\n            init: function (options) {\n                this.options = extend({}, this.options, options);\n                this.dimensions = this._normalizeDescriptors('field', this.options.dimensions);\n                this.measures = this._normalizeDescriptors('name', this.options.measures);\n            },\n            _normalizeDescriptors: function (keyField, descriptors) {\n                descriptors = descriptors || {};\n                var fields = {};\n                var field;\n                if (toString.call(descriptors) === '[object Array]') {\n                    for (var idx = 0, length = descriptors.length; idx < length; idx++) {\n                        field = descriptors[idx];\n                        if (typeof field === 'string') {\n                            fields[field] = {};\n                        } else if (field[keyField]) {\n                            fields[field[keyField]] = field;\n                        }\n                    }\n                    descriptors = fields;\n                }\n                return descriptors;\n            },\n            _rootTuples: function (rootNames, measureAggregators) {\n                var aggregatorsLength = measureAggregators.length || 1;\n                var dimensionsSchema = this.dimensions || [];\n                var root, name, parts;\n                var measureIdx = 0;\n                var idx;\n                var rootNamesLength = rootNames.length;\n                var result = [];\n                var keys = [];\n                if (rootNamesLength || measureAggregators.length) {\n                    for (measureIdx = 0; measureIdx < aggregatorsLength; measureIdx++) {\n                        root = { members: [] };\n                        for (idx = 0; idx < rootNamesLength; idx++) {\n                            name = rootNames[idx];\n                            parts = name.split('&');\n                            root.members[root.members.length] = {\n                                children: [],\n                                caption: (dimensionsSchema[name] || {}).caption || 'All',\n                                name: name,\n                                levelName: name,\n                                levelNum: '0',\n                                hasChildren: true,\n                                parentName: parts.length > 1 ? parts[0] : undefined,\n                                hierarchy: name\n                            };\n                        }\n                        if (aggregatorsLength > 1) {\n                            root.members[root.members.length] = {\n                                children: [],\n                                caption: measureAggregators[measureIdx].caption,\n                                name: measureAggregators[measureIdx].descriptor.name,\n                                levelName: 'MEASURES',\n                                levelNum: '0',\n                                hasChildren: false,\n                                parentName: undefined,\n                                hierarchy: 'MEASURES'\n                            };\n                        }\n                        result[result.length] = root;\n                    }\n                    keys.push(ROW_TOTAL_KEY);\n                }\n                return {\n                    keys: keys,\n                    tuples: result\n                };\n            },\n            _expandedTuples: function (map, expanded, measureAggregators) {\n                var aggregatorsLength = measureAggregators.length || 1;\n                var dimensionsSchema = this.dimensions || [];\n                var measureIdx;\n                var tuple;\n                var key;\n                var mapItem;\n                var current;\n                var currentKeys;\n                var accumulator = [];\n                var accumulatorKeys = [];\n                var memberInfo;\n                var expandedNames;\n                var parts;\n                var name;\n                var idx;\n                for (key in map) {\n                    mapItem = map[key];\n                    memberInfo = this._findExpandedMember(expanded, mapItem.uniquePath);\n                    current = accumulator[memberInfo.index] || [];\n                    currentKeys = accumulatorKeys[memberInfo.index] || [];\n                    expandedNames = memberInfo.member.names;\n                    for (measureIdx = 0; measureIdx < aggregatorsLength; measureIdx++) {\n                        tuple = { members: [] };\n                        for (idx = 0; idx < expandedNames.length; idx++) {\n                            if (idx === memberInfo.member.expandedIdx) {\n                                tuple.members[tuple.members.length] = {\n                                    children: [],\n                                    caption: mapItem.value,\n                                    name: mapItem.name,\n                                    hasChildren: false,\n                                    levelNum: 1,\n                                    levelName: mapItem.parentName + mapItem.name,\n                                    parentName: mapItem.parentName,\n                                    hierarchy: mapItem.parentName + mapItem.name\n                                };\n                                if (measureIdx === 0) {\n                                    currentKeys.push(buildPath(tuple, idx).join(''));\n                                }\n                            } else {\n                                name = expandedNames[idx];\n                                parts = name.split('&');\n                                tuple.members[tuple.members.length] = {\n                                    children: [],\n                                    caption: (dimensionsSchema[name] || {}).caption || 'All',\n                                    name: name,\n                                    levelName: name,\n                                    levelNum: '0',\n                                    hasChildren: true,\n                                    parentName: parts.length > 1 ? parts[0] : undefined,\n                                    hierarchy: name\n                                };\n                            }\n                        }\n                        if (aggregatorsLength > 1) {\n                            tuple.members[tuple.members.length] = {\n                                children: [],\n                                caption: measureAggregators[measureIdx].caption,\n                                name: measureAggregators[measureIdx].descriptor.name,\n                                levelName: 'MEASURES',\n                                levelNum: '0',\n                                hasChildren: true,\n                                parentName: undefined,\n                                hierarchy: 'MEASURES'\n                            };\n                        }\n                        current[current.length] = tuple;\n                    }\n                    accumulator[memberInfo.index] = current;\n                    accumulatorKeys[memberInfo.index] = currentKeys;\n                }\n                return {\n                    keys: accumulatorKeys,\n                    tuples: accumulator\n                };\n            },\n            _findExpandedMember: function (members, parentName) {\n                for (var idx = 0; idx < members.length; idx++) {\n                    if (members[idx].uniquePath === parentName) {\n                        return {\n                            member: members[idx],\n                            index: idx\n                        };\n                    }\n                }\n            },\n            _asTuples: function (map, descriptor, measureAggregators) {\n                measureAggregators = measureAggregators || [];\n                var rootInfo = this._rootTuples(descriptor.root, measureAggregators);\n                var expandedInfo = this._expandedTuples(map, descriptor.expanded, measureAggregators);\n                return {\n                    keys: [].concat.apply(rootInfo.keys, expandedInfo.keys),\n                    tuples: [].concat.apply(rootInfo.tuples, expandedInfo.tuples)\n                };\n            },\n            _measuresInfo: function (measures, rowAxis) {\n                var idx = 0;\n                var length = measures && measures.length;\n                var aggregateNames = [];\n                var resultFuncs = {};\n                var formats = {};\n                var descriptors = this.measures || {};\n                var measure;\n                var name;\n                for (; idx < length; idx++) {\n                    name = measures[idx].descriptor.name;\n                    measure = descriptors[name] || {};\n                    aggregateNames.push(name);\n                    if (measure.result) {\n                        resultFuncs[name] = measure.result;\n                    }\n                    if (measure.format) {\n                        formats[name] = measure.format;\n                    }\n                }\n                return {\n                    names: aggregateNames,\n                    formats: formats,\n                    resultFuncs: resultFuncs,\n                    rowAxis: rowAxis\n                };\n            },\n            _toDataArray: function (map, measuresInfo, rowKeys, columnKeys) {\n                var result = [];\n                var aggregates;\n                var name, i, j, k, n;\n                var row, column, columnKey;\n                var rowMeasureNamesLength = 1;\n                var rowMeasureNames = [];\n                var columnMeasureNames;\n                var rowLength = rowKeys.length || 1;\n                var columnLength = columnKeys.length || 1;\n                if (measuresInfo.rowAxis) {\n                    rowMeasureNames = measuresInfo.names;\n                    rowMeasureNamesLength = rowMeasureNames.length;\n                } else {\n                    columnMeasureNames = measuresInfo.names;\n                }\n                for (i = 0; i < rowLength; i++) {\n                    row = map[rowKeys[i] || ROW_TOTAL_KEY];\n                    for (n = 0; n < rowMeasureNamesLength; n++) {\n                        if (measuresInfo.rowAxis) {\n                            columnMeasureNames = [rowMeasureNames[n]];\n                        }\n                        for (j = 0; j < columnLength; j++) {\n                            columnKey = columnKeys[j] || ROW_TOTAL_KEY;\n                            column = row.items[columnKey];\n                            if (columnKey === ROW_TOTAL_KEY) {\n                                aggregates = row.aggregates;\n                            } else {\n                                aggregates = column ? column.aggregates : {};\n                            }\n                            for (k = 0; k < columnMeasureNames.length; k++) {\n                                name = columnMeasureNames[k];\n                                this._addData(result, aggregates[name], measuresInfo.formats[name], measuresInfo.resultFuncs[name]);\n                            }\n                        }\n                    }\n                }\n                return result;\n            },\n            _addData: function (result, value, format, resultFunc) {\n                var fmtValue = '';\n                var ordinal;\n                if (value) {\n                    value = resultFunc ? resultFunc(value) : value.accumulator;\n                    fmtValue = format ? kendo.format(format, value) : value;\n                }\n                ordinal = result.length;\n                result[ordinal] = {\n                    ordinal: ordinal,\n                    value: value || '',\n                    fmtValue: fmtValue\n                };\n            },\n            _matchDescriptors: function (dataItem, descriptor, getters) {\n                var parts;\n                var parentField;\n                var expectedValue;\n                var names = descriptor.names;\n                var idx = descriptor.expandedIdx;\n                var value;\n                while (idx > 0) {\n                    parts = names[--idx].split('&');\n                    if (parts.length > 1) {\n                        parentField = parts[0];\n                        expectedValue = parts[1];\n                        value = getters[parentField](dataItem);\n                        value = value !== undefined && value !== null ? value.toString() : value;\n                        if (value != expectedValue) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            },\n            _calculateAggregate: function (measureAggregators, aggregatorContext, totalItem) {\n                var result = {};\n                var state;\n                var name;\n                for (var measureIdx = 0; measureIdx < measureAggregators.length; measureIdx++) {\n                    name = measureAggregators[measureIdx].descriptor.name;\n                    state = totalItem.aggregates[name] || {};\n                    state.accumulator = measureAggregators[measureIdx].aggregator(aggregatorContext, state);\n                    result[name] = state;\n                }\n                return result;\n            },\n            _processColumns: function (measureAggregators, descriptors, getters, columns, aggregatorContext, rowTotal, state, updateColumn) {\n                var value;\n                var descriptor;\n                var column;\n                var totalItem;\n                var key, name, parentName, path;\n                var dataItem = aggregatorContext.dataItem;\n                var idx = 0;\n                for (; idx < descriptors.length; idx++) {\n                    descriptor = descriptors[idx];\n                    if (!this._matchDescriptors(dataItem, descriptor, getters)) {\n                        continue;\n                    }\n                    path = descriptor.names.slice(0, descriptor.expandedIdx).join('');\n                    name = descriptor.names[descriptor.expandedIdx];\n                    value = getters[name](dataItem);\n                    value = value !== undefined && value !== null ? value.toString() : value;\n                    parentName = name;\n                    name = name + '&' + value;\n                    key = path + name;\n                    column = columns[key] || {\n                        index: state.columnIndex,\n                        parentName: parentName,\n                        name: name,\n                        uniquePath: path + parentName,\n                        value: value\n                    };\n                    totalItem = rowTotal.items[key] || { aggregates: {} };\n                    rowTotal.items[key] = {\n                        index: column.index,\n                        aggregates: this._calculateAggregate(measureAggregators, aggregatorContext, totalItem)\n                    };\n                    if (updateColumn) {\n                        if (!columns[key]) {\n                            state.columnIndex++;\n                        }\n                        columns[key] = column;\n                    }\n                }\n            },\n            _measureAggregators: function (options) {\n                var measureDescriptors = options.measures || [];\n                var measures = this.measures || {};\n                var aggregators = [];\n                var descriptor, measure, idx, length;\n                var defaultAggregate, aggregate;\n                if (measureDescriptors.length) {\n                    for (idx = 0, length = measureDescriptors.length; idx < length; idx++) {\n                        descriptor = measureDescriptors[idx];\n                        measure = measures[descriptor.name];\n                        defaultAggregate = null;\n                        if (measure) {\n                            aggregate = measure.aggregate;\n                            if (typeof aggregate === 'string') {\n                                defaultAggregate = functions[aggregate.toLowerCase()];\n                                if (!defaultAggregate) {\n                                    throw new Error('There is no such aggregate function');\n                                }\n                                measure.aggregate = defaultAggregate.aggregate || defaultAggregate;\n                                measure.result = defaultAggregate.result;\n                            }\n                            aggregators.push({\n                                descriptor: descriptor,\n                                caption: measure.caption,\n                                result: measure.result,\n                                aggregator: createAggregateGetter(measure)\n                            });\n                        }\n                    }\n                } else {\n                    aggregators.push({\n                        descriptor: { name: 'default' },\n                        caption: 'default',\n                        aggregator: function () {\n                            return 1;\n                        }\n                    });\n                }\n                return aggregators;\n            },\n            _buildGetters: function (names) {\n                var result = {};\n                var parts;\n                var name;\n                for (var idx = 0; idx < names.length; idx++) {\n                    name = names[idx];\n                    parts = name.split('&');\n                    if (parts.length > 1) {\n                        result[parts[0]] = kendo.getter(parts[0], true);\n                    } else {\n                        result[name] = kendo.getter(normalizeName(name), true);\n                    }\n                }\n                return result;\n            },\n            _parseDescriptors: function (descriptors) {\n                var parsedDescriptors = parseDescriptors(descriptors);\n                var rootNames = getRootNames(parsedDescriptors.root);\n                var expanded = parsedDescriptors.expanded;\n                var result = [];\n                for (var idx = 0; idx < expanded.length; idx++) {\n                    result.push(mapNames(expanded[idx].name, rootNames));\n                }\n                return {\n                    root: rootNames,\n                    expanded: result\n                };\n            },\n            _filter: function (data, filter) {\n                if (!filter) {\n                    return data;\n                }\n                var expr;\n                var idx = 0;\n                var filters = filter.filters;\n                for (; idx < filters.length; idx++) {\n                    expr = filters[idx];\n                    if (expr.operator === 'in') {\n                        filters[idx] = this._normalizeFilter(expr);\n                    }\n                }\n                return new kendo.data.Query(data).filter(filter).data;\n            },\n            _normalizeFilter: function (filter) {\n                var value = filter.value.split(',');\n                var result = [];\n                if (!value.length) {\n                    return value;\n                }\n                for (var idx = 0; idx < value.length; idx++) {\n                    result.push({\n                        field: filter.field,\n                        operator: 'eq',\n                        value: value[idx]\n                    });\n                }\n                return {\n                    logic: 'or',\n                    filters: result\n                };\n            },\n            process: function (data, options) {\n                data = data || [];\n                options = options || {};\n                data = this._filter(data, options.filter);\n                var measures = options.measures || [];\n                var measuresRowAxis = options.measuresAxis === 'rows';\n                var columnDescriptors = options.columns || [];\n                var rowDescriptors = options.rows || [];\n                if (!columnDescriptors.length && rowDescriptors.length && (!measures.length || measures.length && measuresRowAxis)) {\n                    columnDescriptors = rowDescriptors;\n                    rowDescriptors = [];\n                    measuresRowAxis = false;\n                }\n                if (!columnDescriptors.length && !rowDescriptors.length) {\n                    measuresRowAxis = false;\n                }\n                if (!columnDescriptors.length && measures.length) {\n                    columnDescriptors = normalizeMembers(options.measures);\n                }\n                columnDescriptors = this._parseDescriptors(columnDescriptors);\n                rowDescriptors = this._parseDescriptors(rowDescriptors);\n                var aggregatedData = {};\n                var columns = {};\n                var rows = {};\n                var rowValue;\n                var state = { columnIndex: 0 };\n                var measureAggregators = this._measureAggregators(options);\n                var columnGetters = this._buildGetters(columnDescriptors.root);\n                var rowGetters = this._buildGetters(rowDescriptors.root);\n                var processed = false;\n                var expandedColumns = columnDescriptors.expanded;\n                var expandedRows = rowDescriptors.expanded;\n                var dataItem;\n                var aggregatorContext;\n                var hasExpandedRows = expandedRows.length !== 0;\n                var rowIdx, rowDescriptor, rowName, rowTotal;\n                var key, path, parentName, value;\n                var columnsInfo, rowsInfo;\n                var length = data.length;\n                var idx = 0;\n                if (columnDescriptors.root.length || rowDescriptors.root.length) {\n                    processed = true;\n                    for (idx = 0; idx < length; idx++) {\n                        dataItem = data[idx];\n                        aggregatorContext = {\n                            dataItem: dataItem,\n                            index: idx\n                        };\n                        rowTotal = aggregatedData[ROW_TOTAL_KEY] || {\n                            items: {},\n                            aggregates: {}\n                        };\n                        this._processColumns(measureAggregators, expandedColumns, columnGetters, columns, aggregatorContext, rowTotal, state, !hasExpandedRows);\n                        rowTotal.aggregates = this._calculateAggregate(measureAggregators, aggregatorContext, rowTotal);\n                        aggregatedData[ROW_TOTAL_KEY] = rowTotal;\n                        for (rowIdx = 0; rowIdx < expandedRows.length; rowIdx++) {\n                            rowDescriptor = expandedRows[rowIdx];\n                            if (!this._matchDescriptors(dataItem, rowDescriptor, rowGetters)) {\n                                this._processColumns(measureAggregators, expandedColumns, columnGetters, columns, aggregatorContext, {\n                                    items: {},\n                                    aggregates: {}\n                                }, state, true);\n                                continue;\n                            }\n                            path = rowDescriptor.names.slice(0, rowDescriptor.expandedIdx).join('');\n                            rowName = rowDescriptor.names[rowDescriptor.expandedIdx];\n                            parentName = rowName;\n                            rowValue = rowGetters[rowName](dataItem);\n                            rowValue = rowValue !== undefined ? rowValue.toString() : rowValue;\n                            rowName = rowName + '&' + rowValue;\n                            key = path + rowName;\n                            rows[key] = {\n                                uniquePath: path + parentName,\n                                parentName: parentName,\n                                name: rowName,\n                                value: rowValue\n                            };\n                            value = aggregatedData[key] || {\n                                items: {},\n                                aggregates: {}\n                            };\n                            this._processColumns(measureAggregators, expandedColumns, columnGetters, columns, aggregatorContext, value, state, true);\n                            value.aggregates = this._calculateAggregate(measureAggregators, aggregatorContext, value);\n                            aggregatedData[key] = value;\n                        }\n                    }\n                }\n                if (processed && length) {\n                    if (measureAggregators.length > 1 && (!options.columns || !options.columns.length)) {\n                        columnDescriptors = {\n                            root: [],\n                            expanded: []\n                        };\n                    }\n                    columnsInfo = this._asTuples(columns, columnDescriptors, measuresRowAxis ? [] : measureAggregators);\n                    rowsInfo = this._asTuples(rows, rowDescriptors, measuresRowAxis ? measureAggregators : []);\n                    columns = columnsInfo.tuples;\n                    rows = rowsInfo.tuples;\n                    aggregatedData = this._toDataArray(aggregatedData, this._measuresInfo(measureAggregators, measuresRowAxis), rowsInfo.keys, columnsInfo.keys);\n                } else {\n                    aggregatedData = columns = rows = [];\n                }\n                return {\n                    axes: {\n                        columns: { tuples: columns },\n                        rows: { tuples: rows }\n                    },\n                    data: aggregatedData\n                };\n            }\n        });\n        var PivotTransport = Class.extend({\n            init: function (options, transport) {\n                this.transport = transport;\n                this.options = transport.options || {};\n                if (!this.transport.discover) {\n                    if (isFunction(options.discover)) {\n                        this.discover = options.discover;\n                    }\n                }\n            },\n            read: function (options) {\n                return this.transport.read(options);\n            },\n            update: function (options) {\n                return this.transport.update(options);\n            },\n            create: function (options) {\n                return this.transport.create(options);\n            },\n            destroy: function (options) {\n                return this.transport.destroy(options);\n            },\n            discover: function (options) {\n                if (this.transport.discover) {\n                    return this.transport.discover(options);\n                }\n                options.success({});\n            },\n            catalog: function (val) {\n                var options = this.options || {};\n                if (val === undefined) {\n                    return (options.connection || {}).catalog;\n                }\n                var connection = options.connection || {};\n                connection.catalog = val;\n                this.options.connection = connection;\n                $.extend(this.transport.options, { connection: connection });\n            },\n            cube: function (val) {\n                var options = this.options || {};\n                if (val === undefined) {\n                    return (options.connection || {}).cube;\n                }\n                var connection = options.connection || {};\n                connection.cube = val;\n                this.options.connection = connection;\n                extend(true, this.transport.options, { connection: connection });\n            }\n        });\n        var PivotDataSource = DataSource.extend({\n            init: function (options) {\n                var cube = ((options || {}).schema || {}).cube;\n                var measuresAxis = 'columns';\n                var measures;\n                var schema = {\n                    axes: identity,\n                    cubes: identity,\n                    catalogs: identity,\n                    measures: identity,\n                    dimensions: identity,\n                    hierarchies: identity,\n                    levels: identity,\n                    members: identity\n                };\n                if (cube) {\n                    schema = $.extend(schema, this._cubeSchema(cube));\n                    this.cubeBuilder = new PivotCubeBuilder(cube);\n                }\n                DataSource.fn.init.call(this, extend(true, {}, { schema: schema }, options));\n                this.transport = new PivotTransport(this.options.transport || {}, this.transport);\n                this._columns = normalizeMembers(this.options.columns);\n                this._rows = normalizeMembers(this.options.rows);\n                measures = this.options.measures || [];\n                if (toString.call(measures) === '[object Object]') {\n                    measuresAxis = measures.axis || 'columns';\n                    measures = measures.values || [];\n                }\n                this._measures = normalizeMeasures(measures);\n                this._measuresAxis = measuresAxis;\n                this._skipNormalize = 0;\n                this._axes = {};\n            },\n            _cubeSchema: function (cube) {\n                return {\n                    dimensions: function () {\n                        var result = [];\n                        var dimensions = cube.dimensions;\n                        for (var key in dimensions) {\n                            result.push({\n                                name: key,\n                                caption: dimensions[key].caption || key,\n                                uniqueName: key,\n                                defaultHierarchy: key,\n                                type: 1\n                            });\n                        }\n                        if (cube.measures) {\n                            result.push({\n                                name: MEASURES,\n                                caption: MEASURES,\n                                uniqueName: MEASURES,\n                                type: 2\n                            });\n                        }\n                        return result;\n                    },\n                    hierarchies: function () {\n                        return [];\n                    },\n                    measures: function () {\n                        var result = [];\n                        var measures = cube.measures;\n                        for (var key in measures) {\n                            result.push({\n                                name: key,\n                                caption: key,\n                                uniqueName: key,\n                                aggregator: key\n                            });\n                        }\n                        return result;\n                    },\n                    members: $.proxy(function (response, restrictions) {\n                        var name = restrictions.levelUniqueName || restrictions.memberUniqueName;\n                        var schemaData = this.options.schema.data;\n                        var dataGetter = isFunction(schemaData) ? schemaData : kendo.getter(schemaData, true);\n                        var data = this.options.data && dataGetter(this.options.data) || this._rawData || [];\n                        var result = [];\n                        var getter;\n                        var value;\n                        var idx = 0;\n                        var distinct = {};\n                        if (name) {\n                            name = name.split('.')[0];\n                        }\n                        if (!restrictions.treeOp) {\n                            result.push({\n                                caption: cube.dimensions[name].caption || name,\n                                childrenCardinality: '1',\n                                dimensionUniqueName: name,\n                                hierarchyUniqueName: name,\n                                levelUniqueName: name,\n                                name: name,\n                                uniqueName: name\n                            });\n                            return result;\n                        }\n                        getter = kendo.getter(normalizeName(name), true);\n                        for (; idx < data.length; idx++) {\n                            value = getter(data[idx]);\n                            if ((value || value === 0) && !distinct[value]) {\n                                distinct[value] = true;\n                                result.push({\n                                    caption: value,\n                                    childrenCardinality: '0',\n                                    dimensionUniqueName: name,\n                                    hierarchyUniqueName: name,\n                                    levelUniqueName: name,\n                                    name: value,\n                                    uniqueName: value\n                                });\n                            }\n                        }\n                        return result;\n                    }, this)\n                };\n            },\n            options: {\n                serverSorting: true,\n                serverPaging: true,\n                serverFiltering: true,\n                serverGrouping: true,\n                serverAggregates: true\n            },\n            catalog: function (val) {\n                if (val === undefined) {\n                    return this.transport.catalog();\n                }\n                this.transport.catalog(val);\n                this._mergeState({});\n                this._axes = {};\n                this.data([]);\n            },\n            cube: function (val) {\n                if (val === undefined) {\n                    return this.transport.cube();\n                }\n                this.transport.cube(val);\n                this._axes = {};\n                this._mergeState({});\n                this.data([]);\n            },\n            axes: function () {\n                return this._axes;\n            },\n            columns: function (val) {\n                if (val === undefined) {\n                    return this._columns;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this._columns = normalizeMembers(val);\n                this.query({\n                    columns: val,\n                    rows: this.rowsAxisDescriptors(),\n                    measures: this.measures(),\n                    sort: this.sort(),\n                    filter: this.filter()\n                });\n            },\n            rows: function (val) {\n                if (val === undefined) {\n                    return this._rows;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this._rows = normalizeMembers(val);\n                this.query({\n                    columns: this.columnsAxisDescriptors(),\n                    rows: val,\n                    measures: this.measures(),\n                    sort: this.sort(),\n                    filter: this.filter()\n                });\n            },\n            measures: function (val) {\n                if (val === undefined) {\n                    return this._measures;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this.query({\n                    columns: this.columnsAxisDescriptors(),\n                    rows: this.rowsAxisDescriptors(),\n                    measures: normalizeMeasures(val),\n                    sort: this.sort(),\n                    filter: this.filter()\n                });\n            },\n            measuresAxis: function () {\n                return this._measuresAxis || 'columns';\n            },\n            _expandPath: function (path, axis) {\n                var origin = axis === 'columns' ? 'columns' : 'rows';\n                var other = axis === 'columns' ? 'rows' : 'columns';\n                var members = normalizeMembers(path);\n                var memberToExpand = getName(members[members.length - 1]);\n                this._lastExpanded = origin;\n                members = descriptorsForMembers(this.axes()[origin], members, this.measures());\n                for (var idx = 0; idx < members.length; idx++) {\n                    var memberName = getName(members[idx]);\n                    if (memberName === memberToExpand) {\n                        if (members[idx].expand) {\n                            return;\n                        }\n                        members[idx].expand = true;\n                    } else {\n                        members[idx].expand = false;\n                    }\n                }\n                var descriptors = {};\n                descriptors[origin] = members;\n                descriptors[other] = this._descriptorsForAxis(other);\n                this._query(descriptors);\n            },\n            _descriptorsForAxis: function (axis) {\n                var axes = this.axes();\n                var descriptors = this[axis]() || [];\n                if (axes && axes[axis] && axes[axis].tuples && axes[axis].tuples[0]) {\n                    descriptors = descriptorsForAxes(axes[axis].tuples || []);\n                }\n                return descriptors;\n            },\n            columnsAxisDescriptors: function () {\n                return this._descriptorsForAxis('columns');\n            },\n            rowsAxisDescriptors: function () {\n                return this._descriptorsForAxis('rows');\n            },\n            _process: function (data, e) {\n                this._view = data;\n                e = e || {};\n                e.items = e.items || this._view;\n                this.trigger(CHANGE, e);\n            },\n            _query: function (options) {\n                var that = this;\n                if (!options) {\n                    this._skipNormalize += 1;\n                    this._clearAxesData = true;\n                }\n                return that.query(extend({}, {\n                    page: that.page(),\n                    pageSize: that.pageSize(),\n                    sort: that.sort(),\n                    filter: that.filter(),\n                    group: that.group(),\n                    aggregate: that.aggregate(),\n                    columns: this.columnsAxisDescriptors(),\n                    rows: this.rowsAxisDescriptors(),\n                    measures: this.measures()\n                }, options));\n            },\n            query: function (options) {\n                var state = this._mergeState(options);\n                if (this._data.length && this.cubeBuilder) {\n                    this._params(state);\n                    this._updateLocalData(this._pristineData);\n                    return $.Deferred().resolve().promise();\n                }\n                return this.read(state);\n            },\n            _mergeState: function (options) {\n                options = DataSource.fn._mergeState.call(this, options);\n                if (options !== undefined) {\n                    this._measures = normalizeMeasures(options.measures);\n                    if (options.columns) {\n                        options.columns = normalizeMembers(options.columns);\n                    } else if (!options.columns) {\n                        this._columns = [];\n                    }\n                    if (options.rows) {\n                        options.rows = normalizeMembers(options.rows);\n                    } else if (!options.rows) {\n                        this._rows = [];\n                    }\n                }\n                return options;\n            },\n            filter: function (val) {\n                if (val === undefined) {\n                    return this._filter;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this._query({\n                    filter: val,\n                    page: 1\n                });\n            },\n            expandColumn: function (path) {\n                this._expandPath(path, 'columns');\n            },\n            expandRow: function (path) {\n                this._expandPath(path, 'rows');\n            },\n            success: function (data) {\n                var originalData;\n                if (this.cubeBuilder) {\n                    originalData = (this.reader.data(data) || []).slice(0);\n                }\n                DataSource.fn.success.call(this, data);\n                if (originalData) {\n                    this._pristineData = originalData;\n                }\n            },\n            _processResult: function (data, axes) {\n                if (this.cubeBuilder) {\n                    var processedData = this.cubeBuilder.process(data, this._requestData);\n                    data = processedData.data;\n                    axes = processedData.axes;\n                }\n                var columnIndexes, rowIndexes;\n                var tuples, resultAxis, measures, axisToSkip;\n                var columnDescriptors = this.columns();\n                var rowDescriptors = this.rows();\n                var hasColumnTuples = axes.columns && axes.columns.tuples;\n                if (!columnDescriptors.length && rowDescriptors.length && hasColumnTuples && (this._rowMeasures().length || !this.measures().length)) {\n                    axes = {\n                        columns: {},\n                        rows: axes.columns\n                    };\n                }\n                if (!columnDescriptors.length && !rowDescriptors.length && this.measuresAxis() === 'rows' && hasColumnTuples) {\n                    axes = {\n                        columns: {},\n                        rows: axes.columns\n                    };\n                }\n                this._axes = {\n                    columns: normalizeAxis(this._axes.columns),\n                    rows: normalizeAxis(this._axes.rows)\n                };\n                axes = {\n                    columns: normalizeAxis(axes.columns),\n                    rows: normalizeAxis(axes.rows)\n                };\n                columnIndexes = this._normalizeTuples(axes.columns.tuples, this._axes.columns.tuples, columnDescriptors, this._columnMeasures());\n                rowIndexes = this._normalizeTuples(axes.rows.tuples, this._axes.rows.tuples, rowDescriptors, this._rowMeasures());\n                if (this._skipNormalize > 0) {\n                    this._skipNormalize -= 1;\n                }\n                if (!this.cubeBuilder) {\n                    data = this._normalizeData({\n                        columnsLength: axes.columns.tuples.length,\n                        rowsLength: axes.rows.tuples.length,\n                        columnIndexes: columnIndexes,\n                        rowIndexes: rowIndexes,\n                        data: data\n                    });\n                }\n                if (this._lastExpanded == 'rows') {\n                    tuples = axes.columns.tuples;\n                    measures = this._columnMeasures();\n                    resultAxis = validateAxis(axes.columns, this._axes.columns, measures);\n                    if (resultAxis) {\n                        axisToSkip = 'columns';\n                        axes.columns = resultAxis;\n                        adjustDataByColumn(tuples, resultAxis.tuples, axes.rows.tuples.length, measures, data);\n                        if (!this.cubeBuilder) {\n                            data = this._normalizeData({\n                                columnsLength: membersCount(axes.columns.tuples, measures),\n                                rowsLength: axes.rows.tuples.length,\n                                data: data\n                            });\n                        }\n                    }\n                } else if (this._lastExpanded == 'columns') {\n                    tuples = axes.rows.tuples;\n                    measures = this._rowMeasures();\n                    resultAxis = validateAxis(axes.rows, this._axes.rows, measures);\n                    if (resultAxis) {\n                        axisToSkip = 'rows';\n                        axes.rows = resultAxis;\n                        adjustDataByRow(tuples, resultAxis.tuples, axes.columns.tuples.length, measures, data);\n                        if (!this.cubeBuilder) {\n                            data = this._normalizeData({\n                                columnsLength: membersCount(axes.rows.tuples, measures),\n                                rowsLength: axes.columns.tuples.length,\n                                data: data\n                            });\n                        }\n                    }\n                }\n                this._lastExpanded = null;\n                var result = this._mergeAxes(axes, data, axisToSkip);\n                this._axes = result.axes;\n                return result.data;\n            },\n            _readData: function (data) {\n                var axes = this.reader.axes(data);\n                var newData = this.reader.data(data);\n                if (this.cubeBuilder) {\n                    this._rawData = newData;\n                }\n                return this._processResult(newData, axes);\n            },\n            _createTuple: function (tuple, measure, buildRoot) {\n                var members = tuple.members;\n                var length = members.length;\n                var root = { members: [] };\n                var levelName, levelNum;\n                var name, parentName;\n                var hasChildren;\n                var hierarchy;\n                var caption;\n                var member;\n                var idx = 0;\n                if (measure) {\n                    length -= 1;\n                }\n                for (; idx < length; idx++) {\n                    member = members[idx];\n                    levelNum = Number(member.levelNum);\n                    name = member.name;\n                    parentName = member.parentName;\n                    caption = member.caption || name;\n                    hasChildren = member.hasChildren;\n                    hierarchy = member.hierarchy;\n                    levelName = member.levelName;\n                    if (buildRoot) {\n                        caption = 'All';\n                        if (levelNum === 0) {\n                            parentName = member.name;\n                        } else {\n                            levelNum -= 1;\n                        }\n                        hasChildren = true;\n                        name = hierarchy = levelName = parentName;\n                    }\n                    root.members.push({\n                        name: name,\n                        children: [],\n                        caption: caption,\n                        levelName: levelName,\n                        levelNum: levelNum.toString(),\n                        hasChildren: hasChildren,\n                        hierarchy: hierarchy,\n                        parentName: !buildRoot ? parentName : ''\n                    });\n                }\n                if (measure) {\n                    root.members.push({\n                        name: measure.name,\n                        children: []\n                    });\n                }\n                return root;\n            },\n            _hasRoot: function (target, source, descriptors) {\n                if (source.length) {\n                    return findExistingTuple(source, target).tuple;\n                }\n                var members = target.members;\n                var member;\n                var descriptor;\n                var isRoot = true;\n                var levelNum;\n                for (var idx = 0, length = members.length; idx < length; idx++) {\n                    member = members[idx];\n                    levelNum = Number(member.levelNum) || 0;\n                    descriptor = descriptors[idx];\n                    if (!(levelNum === 0 || descriptor && member.name === getName(descriptor))) {\n                        isRoot = false;\n                        break;\n                    }\n                }\n                return isRoot;\n            },\n            _mergeAxes: function (sourceAxes, data, axisToSkip) {\n                var columnMeasures = this._columnMeasures();\n                var rowMeasures = this._rowMeasures();\n                var axes = this.axes();\n                var startIndex, tuples;\n                var oldRowsLength = membersCount(axes.rows.tuples, rowMeasures);\n                var newRowsLength = sourceAxes.rows.tuples.length;\n                var oldColumnsLength = membersCount(axes.columns.tuples, columnMeasures);\n                var newColumnsLength = sourceAxes.columns.tuples.length;\n                if (axisToSkip == 'columns') {\n                    newColumnsLength = oldColumnsLength;\n                    tuples = sourceAxes.columns.tuples;\n                } else {\n                    tuples = parseSource(sourceAxes.columns.tuples, columnMeasures);\n                    data = prepareDataOnColumns(tuples, data);\n                }\n                var mergedColumns = mergeTuples(axes.columns.tuples, tuples, columnMeasures);\n                if (axisToSkip == 'rows') {\n                    newRowsLength = membersCount(sourceAxes.rows.tuples, rowMeasures);\n                    tuples = sourceAxes.rows.tuples;\n                } else {\n                    tuples = parseSource(sourceAxes.rows.tuples, rowMeasures);\n                    data = prepareDataOnRows(tuples, data);\n                }\n                var mergedRows = mergeTuples(axes.rows.tuples, tuples, rowMeasures);\n                axes.columns.tuples = mergedColumns.tuples;\n                axes.rows.tuples = mergedRows.tuples;\n                if (oldColumnsLength !== membersCount(axes.columns.tuples, columnMeasures)) {\n                    startIndex = mergedColumns.index + findDataIndex(mergedColumns.parsedRoot, mergedColumns.memberIndex, columnMeasures);\n                    var offset = oldColumnsLength + newColumnsLength;\n                    data = this._mergeColumnData(data, startIndex, newRowsLength, newColumnsLength, offset);\n                } else if (oldRowsLength !== membersCount(axes.rows.tuples, rowMeasures)) {\n                    startIndex = mergedRows.index + findDataIndex(mergedRows.parsedRoot, mergedRows.memberIndex, rowMeasures);\n                    data = this._mergeRowData(data, startIndex, newRowsLength, newColumnsLength);\n                }\n                if (axes.columns.tuples.length === 0 && axes.rows.tuples.length === 0) {\n                    data = [];\n                }\n                return {\n                    axes: axes,\n                    data: data\n                };\n            },\n            _mergeColumnData: function (newData, columnIndex, rowsLength, columnsLength, offset) {\n                var data = this.data().toJSON();\n                var rowIndex, index, drop = 0, toAdd;\n                var columnMeasures = Math.max(this._columnMeasures().length, 1);\n                rowsLength = Math.max(rowsLength, 1);\n                if (data.length > 0) {\n                    drop = columnMeasures;\n                    offset -= columnMeasures;\n                }\n                for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n                    index = columnIndex + rowIndex * offset;\n                    toAdd = newData.splice(0, columnsLength);\n                    toAdd.splice(0, drop);\n                    [].splice.apply(data, [\n                        index,\n                        0\n                    ].concat(toAdd));\n                }\n                return data;\n            },\n            _mergeRowData: function (newData, rowIndex, rowsLength, columnsLength) {\n                var data = this.data().toJSON();\n                var idx, dataIndex, toAdd;\n                var rowMeasures = Math.max(this._rowMeasures().length, 1);\n                columnsLength = Math.max(columnsLength, 1);\n                if (data.length > 0) {\n                    rowsLength -= rowMeasures;\n                    newData.splice(0, columnsLength * rowMeasures);\n                }\n                for (idx = 0; idx < rowsLength; idx++) {\n                    toAdd = newData.splice(0, columnsLength);\n                    dataIndex = rowIndex * columnsLength + idx * columnsLength;\n                    [].splice.apply(data, [\n                        dataIndex,\n                        0\n                    ].concat(toAdd));\n                }\n                return data;\n            },\n            _columnMeasures: function () {\n                var measures = this.measures();\n                var columnMeasures = [];\n                if (this.measuresAxis() === 'columns') {\n                    if (this.columns().length === 0) {\n                        columnMeasures = measures;\n                    } else if (measures.length > 1) {\n                        columnMeasures = measures;\n                    }\n                }\n                return columnMeasures;\n            },\n            _rowMeasures: function () {\n                var measures = this.measures();\n                var rowMeasures = [];\n                if (this.measuresAxis() === 'rows') {\n                    if (this.rows().length === 0) {\n                        rowMeasures = measures;\n                    } else if (measures.length > 1) {\n                        rowMeasures = measures;\n                    }\n                }\n                return rowMeasures;\n            },\n            _updateLocalData: function (data, state) {\n                if (this.cubeBuilder) {\n                    if (state) {\n                        this._requestData = state;\n                    }\n                    data = this._processResult(data);\n                }\n                this._data = this._observe(data);\n                this._ranges = [];\n                this._addRange(this._data);\n                this._total = this._data.length;\n                this._pristineTotal = this._total;\n                this._process(this._data);\n            },\n            data: function (value) {\n                var that = this;\n                if (value !== undefined) {\n                    this._pristineData = value.slice(0);\n                    this._updateLocalData(value, {\n                        columns: this.columns(),\n                        rows: this.rows(),\n                        measures: this.measures()\n                    });\n                } else {\n                    return that._data;\n                }\n            },\n            _normalizeTuples: function (tuples, source, descriptors, measures) {\n                var length = measures.length || 1;\n                var idx = 0;\n                var roots = [];\n                var indexes = {};\n                var measureIdx = 0;\n                var tuple, memberIdx, last;\n                if (!tuples.length) {\n                    return;\n                }\n                if (this._skipNormalize <= 0 && !this._hasRoot(tuples[0], source, descriptors)) {\n                    this._skipNormalize = 0;\n                    for (; idx < length; idx++) {\n                        roots.push(this._createTuple(tuples[0], measures[idx], true));\n                        indexes[idx] = idx;\n                    }\n                    tuples.splice.apply(tuples, [\n                        0,\n                        tuples.length\n                    ].concat(roots).concat(tuples));\n                    idx = length;\n                }\n                if (measures.length) {\n                    last = tuple = tuples[idx];\n                    memberIdx = tuple.members.length - 1;\n                    while (tuple) {\n                        if (measureIdx >= length) {\n                            measureIdx = 0;\n                        }\n                        if (tuple.members[memberIdx].name !== measures[measureIdx].name) {\n                            tuples.splice(idx, 0, this._createTuple(tuple, measures[measureIdx]));\n                            indexes[idx] = idx;\n                        }\n                        idx += 1;\n                        measureIdx += 1;\n                        tuple = tuples[idx];\n                        if (length > measureIdx && (!tuple || tupleName(last, memberIdx - 1) !== tupleName(tuple, memberIdx - 1))) {\n                            for (; measureIdx < length; measureIdx++) {\n                                tuples.splice(idx, 0, this._createTuple(last, measures[measureIdx]));\n                                indexes[idx] = idx;\n                                idx += 1;\n                            }\n                            tuple = tuples[idx];\n                        }\n                        last = tuple;\n                    }\n                }\n                return indexes;\n            },\n            _addMissingDataItems: function (result, metadata) {\n                while (metadata.rowIndexes[parseInt(result.length / metadata.columnsLength, 10)] !== undefined) {\n                    for (var idx = 0; idx < metadata.columnsLength; idx++) {\n                        result = addEmptyDataItem(result);\n                    }\n                }\n                while (metadata.columnIndexes[result.length % metadata.columnsLength] !== undefined) {\n                    result = addEmptyDataItem(result);\n                }\n                return result;\n            },\n            _normalizeOrdinals: function (result, dataItem, metadata) {\n                var lastOrdinal = metadata.lastOrdinal;\n                if (!dataItem) {\n                    return addEmptyDataItem(result);\n                }\n                if (dataItem.ordinal - lastOrdinal > 1) {\n                    lastOrdinal += 1;\n                    while (lastOrdinal < dataItem.ordinal && result.length < metadata.length) {\n                        result = this._addMissingDataItems(addEmptyDataItem(result), metadata);\n                        lastOrdinal += 1;\n                    }\n                }\n                dataItem.ordinal = result.length;\n                result[result.length] = dataItem;\n                return result;\n            },\n            _normalizeData: function (options) {\n                var data = options.data;\n                var dataIdx = 0;\n                var dataItem;\n                var result = [];\n                var lastOrdinal;\n                var length;\n                options.lastOrdinal = 0;\n                options.columnIndexes = options.columnIndexes || {};\n                options.rowIndexes = options.rowIndexes || {};\n                options.columnsLength = options.columnsLength || 1;\n                options.rowsLength = options.rowsLength || 1;\n                options.length = options.columnsLength * options.rowsLength;\n                length = options.length;\n                if (data.length === length) {\n                    return data;\n                }\n                while (result.length < length) {\n                    dataItem = data[dataIdx++];\n                    if (dataItem) {\n                        lastOrdinal = dataItem.ordinal;\n                    }\n                    result = this._normalizeOrdinals(this._addMissingDataItems(result, options), dataItem, options);\n                    options.lastOrdinal = lastOrdinal;\n                }\n                return result;\n            },\n            discover: function (options, converter) {\n                var that = this, transport = that.transport;\n                return $.Deferred(function (deferred) {\n                    transport.discover(extend({\n                        success: function (response) {\n                            response = that.reader.parse(response);\n                            if (that._handleCustomErrors(response)) {\n                                return;\n                            }\n                            if (converter) {\n                                response = converter(response);\n                            }\n                            deferred.resolve(response);\n                        },\n                        error: function (response, status, error) {\n                            deferred.reject(response);\n                            that.error(response, status, error);\n                        }\n                    }, options));\n                }).promise().done(function () {\n                    that.trigger('schemaChange');\n                });\n            },\n            schemaMeasures: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaMeasures',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.measures(response);\n                });\n            },\n            schemaKPIs: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaKPIs',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.kpis(response);\n                });\n            },\n            schemaDimensions: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaDimensions',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.dimensions(response);\n                });\n            },\n            schemaHierarchies: function (dimensionName) {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaHierarchies',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube(),\n                            dimensionUniqueName: dimensionName\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.hierarchies(response);\n                });\n            },\n            schemaLevels: function (hierarchyName) {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaLevels',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube(),\n                            hierarchyUniqueName: hierarchyName\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.levels(response);\n                });\n            },\n            schemaCubes: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaCubes',\n                        restrictions: { catalogName: that.transport.catalog() }\n                    }\n                }, function (response) {\n                    return that.reader.cubes(response);\n                });\n            },\n            schemaCatalogs: function () {\n                var that = this;\n                return that.discover({ data: { command: 'schemaCatalogs' } }, function (response) {\n                    return that.reader.catalogs(response);\n                });\n            },\n            schemaMembers: function (restrictions) {\n                var that = this;\n                var success = function (restrictions) {\n                    return function (response) {\n                        return that.reader.members(response, restrictions);\n                    };\n                }(restrictions);\n                return that.discover({\n                    data: {\n                        command: 'schemaMembers',\n                        restrictions: extend({\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }, restrictions)\n                    }\n                }, success);\n            },\n            _params: function (data) {\n                if (this._clearAxesData) {\n                    this._axes = {};\n                    this._data = this._observe([]);\n                    this._clearAxesData = false;\n                    this.trigger(STATERESET);\n                }\n                var options = DataSource.fn._params.call(this, data);\n                options = extend({\n                    measures: this.measures(),\n                    measuresAxis: this.measuresAxis(),\n                    columns: this.columns(),\n                    rows: this.rows()\n                }, options);\n                if (this.cubeBuilder) {\n                    this._requestData = options;\n                }\n                return options;\n            }\n        });\n        function addEmptyDataItem(result) {\n            result[result.length] = {\n                value: '',\n                fmtValue: '',\n                ordinal: result.length\n            };\n            return result;\n        }\n        function validateAxis(newAxis, axis, measures) {\n            if (newAxis.tuples.length < membersCount(axis.tuples, measures)) {\n                return axis;\n            }\n            return;\n        }\n        function adjustDataByColumn(sourceTuples, targetTuples, rowsLength, measures, data) {\n            var columnIdx, rowIdx, dataIdx;\n            var columnsLength = sourceTuples.length;\n            var targetColumnsLength = membersCount(targetTuples, measures);\n            var measuresLength = measures.length || 1;\n            for (rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n                for (columnIdx = 0; columnIdx < columnsLength; columnIdx++) {\n                    dataIdx = tupleIndex(sourceTuples[columnIdx], targetTuples) * measuresLength;\n                    dataIdx += columnIdx % measuresLength;\n                    data[rowIdx * columnsLength + columnIdx].ordinal = rowIdx * targetColumnsLength + dataIdx;\n                }\n            }\n        }\n        function adjustDataByRow(sourceTuples, targetTuples, columnsLength, measures, data) {\n            var columnIdx, rowIdx, dataIdx;\n            var rowsLength = sourceTuples.length;\n            var measuresLength = measures.length || 1;\n            for (rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n                dataIdx = tupleIndex(sourceTuples[rowIdx], targetTuples);\n                dataIdx *= measuresLength;\n                dataIdx += rowIdx % measuresLength;\n                for (columnIdx = 0; columnIdx < columnsLength; columnIdx++) {\n                    data[rowIdx * columnsLength + columnIdx].ordinal = dataIdx * columnsLength + columnIdx;\n                }\n            }\n        }\n        function tupleIndex(tuple, collection) {\n            return findExistingTuple(collection, tuple).index;\n        }\n        function membersCount(tuples, measures) {\n            if (!tuples.length) {\n                return 0;\n            }\n            var queue = tuples.slice();\n            var current = queue.shift();\n            var result = 1;\n            while (current) {\n                if (current.members) {\n                    [].push.apply(queue, current.members);\n                } else if (current.children) {\n                    if (!current.measure) {\n                        result += current.children.length;\n                    }\n                    [].push.apply(queue, current.children);\n                }\n                current = queue.shift();\n            }\n            if (measures.length) {\n                result = result * measures.length;\n            }\n            return result;\n        }\n        function normalizeAxis(axis) {\n            if (!axis) {\n                axis = { tuples: [] };\n            }\n            if (!axis.tuples) {\n                axis.tuples = [];\n            }\n            return axis;\n        }\n        function findDataIndex(tuple, memberIndex, measures) {\n            if (!tuple) {\n                return 0;\n            }\n            var measuresLength = Math.max(measures.length, 1);\n            var tuples = tuple.members.slice(0, memberIndex);\n            var current = tuples.shift();\n            var counter = measuresLength;\n            while (current) {\n                if (current.name === MEASURES) {\n                    counter += measuresLength - 1;\n                } else if (current.children) {\n                    [].push.apply(tuples, current.children);\n                } else {\n                    counter++;\n                    [].push.apply(tuples, current.members);\n                }\n                current = tuples.shift();\n            }\n            return counter;\n        }\n        function mergeTuples(target, source, measures) {\n            if (!source[0]) {\n                return {\n                    parsedRoot: null,\n                    tuples: target,\n                    memberIndex: 0,\n                    index: 0\n                };\n            }\n            var result = findExistingTuple(target, source[0]);\n            if (!result.tuple) {\n                return {\n                    parsedRoot: null,\n                    tuples: source,\n                    memberIndex: 0,\n                    index: 0\n                };\n            }\n            var targetMembers = result.tuple.members;\n            var sourceMembers = source[0].members;\n            var memberIndex = -1;\n            if (targetMembers.length !== sourceMembers.length) {\n                return {\n                    parsedRoot: null,\n                    tuples: source,\n                    memberIndex: 0,\n                    index: 0\n                };\n            }\n            for (var idx = 0, length = targetMembers.length; idx < length; idx++) {\n                if (!targetMembers[idx].measure && sourceMembers[idx].children[0]) {\n                    if (memberIndex == -1 && sourceMembers[idx].children.length) {\n                        memberIndex = idx;\n                    }\n                    targetMembers[idx].children = sourceMembers[idx].children;\n                }\n            }\n            measures = Math.max(measures.length, 1);\n            return {\n                parsedRoot: result.tuple,\n                index: result.index * measures,\n                memberIndex: memberIndex,\n                tuples: target\n            };\n        }\n        function equalTuples(first, second) {\n            var equal = true;\n            var idx, length;\n            first = first.members;\n            second = second.members;\n            for (idx = 0, length = first.length; idx < length; idx++) {\n                if (first[idx].measure || second[idx].measure) {\n                    continue;\n                }\n                equal = equal && getName(first[idx]) === getName(second[idx]);\n            }\n            return equal;\n        }\n        function findExistingTuple(tuples, toFind) {\n            var idx, length, tuple, found, counter = 0;\n            var memberIndex, membersLength, member;\n            for (idx = 0, length = tuples.length; idx < length; idx++) {\n                tuple = tuples[idx];\n                if (equalTuples(tuple, toFind)) {\n                    return {\n                        tuple: tuple,\n                        index: counter\n                    };\n                }\n                counter++;\n                for (memberIndex = 0, membersLength = tuple.members.length; memberIndex < membersLength; memberIndex++) {\n                    member = tuple.members[memberIndex];\n                    if (member.measure) {\n                        continue;\n                    }\n                    found = findExistingTuple(member.children, toFind);\n                    counter += found.index;\n                    if (found.tuple) {\n                        return {\n                            tuple: found.tuple,\n                            index: counter\n                        };\n                    }\n                }\n            }\n            return { index: counter };\n        }\n        function addMembers(members, map) {\n            var member, i, len, path = '';\n            for (i = 0, len = members.length; i < len; i++) {\n                member = members[i];\n                path += member.name;\n                if (!map[path]) {\n                    map[path] = member;\n                }\n            }\n        }\n        function findParentMember(tuple, map) {\n            var members = tuple.members;\n            var i, len, member, path = '';\n            var parentPath = '';\n            var parentMember;\n            for (i = 0, len = members.length; i < len; i++) {\n                member = members[i];\n                if (parentMember) {\n                    if (map[path + member.name]) {\n                        path += member.name;\n                        parentMember = map[path];\n                        continue;\n                    } else if (map[path + member.parentName]) {\n                        return map[path + member.parentName];\n                    } else if (map[parentPath + member.parentName]) {\n                        return map[parentPath + member.parentName];\n                    } else {\n                        return map[parentPath];\n                    }\n                }\n                path += member.name;\n                parentMember = map[member.parentName];\n                if (!parentMember) {\n                    parentMember = map[path];\n                    if (!parentMember) {\n                        return null;\n                    }\n                }\n                if (parentMember) {\n                    parentPath += parentMember.name;\n                }\n            }\n            return parentMember;\n        }\n        function measurePosition(tuple, measures) {\n            if (measures.length === 0) {\n                return -1;\n            }\n            var measure = measures[0];\n            var members = tuple.members;\n            for (var idx = 0, len = members.length; idx < len; idx++) {\n                if (members[idx].name == measure.name) {\n                    return idx;\n                }\n            }\n        }\n        function normalizeTupleMeasures(tuple, index) {\n            if (index < 0) {\n                return;\n            }\n            var member = {\n                name: MEASURES,\n                measure: true,\n                children: [$.extend({\n                        members: [],\n                        dataIndex: tuple.dataIndex\n                    }, tuple.members[index])]\n            };\n            tuple.members.splice(index, 1, member);\n            tuple.dataIndex = undefined;\n        }\n        function parseSource(tuples, measures) {\n            if (tuples.length < 1) {\n                return [];\n            }\n            var result = [];\n            var map = {};\n            var measureIndex = measurePosition(tuples[0], measures);\n            for (var i = 0; i < tuples.length; i++) {\n                var tuple = tuples[i];\n                tuple.dataIndex = i;\n                normalizeTupleMeasures(tuple, measureIndex);\n                var parentMember = findParentMember(tuple, map);\n                if (parentMember) {\n                    if (measureIndex < 0 || !parentMember.measure) {\n                        parentMember.children.push(tuple);\n                    } else {\n                        parentMember.children.push(tuple.members[measureIndex].children[0]);\n                    }\n                } else {\n                    result.push(tuple);\n                }\n                addMembers(tuple.members, map);\n            }\n            return result;\n        }\n        function prepareDataOnRows(tuples, data) {\n            if (!tuples || !tuples.length) {\n                return data;\n            }\n            var result = [];\n            var indices = buildDataIndices(tuples);\n            var rowsLength = indices.length;\n            var columnsLength = Math.max(data.length / rowsLength, 1);\n            var rowIndex, columnIndex, targetIndex, sourceIndex;\n            var calcIndex;\n            for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n                targetIndex = columnsLength * rowIndex;\n                sourceIndex = columnsLength * indices[rowIndex];\n                for (columnIndex = 0; columnIndex < columnsLength; columnIndex++) {\n                    calcIndex = parseInt(sourceIndex + columnIndex, 10);\n                    result[parseInt(targetIndex + columnIndex, 10)] = data[calcIndex] || {\n                        value: '',\n                        fmtValue: '',\n                        ordinal: calcIndex\n                    };\n                }\n            }\n            return result;\n        }\n        function prepareDataOnColumns(tuples, data) {\n            if (!tuples || !tuples.length) {\n                return data;\n            }\n            var result = [];\n            var indices = buildDataIndices(tuples);\n            var columnsLength = indices.length;\n            var rowsLength = Math.max(data.length / columnsLength, 1);\n            var columnIndex, rowIndex, dataIndex, calcIndex;\n            for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n                dataIndex = columnsLength * rowIndex;\n                for (columnIndex = 0; columnIndex < columnsLength; columnIndex++) {\n                    calcIndex = indices[columnIndex] + dataIndex;\n                    result[dataIndex + columnIndex] = data[calcIndex] || {\n                        value: '',\n                        fmtValue: '',\n                        ordinal: calcIndex\n                    };\n                }\n            }\n            return result;\n        }\n        function buildDataIndices(tuples) {\n            tuples = tuples.slice();\n            var result = [];\n            var tuple = tuples.shift();\n            var idx, length, spliceIndex, children, member;\n            while (tuple) {\n                if (tuple.dataIndex !== undefined) {\n                    result.push(tuple.dataIndex);\n                }\n                spliceIndex = 0;\n                for (idx = 0, length = tuple.members.length; idx < length; idx++) {\n                    member = tuple.members[idx];\n                    children = member.children;\n                    if (member.measure) {\n                        [].splice.apply(tuples, [\n                            0,\n                            0\n                        ].concat(children));\n                    } else {\n                        [].splice.apply(tuples, [\n                            spliceIndex,\n                            0\n                        ].concat(children));\n                    }\n                    spliceIndex += children.length;\n                }\n                tuple = tuples.shift();\n            }\n            return result;\n        }\n        PivotDataSource.create = function (options) {\n            options = options && options.push ? { data: options } : options;\n            var dataSource = options || {}, data = dataSource.data;\n            dataSource.data = data;\n            if (!(dataSource instanceof PivotDataSource) && dataSource instanceof kendo.data.DataSource) {\n                throw new Error('Incorrect DataSource type. Only PivotDataSource instances are supported');\n            }\n            return dataSource instanceof PivotDataSource ? dataSource : new PivotDataSource(dataSource);\n        };\n        function baseHierarchyPath(memberName) {\n            var parts = memberName.split('.');\n            if (parts.length > 2) {\n                return parts[0] + '.' + parts[1];\n            }\n            return memberName;\n        }\n        function expandMemberDescriptor(names, sort) {\n            var idx = names.length - 1;\n            var name = names[idx];\n            var sortDescriptor;\n            sortDescriptor = sortDescriptorForMember(sort, name);\n            if (sortDescriptor && sortDescriptor.dir) {\n                name = 'ORDER(' + name + '.Children,' + sortDescriptor.field + '.CurrentMember.MEMBER_CAPTION,' + sortDescriptor.dir + ')';\n            } else {\n                name += '.Children';\n            }\n            names[idx] = name;\n            return names;\n        }\n        function sortDescriptorForMember(sort, member) {\n            for (var idx = 0, length = sort.length; idx < length; idx++) {\n                if (member.indexOf(sort[idx].field) === 0) {\n                    return sort[idx];\n                }\n            }\n            return null;\n        }\n        function crossJoin(names) {\n            var result = 'CROSSJOIN({';\n            var r;\n            if (names.length > 2) {\n                r = names.pop();\n                result += crossJoin(names);\n            } else {\n                result += names.shift();\n                r = names.pop();\n            }\n            result += '},{';\n            result += r;\n            result += '})';\n            return result;\n        }\n        function crossJoinCommand(members, measures) {\n            var tmp = members.slice(0);\n            if (measures.length > 1) {\n                tmp.push('{' + measureNames(measures).join(',') + '}');\n            }\n            return crossJoin(tmp);\n        }\n        function measureNames(measures) {\n            var idx = 0;\n            var length = measures.length;\n            var result = [];\n            var measure;\n            for (; idx < length; idx++) {\n                measure = measures[idx];\n                result.push(measure.name !== undefined ? measure.name : measure);\n            }\n            return result;\n        }\n        function getName(name) {\n            name = name.name || name;\n            if (toString.call(name) === '[object Array]') {\n                name = name[name.length - 1];\n            }\n            return name;\n        }\n        function getRootNames(members) {\n            var length = members.length;\n            var names = [];\n            var idx = 0;\n            for (; idx < length; idx++) {\n                names.push(members[idx].name[0]);\n            }\n            return names;\n        }\n        function mapNames(names, rootNames) {\n            var name;\n            var rootName;\n            var j;\n            var idx = 0;\n            var length = names.length;\n            var rootLength = rootNames.length;\n            rootNames = rootNames.slice(0);\n            for (; idx < length; idx++) {\n                name = names[idx];\n                for (j = 0; j < rootLength; j++) {\n                    rootName = baseHierarchyPath(rootNames[j]);\n                    if (name.indexOf(rootName) !== -1) {\n                        rootNames[j] = name;\n                        break;\n                    }\n                }\n            }\n            return {\n                names: rootNames,\n                expandedIdx: j,\n                uniquePath: rootNames.slice(0, j + 1).join('')\n            };\n        }\n        function parseDescriptors(members) {\n            var expanded = [];\n            var child = [];\n            var root = [];\n            var member;\n            var j, l;\n            var idx = 0;\n            var length = members.length;\n            var name;\n            var hierarchyName;\n            var found;\n            for (; idx < length; idx++) {\n                member = members[idx];\n                name = member.name;\n                found = false;\n                if (toString.call(name) !== '[object Array]') {\n                    member.name = name = [name];\n                }\n                if (name.length > 1) {\n                    child.push(member);\n                } else {\n                    hierarchyName = baseHierarchyPath(name[0]);\n                    for (j = 0, l = root.length; j < l; j++) {\n                        if (root[j].name[0].indexOf(hierarchyName) === 0) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        root.push(member);\n                    }\n                    if (member.expand) {\n                        expanded.push(member);\n                    }\n                }\n            }\n            expanded = expanded.concat(child);\n            return {\n                root: root,\n                expanded: expanded\n            };\n        }\n        function serializeMembers(members, measures, sort) {\n            var command = '';\n            members = members || [];\n            var expanded = parseDescriptors(members);\n            var root = expanded.root;\n            var rootNames = getRootNames(root);\n            var crossJoinCommands = [];\n            expanded = expanded.expanded;\n            var length = expanded.length;\n            var idx = 0;\n            var memberName;\n            var names = [];\n            if (rootNames.length > 1 || measures.length > 1) {\n                crossJoinCommands.push(crossJoinCommand(rootNames, measures));\n                for (; idx < length; idx++) {\n                    memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                    names = mapNames(memberName, rootNames).names;\n                    crossJoinCommands.push(crossJoinCommand(names, measures));\n                }\n                command += crossJoinCommands.join(',');\n            } else {\n                for (; idx < length; idx++) {\n                    memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                    names.push(memberName[0]);\n                }\n                command += rootNames.concat(names).join(',');\n            }\n            return command;\n        }\n        var filterFunctionFormats = {\n            contains: ', InStr({0}.CurrentMember.MEMBER_CAPTION,\"{1}\") > 0',\n            doesnotcontain: ', InStr({0}.CurrentMember.MEMBER_CAPTION,\"{1}\")',\n            startswith: ', Left({0}.CurrentMember.MEMBER_CAPTION,Len(\"{1}\"))=\"{1}\"',\n            endswith: ', Right({0}.CurrentMember.MEMBER_CAPTION,Len(\"{1}\"))=\"{1}\"',\n            eq: ', {0}.CurrentMember.MEMBER_CAPTION = \"{1}\"',\n            neq: ', {0}.CurrentMember.MEMBER_CAPTION = \"{1}\"'\n        };\n        function serializeExpression(expression) {\n            var command = '';\n            var value = expression.value;\n            var field = expression.field;\n            var operator = expression.operator;\n            if (operator == 'in') {\n                command += '{';\n                command += value;\n                command += '}';\n            } else {\n                command += operator == 'neq' || operator == 'doesnotcontain' ? '-' : '';\n                command += 'Filter(';\n                command += field + '.MEMBERS';\n                command += kendo.format(filterFunctionFormats[operator], field, value);\n                command += ')';\n            }\n            return command;\n        }\n        function serializeFilters(filter, cube) {\n            var command = '', current;\n            var filters = filter.filters;\n            var length = filters.length;\n            var idx;\n            for (idx = length - 1; idx >= 0; idx--) {\n                current = 'SELECT (';\n                current += serializeExpression(filters[idx]);\n                current += ') ON 0';\n                if (idx == length - 1) {\n                    current += ' FROM [' + cube + ']';\n                    command = current;\n                } else {\n                    command = current + ' FROM ( ' + command + ' )';\n                }\n            }\n            return command;\n        }\n        function serializeOptions(parentTagName, options, capitalize) {\n            var result = '';\n            if (options) {\n                result += '<' + parentTagName + '>';\n                var value;\n                for (var key in options) {\n                    value = options[key];\n                    if (capitalize) {\n                        key = key.replace(/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g, '$1_').toUpperCase().replace(/_$/, '');\n                    }\n                    result += '<' + key + '>' + value + '</' + key + '>';\n                }\n                result += '</' + parentTagName + '>';\n            } else {\n                result += '<' + parentTagName + '/>';\n            }\n            return result;\n        }\n        var xmlaDiscoverCommands = {\n            schemaCubes: 'MDSCHEMA_CUBES',\n            schemaCatalogs: 'DBSCHEMA_CATALOGS',\n            schemaMeasures: 'MDSCHEMA_MEASURES',\n            schemaDimensions: 'MDSCHEMA_DIMENSIONS',\n            schemaHierarchies: 'MDSCHEMA_HIERARCHIES',\n            schemaLevels: 'MDSCHEMA_LEVELS',\n            schemaMembers: 'MDSCHEMA_MEMBERS',\n            schemaKPIs: 'MDSCHEMA_KPIS'\n        };\n        var convertersMap = {\n            read: function (options) {\n                var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>';\n                command += 'SELECT NON EMPTY {';\n                var columns = options.columns || [];\n                var rows = options.rows || [];\n                var measures = options.measures || [];\n                var measuresRowAxis = options.measuresAxis === 'rows';\n                var sort = options.sort || [];\n                if (!columns.length && rows.length && (!measures.length || measures.length && measuresRowAxis)) {\n                    columns = rows;\n                    rows = [];\n                    measuresRowAxis = false;\n                }\n                if (!columns.length && !rows.length) {\n                    measuresRowAxis = false;\n                }\n                if (columns.length) {\n                    command += serializeMembers(columns, !measuresRowAxis ? measures : [], sort);\n                } else if (measures.length && !measuresRowAxis) {\n                    command += measureNames(measures).join(',');\n                }\n                command += '} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON COLUMNS';\n                if (rows.length || measuresRowAxis && measures.length > 1) {\n                    command += ', NON EMPTY {';\n                    if (rows.length) {\n                        command += serializeMembers(rows, measuresRowAxis ? measures : [], sort);\n                    } else {\n                        command += measureNames(measures).join(',');\n                    }\n                    command += '} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON ROWS';\n                }\n                if (options.filter) {\n                    command += ' FROM ';\n                    command += '(';\n                    command += serializeFilters(options.filter, options.connection.cube);\n                    command += ')';\n                } else {\n                    command += ' FROM [' + options.connection.cube + ']';\n                }\n                if (measures.length == 1 && columns.length) {\n                    command += ' WHERE (' + measureNames(measures).join(',') + ')';\n                }\n                command += '</Statement></Command><Properties><PropertyList><Catalog>' + options.connection.catalog + '</Catalog><Format>Multidimensional</Format></PropertyList></Properties></Execute></Body></Envelope>';\n                return command.replace(/\\&/g, '&amp;');\n            },\n            discover: function (options) {\n                options = options || {};\n                var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\">';\n                command += '<RequestType>' + (xmlaDiscoverCommands[options.command] || options.command) + '</RequestType>';\n                command += '<Restrictions>' + serializeOptions('RestrictionList', options.restrictions, true) + '</Restrictions>';\n                if (options.connection && options.connection.catalog) {\n                    options.properties = $.extend({}, { Catalog: options.connection.catalog }, options.properties);\n                }\n                command += '<Properties>' + serializeOptions('PropertyList', options.properties) + '</Properties>';\n                command += '</Discover></Body></Envelope>';\n                return command;\n            }\n        };\n        var XmlaTransport = kendo.data.RemoteTransport.extend({\n            init: function (options) {\n                var originalOptions = options;\n                options = this.options = extend(true, {}, this.options, options);\n                kendo.data.RemoteTransport.call(this, options);\n                if (isFunction(originalOptions.discover)) {\n                    this.discover = originalOptions.discover;\n                } else if (typeof originalOptions.discover === 'string') {\n                    this.options.discover = { url: originalOptions.discover };\n                } else if (!originalOptions.discover) {\n                    this.options.discover = this.options.read;\n                }\n            },\n            setup: function (options, type) {\n                options.data = options.data || {};\n                $.extend(true, options.data, { connection: this.options.connection });\n                return kendo.data.RemoteTransport.fn.setup.call(this, options, type);\n            },\n            options: {\n                read: {\n                    dataType: 'text',\n                    contentType: 'text/xml',\n                    type: 'POST'\n                },\n                discover: {\n                    dataType: 'text',\n                    contentType: 'text/xml',\n                    type: 'POST'\n                },\n                parameterMap: function (options, type) {\n                    return convertersMap[type](options, type);\n                }\n            },\n            discover: function (options) {\n                return $.ajax(this.setup(options, 'discover'));\n            }\n        });\n        function asArray(object) {\n            if (object == null) {\n                return [];\n            }\n            var type = toString.call(object);\n            if (type !== '[object Array]') {\n                return [object];\n            }\n            return object;\n        }\n        function translateAxis(axis) {\n            var result = { tuples: [] };\n            var tuples = asArray(kendo.getter('Tuples.Tuple', true)(axis));\n            var captionGetter = kendo.getter('Caption[\\'#text\\']');\n            var unameGetter = kendo.getter('UName[\\'#text\\']');\n            var levelNameGetter = kendo.getter('LName[\\'#text\\']');\n            var levelNumGetter = kendo.getter('LNum[\\'#text\\']');\n            var childrenGetter = kendo.getter('CHILDREN_CARDINALITY[\\'#text\\']', true);\n            var hierarchyGetter = kendo.getter('[\\'@Hierarchy\\']');\n            var parentNameGetter = kendo.getter('PARENT_UNIQUE_NAME[\\'#text\\']', true);\n            for (var idx = 0; idx < tuples.length; idx++) {\n                var members = [];\n                var member = asArray(tuples[idx].Member);\n                for (var memberIdx = 0; memberIdx < member.length; memberIdx++) {\n                    members.push({\n                        children: [],\n                        caption: captionGetter(member[memberIdx]),\n                        name: unameGetter(member[memberIdx]),\n                        levelName: levelNameGetter(member[memberIdx]),\n                        levelNum: levelNumGetter(member[memberIdx]),\n                        hasChildren: parseInt(childrenGetter(member[memberIdx]), 10) > 0,\n                        parentName: parentNameGetter(member[memberIdx]),\n                        hierarchy: hierarchyGetter(member[memberIdx])\n                    });\n                }\n                result.tuples.push({ members: members });\n            }\n            return result;\n        }\n        var schemaDataReaderMap = {\n            cubes: {\n                name: kendo.getter('CUBE_NAME[\\'#text\\']', true),\n                caption: kendo.getter('CUBE_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                type: kendo.getter('CUBE_TYPE[\\'#text\\']', true)\n            },\n            catalogs: {\n                name: kendo.getter('CATALOG_NAME[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true)\n            },\n            measures: {\n                name: kendo.getter('MEASURE_NAME[\\'#text\\']', true),\n                caption: kendo.getter('MEASURE_CAPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('MEASURE_UNIQUE_NAME[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                aggregator: kendo.getter('MEASURE_AGGREGATOR[\\'#text\\']', true),\n                groupName: kendo.getter('MEASUREGROUP_NAME[\\'#text\\']', true),\n                displayFolder: kendo.getter('MEASURE_DISPLAY_FOLDER[\\'#text\\']', true),\n                defaultFormat: kendo.getter('DEFAULT_FORMAT_STRING[\\'#text\\']', true)\n            },\n            kpis: {\n                name: kendo.getter('KPI_NAME[\\'#text\\']', true),\n                caption: kendo.getter('KPI_CAPTION[\\'#text\\']', true),\n                value: kendo.getter('KPI_VALUE[\\'#text\\']', true),\n                goal: kendo.getter('KPI_GOAL[\\'#text\\']', true),\n                status: kendo.getter('KPI_STATUS[\\'#text\\']', true),\n                trend: kendo.getter('KPI_TREND[\\'#text\\']', true),\n                statusGraphic: kendo.getter('KPI_STATUS_GRAPHIC[\\'#text\\']', true),\n                trendGraphic: kendo.getter('KPI_TREND_GRAPHIC[\\'#text\\']', true),\n                description: kendo.getter('KPI_DESCRIPTION[\\'#text\\']', true),\n                groupName: kendo.getter('MEASUREGROUP_NAME[\\'#text\\']', true)\n            },\n            dimensions: {\n                name: kendo.getter('DIMENSION_NAME[\\'#text\\']', true),\n                caption: kendo.getter('DIMENSION_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                defaultHierarchy: kendo.getter('DEFAULT_HIERARCHY[\\'#text\\']', true),\n                type: kendo.getter('DIMENSION_TYPE[\\'#text\\']', true)\n            },\n            hierarchies: {\n                name: kendo.getter('HIERARCHY_NAME[\\'#text\\']', true),\n                caption: kendo.getter('HIERARCHY_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('HIERARCHY_UNIQUE_NAME[\\'#text\\']', true),\n                dimensionUniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                displayFolder: kendo.getter('HIERARCHY_DISPLAY_FOLDER[\\'#text\\']', true),\n                origin: kendo.getter('HIERARCHY_ORIGIN[\\'#text\\']', true),\n                defaultMember: kendo.getter('DEFAULT_MEMBER[\\'#text\\']', true)\n            },\n            levels: {\n                name: kendo.getter('LEVEL_NAME[\\'#text\\']', true),\n                caption: kendo.getter('LEVEL_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('LEVEL_UNIQUE_NAME[\\'#text\\']', true),\n                dimensionUniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                displayFolder: kendo.getter('LEVEL_DISPLAY_FOLDER[\\'#text\\']', true),\n                orderingProperty: kendo.getter('LEVEL_ORDERING_PROPERTY[\\'#text\\']', true),\n                origin: kendo.getter('LEVEL_ORIGIN[\\'#text\\']', true),\n                hierarchyUniqueName: kendo.getter('HIERARCHY_UNIQUE_NAME[\\'#text\\']', true)\n            },\n            members: {\n                name: kendo.getter('MEMBER_NAME[\\'#text\\']', true),\n                caption: kendo.getter('MEMBER_CAPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('MEMBER_UNIQUE_NAME[\\'#text\\']', true),\n                dimensionUniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                hierarchyUniqueName: kendo.getter('HIERARCHY_UNIQUE_NAME[\\'#text\\']', true),\n                levelUniqueName: kendo.getter('LEVEL_UNIQUE_NAME[\\'#text\\']', true),\n                childrenCardinality: kendo.getter('CHILDREN_CARDINALITY[\\'#text\\']', true)\n            }\n        };\n        var xmlaReaderMethods = [\n            'axes',\n            'catalogs',\n            'cubes',\n            'dimensions',\n            'hierarchies',\n            'levels',\n            'measures'\n        ];\n        var XmlaDataReader = kendo.data.XmlDataReader.extend({\n            init: function (options) {\n                kendo.data.XmlDataReader.call(this, options);\n                this._extend(options);\n            },\n            _extend: function (options) {\n                var idx = 0;\n                var length = xmlaReaderMethods.length;\n                var methodName;\n                var option;\n                for (; idx < length; idx++) {\n                    methodName = xmlaReaderMethods[idx];\n                    option = options[methodName];\n                    if (option && option !== identity) {\n                        this[methodName] = option;\n                    }\n                }\n            },\n            parse: function (xml) {\n                var result = kendo.data.XmlDataReader.fn.parse(xml.replace(/<(\\/?)(\\w|-)+:/g, '<$1'));\n                return kendo.getter('[\\'Envelope\\'][\\'Body\\']', true)(result);\n            },\n            errors: function (root) {\n                var fault = kendo.getter('[\\'Fault\\']', true)(root);\n                if (fault) {\n                    return [{\n                            faultstring: kendo.getter('faultstring[\\'#text\\']', true)(fault),\n                            faultcode: kendo.getter('faultcode[\\'#text\\']', true)(fault)\n                        }];\n                }\n                return null;\n            },\n            axes: function (root) {\n                root = kendo.getter('ExecuteResponse[\"return\"].root', true)(root);\n                var axes = asArray(kendo.getter('Axes.Axis', true)(root));\n                var axis;\n                var result = {\n                    columns: {},\n                    rows: {}\n                };\n                for (var idx = 0; idx < axes.length; idx++) {\n                    axis = axes[idx];\n                    if (axis['@name'].toLowerCase() !== 'sliceraxis') {\n                        if (!result.columns.tuples) {\n                            result.columns = translateAxis(axis);\n                        } else {\n                            result.rows = translateAxis(axis);\n                        }\n                    }\n                }\n                return result;\n            },\n            data: function (root) {\n                root = kendo.getter('ExecuteResponse[\"return\"].root', true)(root);\n                var cells = asArray(kendo.getter('CellData.Cell', true)(root));\n                var result = [];\n                var ordinalGetter = kendo.getter('[\\'@CellOrdinal\\']');\n                var valueGetter = kendo.getter('Value[\\'#text\\']');\n                var fmtValueGetter = kendo.getter('FmtValue[\\'#text\\']');\n                for (var idx = 0; idx < cells.length; idx++) {\n                    result.push({\n                        value: valueGetter(cells[idx]),\n                        fmtValue: fmtValueGetter(cells[idx]),\n                        ordinal: parseInt(ordinalGetter(cells[idx]), 10)\n                    });\n                }\n                return result;\n            },\n            _mapSchema: function (root, getters) {\n                root = kendo.getter('DiscoverResponse[\"return\"].root', true)(root);\n                var rows = asArray(kendo.getter('row', true)(root));\n                var result = [];\n                for (var idx = 0; idx < rows.length; idx++) {\n                    var obj = {};\n                    for (var key in getters) {\n                        obj[key] = getters[key](rows[idx]);\n                    }\n                    result.push(obj);\n                }\n                return result;\n            },\n            measures: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.measures);\n            },\n            kpis: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.kpis);\n            },\n            hierarchies: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.hierarchies);\n            },\n            levels: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.levels);\n            },\n            dimensions: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.dimensions);\n            },\n            cubes: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.cubes);\n            },\n            catalogs: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.catalogs);\n            },\n            members: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.members);\n            }\n        });\n        extend(true, kendo.data, {\n            PivotDataSource: PivotDataSource,\n            XmlaTransport: XmlaTransport,\n            XmlaDataReader: XmlaDataReader,\n            PivotCubeBuilder: PivotCubeBuilder,\n            transports: { xmla: XmlaTransport },\n            readers: { xmla: XmlaDataReader }\n        });\n        var sortExpr = function (expressions, name) {\n            if (!expressions) {\n                return null;\n            }\n            for (var idx = 0, length = expressions.length; idx < length; idx++) {\n                if (expressions[idx].field === name) {\n                    return expressions[idx];\n                }\n            }\n            return null;\n        };\n        var removeExpr = function (expressions, name) {\n            var result = [];\n            for (var idx = 0, length = expressions.length; idx < length; idx++) {\n                if (expressions[idx].field !== name) {\n                    result.push(expressions[idx]);\n                }\n            }\n            return result;\n        };\n        kendo.ui.PivotSettingTarget = Widget.extend({\n            init: function (element, options) {\n                var that = this;\n                Widget.fn.init.call(that, element, options);\n                that.element.addClass('k-pivot-setting');\n                that.dataSource = kendo.data.PivotDataSource.create(options.dataSource);\n                that._refreshHandler = $.proxy(that.refresh, that);\n                that.dataSource.first(CHANGE, that._refreshHandler);\n                if (!options.template) {\n                    that.options.template = '<div data-' + kendo.ns + 'name=\"${data.name || data}\">${data.name || data}' + (that.options.enabled ? '<a class=\"k-button k-button-icon k-bare\"><span class=\"k-icon k-i-close k-setting-delete\"></span></a>' : '') + '</div>';\n                }\n                that.template = kendo.template(that.options.template);\n                that.emptyTemplate = kendo.template(that.options.emptyTemplate);\n                that._sortable();\n                that.element.on('click' + NS, '.k-button,.k-item', function (e) {\n                    var target = $(e.target);\n                    var name = target.closest('[' + kendo.attr('name') + ']').attr(kendo.attr('name'));\n                    if (!name) {\n                        return;\n                    }\n                    if (target.hasClass('k-i-close')) {\n                        that.remove(name);\n                    } else if (that.options.sortable && target[0] === e.currentTarget) {\n                        that.sort({\n                            field: name,\n                            dir: target.find('.k-i-sort-asc-sm')[0] ? 'desc' : 'asc'\n                        });\n                    }\n                });\n                if (options.filterable || options.sortable) {\n                    that.fieldMenu = new ui.PivotFieldMenu(that.element, {\n                        messages: that.options.messages.fieldMenu,\n                        filter: '.k-setting-fieldmenu',\n                        filterable: options.filterable,\n                        sortable: options.sortable,\n                        dataSource: that.dataSource\n                    });\n                }\n                that.refresh();\n            },\n            options: {\n                name: 'PivotSettingTarget',\n                template: null,\n                filterable: false,\n                sortable: false,\n                emptyTemplate: '<div class=\\'k-empty\\'>${data}</div>',\n                setting: 'columns',\n                enabled: true,\n                messages: { empty: 'Drop Fields Here' }\n            },\n            setDataSource: function (dataSource) {\n                this.dataSource.unbind(CHANGE, this._refreshHandler);\n                this.dataSource = this.options.dataSource = dataSource;\n                if (this.fieldMenu) {\n                    this.fieldMenu.setDataSource(dataSource);\n                }\n                dataSource.first(CHANGE, this._refreshHandler);\n                this.refresh();\n            },\n            _sortable: function () {\n                var that = this;\n                if (that.options.enabled) {\n                    this.sortable = this.element.kendoSortable({\n                        connectWith: this.options.connectWith,\n                        hint: that.options.hint,\n                        cursor: 'move',\n                        start: function (e) {\n                            e.item.focus().blur();\n                        },\n                        change: function (e) {\n                            var name = e.item.attr(kendo.attr('name'));\n                            if (e.action == 'receive') {\n                                that.add(name);\n                            } else if (e.action == 'remove') {\n                                that.remove(name);\n                            } else if (e.action == 'sort') {\n                                that.move(name, e.newIndex);\n                            }\n                        }\n                    }).data('kendoSortable');\n                }\n            },\n            _indexOf: function (name, items) {\n                var idx, length, index = -1;\n                for (idx = 0, length = items.length; idx < length; idx++) {\n                    if (getName(items[idx]) === name) {\n                        index = idx;\n                        break;\n                    }\n                }\n                return index;\n            },\n            _isKPI: function (data) {\n                return data.type === 'kpi' || data.measure;\n            },\n            validate: function (data) {\n                var isMeasure = data.type == 2 || 'aggregator' in data || this._isKPI(data);\n                if (isMeasure) {\n                    return this.options.setting === 'measures';\n                }\n                if (this.options.setting === 'measures') {\n                    return isMeasure;\n                }\n                var items = this.dataSource[this.options.setting]();\n                var name = data.defaultHierarchy || data.uniqueName;\n                if (this._indexOf(name, items) > -1) {\n                    return false;\n                }\n                items = this.dataSource[this.options.setting === 'columns' ? 'rows' : 'columns']();\n                if (this._indexOf(name, items) > -1) {\n                    return false;\n                }\n                return true;\n            },\n            add: function (name) {\n                var items = this.dataSource[this.options.setting]();\n                var i, l;\n                name = $.isArray(name) ? name.slice(0) : [name];\n                for (i = 0, l = name.length; i < l; i++) {\n                    if (this._indexOf(name[i], items) !== -1) {\n                        name.splice(i, 1);\n                        i -= 1;\n                        l -= 1;\n                    }\n                }\n                if (name.length) {\n                    items = items.concat(name);\n                    this.dataSource[this.options.setting](items);\n                }\n            },\n            move: function (name, index) {\n                var items = this.dataSource[this.options.setting]();\n                var idx = this._indexOf(name, items);\n                if (idx > -1) {\n                    name = items.splice(idx, 1)[0];\n                    items.splice(index, 0, name);\n                    this.dataSource[this.options.setting](items);\n                }\n            },\n            remove: function (name) {\n                var items = this.dataSource[this.options.setting]();\n                var idx = this._indexOf(name, items);\n                var sortExpressions = this.dataSource.sort();\n                var filter = this.dataSource.filter();\n                if (idx > -1) {\n                    if (filter) {\n                        filter.filters = removeExpr(filter.filters, name);\n                        this.dataSource._filter.filters = filter.filters;\n                        if (!filter.filters.length) {\n                            this.dataSource._filter = null;\n                        }\n                    }\n                    if (sortExpressions) {\n                        sortExpressions = removeExpr(sortExpressions, name);\n                        this.dataSource._sort = sortExpressions;\n                    }\n                    items.splice(idx, 1);\n                    this.dataSource[this.options.setting](items);\n                }\n            },\n            sort: function (expr) {\n                var sortable = this.options.sortable;\n                var allowUnsort = sortable === true || sortable.allowUnsort;\n                var skipExpr = allowUnsort && expr.dir === 'asc';\n                var expressions = this.dataSource.sort() || [];\n                var result = removeExpr(expressions, expr.field);\n                if (skipExpr && expressions.length !== result.length) {\n                    expr = null;\n                }\n                if (expr) {\n                    result.push(expr);\n                }\n                this.dataSource.sort(result);\n            },\n            refresh: function () {\n                var html = '';\n                var items = this.dataSource[this.options.setting]();\n                var length = items.length;\n                var idx = 0;\n                var item;\n                if (length) {\n                    for (; idx < length; idx++) {\n                        item = items[idx];\n                        item = item.name === undefined ? { name: item } : item;\n                        html += this.template(extend({ sortIcon: this._sortIcon(item.name) }, item));\n                    }\n                } else {\n                    html = this.emptyTemplate(this.options.messages.empty);\n                }\n                this.element.html(html);\n            },\n            destroy: function () {\n                Widget.fn.destroy.call(this);\n                this.dataSource.unbind(CHANGE, this._refreshHandler);\n                this.element.off(NS);\n                if (this.sortable) {\n                    this.sortable.destroy();\n                }\n                if (this.fieldMenu) {\n                    this.fieldMenu.destroy();\n                }\n                this.element = null;\n                this._refreshHandler = null;\n            },\n            _sortIcon: function (name) {\n                var expressions = this.dataSource.sort();\n                var expr = sortExpr(expressions, getName(name));\n                var icon = '';\n                if (expr) {\n                    icon = 'k-i-sort-' + expr.dir;\n                }\n                return icon;\n            }\n        });\n        var PivotGrid = Widget.extend({\n            init: function (element, options) {\n                var that = this;\n                var columnBuilder;\n                var rowBuilder;\n                Widget.fn.init.call(that, element, options);\n                that._dataSource();\n                that._bindConfigurator();\n                that._wrapper();\n                that._createLayout();\n                that._columnBuilder = columnBuilder = new ColumnBuilder();\n                that._rowBuilder = rowBuilder = new RowBuilder();\n                that._contentBuilder = new ContentBuilder();\n                that._templates();\n                that.columnsHeader.add(that.rowsHeader).on('click', 'span.k-icon', function () {\n                    var button = $(this);\n                    var builder = columnBuilder;\n                    var action = 'expandColumn';\n                    var eventName;\n                    var path = button.attr(kendo.attr('path'));\n                    var eventArgs = {\n                        axis: 'columns',\n                        path: $.parseJSON(path)\n                    };\n                    if (button.parent().is('td')) {\n                        builder = rowBuilder;\n                        action = 'expandRow';\n                        eventArgs.axis = 'rows';\n                    }\n                    var expanded = button.hasClass(STATE_EXPANDED);\n                    var metadata = builder.metadata[path];\n                    var request = metadata.expanded === undefined;\n                    eventName = expanded ? COLLAPSEMEMBER : EXPANDMEMBER;\n                    eventArgs.childrenLoaded = metadata.maxChildren > metadata.children;\n                    if (that.trigger(eventName, eventArgs)) {\n                        return;\n                    }\n                    builder.metadata[path].expanded = !expanded;\n                    button.toggleClass(STATE_EXPANDED, !expanded).toggleClass(STATE_COLLAPSED, expanded);\n                    if (!expanded && request) {\n                        that.dataSource[action](eventArgs.path);\n                    } else {\n                        that.refresh();\n                    }\n                });\n                that._scrollable();\n                if (that.options.autoBind) {\n                    that.dataSource.fetch();\n                }\n                kendo.notify(that);\n            },\n            events: [\n                DATABINDING,\n                DATABOUND,\n                EXPANDMEMBER,\n                COLLAPSEMEMBER\n            ],\n            options: {\n                name: 'PivotGrid',\n                autoBind: true,\n                reorderable: true,\n                filterable: false,\n                sortable: false,\n                height: null,\n                columnWidth: 100,\n                configurator: '',\n                columnHeaderTemplate: null,\n                rowHeaderTemplate: null,\n                dataCellTemplate: null,\n                kpiStatusTemplate: null,\n                kpiTrendTemplate: null,\n                messages: {\n                    measureFields: 'Drop Data Fields Here',\n                    columnFields: 'Drop Column Fields Here',\n                    rowFields: 'Drop Rows Fields Here'\n                }\n            },\n            _templates: function () {\n                var columnTemplate = this.options.columnHeaderTemplate;\n                var rowTemplate = this.options.rowHeaderTemplate;\n                var dataTemplate = this.options.dataCellTemplate;\n                var kpiStatusTemplate = this.options.kpiStatusTemplate;\n                var kpiTrendTemplate = this.options.kpiTrendTemplate;\n                this._columnBuilder.template = kendo.template(columnTemplate || HEADER_TEMPLATE, { useWithBlock: !!columnTemplate });\n                this._contentBuilder.dataTemplate = kendo.template(dataTemplate || DATACELL_TEMPLATE, { useWithBlock: !!dataTemplate });\n                this._contentBuilder.kpiStatusTemplate = kendo.template(kpiStatusTemplate || KPISTATUS_TEMPLATE, { useWithBlock: !!kpiStatusTemplate });\n                this._contentBuilder.kpiTrendTemplate = kendo.template(kpiTrendTemplate || KPITREND_TEMPLATE, { useWithBlock: !!kpiTrendTemplate });\n                this._rowBuilder.template = kendo.template(rowTemplate || HEADER_TEMPLATE, { useWithBlock: !!rowTemplate });\n            },\n            _bindConfigurator: function () {\n                var configurator = this.options.configurator;\n                if (configurator) {\n                    $(configurator).kendoPivotConfigurator('setDataSource', this.dataSource);\n                }\n            },\n            cellInfoByElement: function (element) {\n                element = $(element);\n                return this.cellInfo(element.index(), element.parent('tr').index());\n            },\n            cellInfo: function (columnIndex, rowIndex) {\n                var contentBuilder = this._contentBuilder;\n                var columnInfo = contentBuilder.columnIndexes[columnIndex || 0];\n                var rowInfo = contentBuilder.rowIndexes[rowIndex || 0];\n                var dataIndex;\n                if (!columnInfo || !rowInfo) {\n                    return null;\n                }\n                dataIndex = rowInfo.index * contentBuilder.rowLength + columnInfo.index;\n                return {\n                    columnTuple: columnInfo.tuple,\n                    rowTuple: rowInfo.tuple,\n                    measure: columnInfo.measure || rowInfo.measure,\n                    dataItem: this.dataSource.view()[dataIndex]\n                };\n            },\n            setDataSource: function (dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n                if (this.measuresTarget) {\n                    this.measuresTarget.setDataSource(dataSource);\n                }\n                if (this.rowsTarget) {\n                    this.rowsTarget.setDataSource(dataSource);\n                }\n                if (this.columnsTarget) {\n                    this.columnsTarget.setDataSource(dataSource);\n                }\n                this._bindConfigurator();\n                if (this.options.autoBind) {\n                    dataSource.fetch();\n                }\n            },\n            setOptions: function (options) {\n                Widget.fn.setOptions.call(this, options);\n                this._templates();\n            },\n            destroy: function () {\n                Widget.fn.destroy.call(this);\n                clearTimeout(this._headerReflowTimeout);\n            },\n            _dataSource: function () {\n                var that = this;\n                var dataSource = that.options.dataSource;\n                dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;\n                if (that.dataSource && this._refreshHandler) {\n                    that.dataSource.unbind(CHANGE, that._refreshHandler).unbind(STATERESET, that._stateResetHandler).unbind(PROGRESS, that._progressHandler).unbind(ERROR, that._errorHandler);\n                } else {\n                    that._refreshHandler = $.proxy(that.refresh, that);\n                    that._progressHandler = $.proxy(that._requestStart, that);\n                    that._stateResetHandler = $.proxy(that._stateReset, that);\n                    that._errorHandler = $.proxy(that._error, that);\n                }\n                that.dataSource = kendo.data.PivotDataSource.create(dataSource).bind(CHANGE, that._refreshHandler).bind(PROGRESS, that._progressHandler).bind(STATERESET, that._stateResetHandler).bind(ERROR, that._errorHandler);\n            },\n            _error: function () {\n                this._progress(false);\n            },\n            _requestStart: function () {\n                this._progress(true);\n            },\n            _stateReset: function () {\n                this._columnBuilder.reset();\n                this._rowBuilder.reset();\n            },\n            _wrapper: function () {\n                var height = this.options.height;\n                this.wrapper = this.element.addClass('k-widget k-pivot');\n                if (height) {\n                    this.wrapper.css('height', height);\n                }\n            },\n            _measureFields: function () {\n                this.measureFields = $(DIV).addClass('k-pivot-toolbar k-header k-settings-measures');\n                this.measuresTarget = this._createSettingTarget(this.measureFields, {\n                    setting: 'measures',\n                    messages: { empty: this.options.messages.measureFields }\n                });\n            },\n            _createSettingTarget: function (element, options) {\n                var template = '<span tabindex=\"0\" class=\"k-button\" data-' + kendo.ns + 'name=\"${data.name}\">${data.name}';\n                var sortable = options.sortable;\n                var icons = '';\n                if (sortable) {\n                    icons += '#if (data.sortIcon) {#';\n                    icons += '<span class=\"k-icon ${data.sortIcon}-sm\"></span>';\n                    icons += '#}#';\n                }\n                if (options.filterable || sortable) {\n                    icons += '<span class=\"k-icon k-i-more-vertical k-setting-fieldmenu\"></span>';\n                }\n                if (this.options.reorderable) {\n                    icons += '<span class=\"k-icon k-i-close k-setting-delete\"></span>';\n                }\n                if (icons) {\n                    template += '<span class=\"k-field-actions\">' + icons + '</span>';\n                }\n                template += '</span>';\n                return new kendo.ui.PivotSettingTarget(element, $.extend({\n                    template: template,\n                    emptyTemplate: '<span class=\"k-empty\">${data}</span>',\n                    enabled: this.options.reorderable,\n                    dataSource: this.dataSource\n                }, options));\n            },\n            _initSettingTargets: function () {\n                this.columnsTarget = this._createSettingTarget(this.columnFields, {\n                    connectWith: this.rowFields,\n                    setting: 'columns',\n                    filterable: this.options.filterable,\n                    sortable: this.options.sortable,\n                    messages: {\n                        empty: this.options.messages.columnFields,\n                        fieldMenu: this.options.messages.fieldMenu\n                    }\n                });\n                this.rowsTarget = this._createSettingTarget(this.rowFields, {\n                    connectWith: this.columnFields,\n                    setting: 'rows',\n                    filterable: this.options.filterable,\n                    sortable: this.options.sortable,\n                    messages: {\n                        empty: this.options.messages.rowFields,\n                        fieldMenu: this.options.messages.fieldMenu\n                    }\n                });\n            },\n            _createLayout: function () {\n                var that = this;\n                var layoutTable = $(LAYOUT_TABLE);\n                var leftContainer = layoutTable.find('.k-pivot-rowheaders');\n                var rightContainer = layoutTable.find('.k-pivot-table');\n                var gridWrapper = $(DIV).addClass('k-grid k-widget');\n                that._measureFields();\n                that.columnFields = $(DIV).addClass('k-pivot-toolbar k-header k-settings-columns');\n                that.rowFields = $(DIV).addClass('k-pivot-toolbar k-header k-settings-rows');\n                that.columnsHeader = $('<div class=\"k-grid-header-wrap\" />').wrap('<div class=\"k-grid-header\" />');\n                that.columnsHeader.parent().css('padding-right', kendo.support.scrollbar());\n                that.rowsHeader = $('<div class=\"k-grid k-widget k-alt\"/>');\n                that.content = $('<div class=\"k-grid-content\" />');\n                leftContainer.append(that.measureFields);\n                leftContainer.append(that.rowFields);\n                leftContainer.append(that.rowsHeader);\n                gridWrapper.append(that.columnsHeader.parent());\n                gridWrapper.append(that.content);\n                rightContainer.append(that.columnFields);\n                rightContainer.append(gridWrapper);\n                that.wrapper.append(layoutTable);\n                that.columnsHeaderTree = new kendo.dom.Tree(that.columnsHeader[0]);\n                that.rowsHeaderTree = new kendo.dom.Tree(that.rowsHeader[0]);\n                that.contentTree = new kendo.dom.Tree(that.content[0]);\n                that._initSettingTargets();\n            },\n            _progress: function (toggle) {\n                kendo.ui.progress(this.wrapper, toggle);\n            },\n            _resize: function () {\n                if (this.content[0].firstChild) {\n                    this._setSectionsWidth();\n                    this._setSectionsHeight();\n                    this._setContentWidth();\n                    this._setContentHeight();\n                    this._columnHeaderReflow();\n                }\n            },\n            _columnHeaderReflow: function () {\n                var columnTable = this.columnsHeader.children('table');\n                if (!kendo.support.browser.mozilla) {\n                    return;\n                }\n                clearTimeout(this._headerReflowTimeout);\n                columnTable.css('table-layout', 'auto');\n                this._headerReflowTimeout = setTimeout(function () {\n                    columnTable.css('table-layout', '');\n                });\n            },\n            _setSectionsWidth: function () {\n                var rowsHeader = this.rowsHeader;\n                var leftColumn = rowsHeader.parent('.k-pivot-rowheaders').width(AUTO);\n                var width;\n                width = Math.max(outerWidth(this.measureFields), outerWidth(this.rowFields));\n                width = Math.max(rowsHeader.children('table').width(), width);\n                leftColumn.width(width);\n            },\n            _setSectionsHeight: function () {\n                var measureFieldsHeight = this.measureFields.height(AUTO).height();\n                var columnFieldsHeight = this.columnFields.height(AUTO).height();\n                var rowFieldsHeight = this.rowFields.height(AUTO).innerHeight();\n                var columnsHeight = this.columnsHeader.height(AUTO).innerHeight();\n                var padding = rowFieldsHeight - this.rowFields.height();\n                var firstRowHeight = columnFieldsHeight > measureFieldsHeight ? columnFieldsHeight : measureFieldsHeight;\n                var secondRowHeight = columnsHeight > rowFieldsHeight ? columnsHeight : rowFieldsHeight;\n                this.measureFields.height(firstRowHeight);\n                this.columnFields.height(firstRowHeight);\n                this.rowFields.height(secondRowHeight - padding);\n                this.columnsHeader.height(secondRowHeight);\n            },\n            _setContentWidth: function () {\n                var contentTable = this.content.find('table');\n                var columnTable = this.columnsHeader.children('table');\n                var rowLength = contentTable.children('colgroup').children().length;\n                var calculatedWidth = rowLength * this.options.columnWidth;\n                var minWidth = Math.ceil(calculatedWidth / this.content.width() * 100);\n                if (minWidth < 100) {\n                    minWidth = 100;\n                }\n                contentTable.add(columnTable).css('width', minWidth + '%');\n                this._resetColspan(columnTable);\n            },\n            _setContentHeight: function () {\n                var that = this;\n                var content = that.content;\n                var rowsHeader = that.rowsHeader;\n                var innerHeight = that.wrapper.innerHeight();\n                var scrollbar = kendo.support.scrollbar();\n                var skipScrollbar = content[0].offsetHeight === content[0].clientHeight;\n                var height = that.options.height;\n                if (that.wrapper.is(':visible')) {\n                    if (!innerHeight || !height) {\n                        if (skipScrollbar) {\n                            scrollbar = 0;\n                        }\n                        content.height('auto');\n                        rowsHeader.height(content.height() - scrollbar);\n                        return;\n                    }\n                    innerHeight -= outerHeight(that.columnFields);\n                    innerHeight -= outerHeight(that.columnsHeader);\n                    if (innerHeight <= scrollbar * 2) {\n                        innerHeight = scrollbar * 2 + 1;\n                        if (!skipScrollbar) {\n                            innerHeight += scrollbar;\n                        }\n                    }\n                    content.height(innerHeight);\n                    if (skipScrollbar) {\n                        scrollbar = 0;\n                    }\n                    rowsHeader.height(innerHeight - scrollbar);\n                }\n            },\n            _resetColspan: function (columnTable) {\n                var that = this;\n                var cell = columnTable.children('tbody').children(':first').children(':first');\n                if (that._colspan === undefined) {\n                    that._colspan = cell.attr('colspan');\n                }\n                cell.attr('colspan', 1);\n                clearTimeout(that._layoutTimeout);\n                that._layoutTimeout = setTimeout(function () {\n                    cell.attr('colspan', that._colspan);\n                    that._colspan = undefined;\n                });\n            },\n            _axisMeasures: function (axis) {\n                var result = [];\n                var dataSource = this.dataSource;\n                var measures = dataSource.measures();\n                var hasMeasure = measures.length > 1 || measures[0] && measures[0].type;\n                if (dataSource.measuresAxis() === axis) {\n                    if (dataSource[axis]().length === 0 || hasMeasure) {\n                        result = measures;\n                    }\n                }\n                return result;\n            },\n            items: function () {\n                return [];\n            },\n            refresh: function () {\n                var that = this;\n                var dataSource = that.dataSource;\n                var axes = dataSource.axes();\n                var columns = (axes.columns || {}).tuples || [];\n                var rows = (axes.rows || {}).tuples || [];\n                var columnBuilder = that._columnBuilder;\n                var rowBuilder = that._rowBuilder;\n                var columnAxis = {};\n                var rowAxis = {};\n                if (that.trigger(DATABINDING, { action: 'rebind' })) {\n                    return;\n                }\n                columnBuilder.measures = that._axisMeasures(AXIS_COLUMNS);\n                rowBuilder.measures = that._axisMeasures(AXIS_ROWS);\n                that.columnsHeaderTree.render(columnBuilder.build(columns));\n                that.rowsHeaderTree.render(rowBuilder.build(rows));\n                columnAxis = {\n                    indexes: columnBuilder._indexes,\n                    measures: columnBuilder.measures,\n                    metadata: columnBuilder.metadata\n                };\n                rowAxis = {\n                    indexes: rowBuilder._indexes,\n                    measures: rowBuilder.measures,\n                    metadata: rowBuilder.metadata\n                };\n                that.contentTree.render(that._contentBuilder.build(dataSource.view(), columnAxis, rowAxis));\n                that._resize();\n                if (that.touchScroller) {\n                    that.touchScroller.contentResized();\n                } else {\n                    var touchScroller = kendo.touchScroller(that.content);\n                    if (touchScroller && touchScroller.movable) {\n                        that.touchScroller = touchScroller;\n                        touchScroller.movable.bind('change', function (e) {\n                            that.columnsHeader.scrollLeft(-e.sender.x);\n                            that.rowsHeader.scrollTop(-e.sender.y);\n                        });\n                    }\n                }\n                that._progress(false);\n                that.trigger(DATABOUND);\n            },\n            _scrollable: function () {\n                var that = this;\n                var columnsHeader = that.columnsHeader;\n                var rowsHeader = that.rowsHeader;\n                that.content.scroll(function () {\n                    columnsHeader.scrollLeft(this.scrollLeft);\n                    rowsHeader.scrollTop(this.scrollTop);\n                });\n                rowsHeader.bind('DOMMouseScroll' + NS + ' mousewheel' + NS, $.proxy(that._wheelScroll, that));\n            },\n            _wheelScroll: function (e) {\n                if (e.ctrlKey) {\n                    return;\n                }\n                var delta = kendo.wheelDeltaY(e);\n                var scrollTop = this.content.scrollTop();\n                if (delta) {\n                    e.preventDefault();\n                    $(e.currentTarget).one('wheel' + NS, false);\n                    this.rowsHeader.scrollTop(scrollTop + -delta);\n                    this.content.scrollTop(scrollTop + -delta);\n                }\n            }\n        });\n        var element = kendo.dom.element;\n        var htmlNode = kendo.dom.html;\n        var createMetadata = function (levelNum, memberIdx) {\n            return {\n                maxChildren: 0,\n                children: 0,\n                maxMembers: 0,\n                members: 0,\n                measures: 1,\n                levelNum: levelNum,\n                parentMember: memberIdx !== 0\n            };\n        };\n        var buildPath = function (tuple, index) {\n            var path = [];\n            var idx = 0;\n            for (; idx <= index; idx++) {\n                path.push(tuple.members[idx].name);\n            }\n            return path;\n        };\n        var tupleName = function (tuple, index) {\n            var name = '';\n            var idx = 0;\n            for (; idx <= index; idx++) {\n                name += tuple.members[idx].name;\n            }\n            return name;\n        };\n        var ColumnBuilder = Class.extend({\n            init: function () {\n                this.measures = 1;\n                this.metadata = {};\n            },\n            build: function (tuples) {\n                var tbody = this._tbody(tuples);\n                var colgroup = this._colGroup();\n                return [element('table', null, [\n                        colgroup,\n                        tbody\n                    ])];\n            },\n            reset: function () {\n                this.metadata = {};\n            },\n            _colGroup: function () {\n                var length = this._rowLength();\n                var children = [];\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    children.push(element('col', null));\n                }\n                return element('colgroup', null, children);\n            },\n            _tbody: function (tuples) {\n                var root = tuples[0];\n                this.map = {};\n                this.rows = [];\n                this.rootTuple = root;\n                this._indexes = [];\n                if (root) {\n                    this._buildRows(root, 0);\n                    this._normalize();\n                } else {\n                    this.rows.push(element('tr', null, [element('th', null, [htmlNode('&nbsp;')])]));\n                }\n                return element('tbody', null, this.rows);\n            },\n            _normalize: function () {\n                var rows = this.rows;\n                var rowsLength = rows.length;\n                var rowIdx = 0;\n                var row;\n                var cellsLength;\n                var cellIdx;\n                var cells;\n                var cell;\n                for (; rowIdx < rowsLength; rowIdx++) {\n                    row = rows[rowIdx];\n                    if (row.rowSpan === 1) {\n                        continue;\n                    }\n                    cells = row.children;\n                    cellIdx = 0;\n                    cellsLength = cells.length;\n                    for (; cellIdx < cellsLength; cellIdx++) {\n                        cell = cells[cellIdx];\n                        if (cell.tupleAll) {\n                            cell.attr.rowSpan = row.rowSpan;\n                        }\n                    }\n                }\n            },\n            _rowIndex: function (row) {\n                var rows = this.rows;\n                var length = rows.length;\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    if (rows[idx] === row) {\n                        break;\n                    }\n                }\n                return idx;\n            },\n            _rowLength: function () {\n                var cells = this.rows[0] ? this.rows[0].children : [];\n                var length = cells.length;\n                var rowLength = 0;\n                var idx = 0;\n                if (length) {\n                    for (; idx < length; idx++) {\n                        rowLength += cells[idx].attr.colSpan || 1;\n                    }\n                }\n                if (!rowLength) {\n                    rowLength = this.measures;\n                }\n                return rowLength;\n            },\n            _row: function (tuple, memberIdx, parentMember) {\n                var rootName = this.rootTuple.members[memberIdx].name;\n                var levelNum = tuple.members[memberIdx].levelNum;\n                var rowKey = rootName + levelNum;\n                var map = this.map;\n                var parentRow;\n                var children;\n                var row = map[rowKey];\n                if (!row) {\n                    row = element('tr', null, []);\n                    row.parentMember = parentMember;\n                    row.collapsed = 0;\n                    row.colSpan = 0;\n                    row.rowSpan = 1;\n                    map[rowKey] = row;\n                    parentRow = map[rootName + (Number(levelNum) - 1)];\n                    if (parentRow) {\n                        children = parentRow.children;\n                        if (children[1] && children[1].attr.className.indexOf('k-alt') === -1) {\n                            row.notFirst = true;\n                        } else {\n                            row.notFirst = parentRow.notFirst;\n                        }\n                    }\n                    this.rows.splice(this._rowIndex(parentRow) + 1, 0, row);\n                } else {\n                    row.notFirst = false;\n                    if (!row.parentMember || row.parentMember !== parentMember) {\n                        row.parentMember = parentMember;\n                        row.collapsed = 0;\n                        row.colSpan = 0;\n                    }\n                }\n                return row;\n            },\n            _measures: function (measures, tuple, className) {\n                var map = this.map;\n                var row = map.measureRow;\n                var measure;\n                if (!row) {\n                    row = element('tr', null, []);\n                    map.measureRow = row;\n                    this.rows.push(row);\n                }\n                for (var idx = 0, length = measures.length; idx < length; idx++) {\n                    measure = measures[idx];\n                    row.children.push(this._cell(className || '', [this._content(measure, tuple)], measure));\n                }\n                return length;\n            },\n            _content: function (member, tuple) {\n                return htmlNode(this.template({\n                    member: member,\n                    tuple: tuple\n                }));\n            },\n            _cell: function (className, children, member) {\n                var cell = element('th', { className: 'k-header' + className }, children);\n                cell.value = member.caption || member.name;\n                return cell;\n            },\n            _buildRows: function (tuple, memberIdx, parentMember) {\n                var members = tuple.members;\n                var member = members[memberIdx];\n                var nextMember = members[memberIdx + 1];\n                var row, childRow, children, childrenLength;\n                var cell, allCell, cellAttr;\n                var cellChildren = [];\n                var path;\n                var idx = 0;\n                var metadata;\n                var colSpan;\n                var collapsed = 0;\n                var memberCollapsed = 0;\n                if (member.measure) {\n                    this._measures(member.children, tuple);\n                    return;\n                }\n                path = kendo.stringify(buildPath(tuple, memberIdx));\n                row = this._row(tuple, memberIdx, parentMember);\n                children = member.children;\n                childrenLength = children.length;\n                metadata = this.metadata[path];\n                if (!metadata) {\n                    this.metadata[path] = metadata = createMetadata(Number(member.levelNum), memberIdx);\n                    metadata.rootLevelNum = Number(this.rootTuple.members[memberIdx].levelNum);\n                }\n                this._indexes.push({\n                    path: path,\n                    tuple: tuple\n                });\n                if (member.hasChildren) {\n                    if (metadata.expanded === false) {\n                        collapsed = metadata.maxChildren;\n                        row.collapsed += collapsed;\n                        metadata.children = 0;\n                        childrenLength = 0;\n                    }\n                    cellAttr = { className: 'k-icon ' + (childrenLength ? STATE_EXPANDED : STATE_COLLAPSED) };\n                    cellAttr[kendo.attr('path')] = path;\n                    cellChildren.push(element('span', cellAttr));\n                }\n                cellChildren.push(this._content(member, tuple));\n                cell = this._cell(row.notFirst ? ' k-first' : '', cellChildren, member);\n                row.children.push(cell);\n                row.colSpan += 1;\n                if (childrenLength) {\n                    allCell = this._cell(' k-alt', [this._content(member, tuple)], member);\n                    row.children.push(allCell);\n                    for (; idx < childrenLength; idx++) {\n                        childRow = this._buildRows(children[idx], memberIdx, member);\n                    }\n                    colSpan = childRow.colSpan;\n                    collapsed = childRow.collapsed;\n                    cell.attr.colSpan = colSpan;\n                    metadata.children = colSpan;\n                    metadata.members = 1;\n                    row.colSpan += colSpan;\n                    row.collapsed += collapsed;\n                    row.rowSpan = childRow.rowSpan + 1;\n                    if (nextMember) {\n                        if (nextMember.measure) {\n                            colSpan = this._measures(nextMember.children, tuple, ' k-alt');\n                        } else {\n                            childRow = this._buildRows(tuple, memberIdx + 1);\n                            colSpan = childRow.colSpan;\n                            row.collapsed += childRow.collapsed;\n                            memberCollapsed = childRow.collapsed;\n                        }\n                        allCell.attr.colSpan = colSpan;\n                        colSpan -= 1;\n                        metadata.members += colSpan;\n                        row.colSpan += colSpan;\n                    }\n                } else if (nextMember) {\n                    if (nextMember.measure) {\n                        colSpan = this._measures(nextMember.children, tuple);\n                    } else {\n                        childRow = this._buildRows(tuple, memberIdx + 1);\n                        colSpan = childRow.colSpan;\n                        row.collapsed += childRow.collapsed;\n                        memberCollapsed = childRow.collapsed;\n                    }\n                    metadata.members = colSpan;\n                    if (colSpan > 1) {\n                        cell.attr.colSpan = colSpan;\n                        row.colSpan += colSpan - 1;\n                    }\n                }\n                if (metadata.maxMembers < metadata.members + memberCollapsed) {\n                    metadata.maxMembers = metadata.members + memberCollapsed;\n                }\n                children = metadata.children + collapsed;\n                if (metadata.maxChildren < children) {\n                    metadata.maxChildren = children;\n                }\n                (allCell || cell).tupleAll = true;\n                return row;\n            }\n        });\n        var RowBuilder = Class.extend({\n            init: function () {\n                this.metadata = {};\n            },\n            build: function (tuples) {\n                var tbody = this._tbody(tuples);\n                var colgroup = this._colGroup();\n                return [element('table', null, [\n                        colgroup,\n                        tbody\n                    ])];\n            },\n            reset: function () {\n                this.metadata = {};\n            },\n            _rowLength: function () {\n                var children = this.rows[0].children;\n                var length = 0;\n                var idx = 0;\n                var cell = children[idx];\n                while (cell) {\n                    length += cell.attr.colSpan || 1;\n                    cell = children[++idx];\n                }\n                return length;\n            },\n            _colGroup: function () {\n                var length = this._rowLength();\n                var children = [];\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    children.push(element('col', null));\n                }\n                return element('colgroup', null, children);\n            },\n            _tbody: function (tuples) {\n                var root = tuples[0];\n                this.rootTuple = root;\n                this.rows = [];\n                this.map = {};\n                this._indexes = [];\n                if (root) {\n                    this._buildRows(root, 0);\n                    this._normalize();\n                } else {\n                    this.rows.push(element('tr', null, [element('td', null, [htmlNode('&nbsp;')])]));\n                }\n                return element('tbody', null, this.rows);\n            },\n            _normalize: function () {\n                var rows = this.rows;\n                var rowsLength = rows.length;\n                var rowIdx = 0;\n                var members = this.rootTuple.members;\n                var firstMemberName = members[0].name;\n                var membersLength = members.length;\n                var memberIdx = 0;\n                var row;\n                var cell;\n                var maxcolSpan;\n                var map = this.map;\n                var allRow;\n                for (; rowIdx < rowsLength; rowIdx++) {\n                    row = rows[rowIdx];\n                    for (memberIdx = 0; memberIdx < membersLength; memberIdx++) {\n                        maxcolSpan = this[members[memberIdx].name];\n                        cell = row.colSpan['dim' + memberIdx];\n                        if (cell && cell.colSpan < maxcolSpan) {\n                            cell.attr.colSpan = maxcolSpan - cell.colSpan + 1;\n                        }\n                    }\n                }\n                row = map[firstMemberName];\n                allRow = map[firstMemberName + 'all'];\n                if (row) {\n                    row.children[0].attr.className = 'k-first';\n                }\n                if (allRow) {\n                    allRow.children[0].attr.className += ' k-first';\n                }\n            },\n            _row: function (children) {\n                var row = element('tr', null, children);\n                row.rowSpan = 1;\n                row.colSpan = {};\n                this.rows.push(row);\n                return row;\n            },\n            _content: function (member, tuple) {\n                return htmlNode(this.template({\n                    member: member,\n                    tuple: tuple\n                }));\n            },\n            _cell: function (className, children, member) {\n                var cell = element('td', { className: className }, children);\n                cell.value = member.caption || member.name;\n                return cell;\n            },\n            _buildRows: function (tuple, memberIdx) {\n                var map = this.map;\n                var path;\n                var members = tuple.members;\n                var member = members[memberIdx];\n                var nextMember = members[memberIdx + 1];\n                var children = member.children;\n                var childrenLength = children.length;\n                var levelNum = Number(member.levelNum);\n                var rootName = this.rootTuple.members[memberIdx].name;\n                var tuplePath = buildPath(tuple, memberIdx - 1).join('');\n                var rootLevelNum = Number(this.rootTuple.members[memberIdx].levelNum);\n                var parentName = tuplePath + (rootLevelNum === levelNum ? '' : member.parentName || '');\n                var row = map[parentName + 'all'] || map[parentName];\n                var colSpan = levelNum + 1;\n                var cell, allCell;\n                var childRow, allRow;\n                var metadata;\n                var className;\n                var cellChildren = [];\n                var expandIconAttr;\n                var idx;\n                if (!row || row.hasChild) {\n                    row = this._row();\n                } else {\n                    row.hasChild = true;\n                }\n                if (member.measure) {\n                    className = row.allCell ? 'k-grid-footer' : '';\n                    row.children.push(this._cell(className, [this._content(children[0], tuple)], children[0]));\n                    row.rowSpan = childrenLength;\n                    for (idx = 1; idx < childrenLength; idx++) {\n                        this._row([this._cell(className, [this._content(children[idx], tuple)], children[idx])]);\n                    }\n                    return row;\n                }\n                map[tuplePath + member.name] = row;\n                path = kendo.stringify(buildPath(tuple, memberIdx));\n                metadata = this.metadata[path];\n                if (!metadata) {\n                    this.metadata[path] = metadata = createMetadata(levelNum, memberIdx);\n                    metadata.rootLevelNum = rootLevelNum;\n                }\n                this._indexes.push({\n                    path: path,\n                    tuple: tuple\n                });\n                if (member.hasChildren) {\n                    if (metadata.expanded === false) {\n                        childrenLength = 0;\n                        metadata.children = 0;\n                    }\n                    expandIconAttr = { className: 'k-icon ' + (childrenLength ? STATE_EXPANDED : STATE_COLLAPSED) };\n                    expandIconAttr[kendo.attr('path')] = path;\n                    cellChildren.push(element('span', expandIconAttr));\n                }\n                cellChildren.push(this._content(member, tuple));\n                className = row.allCell && !childrenLength ? 'k-grid-footer' : '';\n                cell = this._cell(className, cellChildren, member);\n                cell.colSpan = colSpan;\n                row.children.push(cell);\n                row.colSpan['dim' + memberIdx] = cell;\n                if (!this[rootName] || this[rootName] < colSpan) {\n                    this[rootName] = colSpan;\n                }\n                if (childrenLength) {\n                    row.allCell = false;\n                    row.hasChild = false;\n                    for (idx = 0; idx < childrenLength; idx++) {\n                        childRow = this._buildRows(children[idx], memberIdx);\n                        if (row !== childRow) {\n                            row.rowSpan += childRow.rowSpan;\n                        }\n                    }\n                    if (row.rowSpan > 1) {\n                        cell.attr.rowSpan = row.rowSpan;\n                    }\n                    metadata.children = row.rowSpan;\n                    allCell = this._cell('k-grid-footer', [this._content(member, tuple)], member);\n                    allCell.colSpan = colSpan;\n                    allRow = this._row([allCell]);\n                    allRow.colSpan['dim' + memberIdx] = allCell;\n                    allRow.allCell = true;\n                    map[tuplePath + member.name + 'all'] = allRow;\n                    if (nextMember) {\n                        childRow = this._buildRows(tuple, memberIdx + 1);\n                        allCell.attr.rowSpan = childRow.rowSpan;\n                    }\n                    row.rowSpan += allRow.rowSpan;\n                    metadata.members = allRow.rowSpan;\n                } else if (nextMember) {\n                    row.hasChild = false;\n                    this._buildRows(tuple, memberIdx + 1);\n                    (allCell || cell).attr.rowSpan = row.rowSpan;\n                    metadata.members = row.rowSpan;\n                }\n                if (metadata.maxChildren < metadata.children) {\n                    metadata.maxChildren = metadata.children;\n                }\n                if (metadata.maxMembers < metadata.members) {\n                    metadata.maxMembers = metadata.members;\n                }\n                return row;\n            }\n        });\n        var ContentBuilder = Class.extend({\n            init: function () {\n                this.columnAxis = {};\n                this.rowAxis = {};\n            },\n            build: function (data, columnAxis, rowAxis) {\n                var index = columnAxis.indexes[0];\n                var metadata = columnAxis.metadata[index ? index.path : undefined];\n                this.columnAxis = columnAxis;\n                this.rowAxis = rowAxis;\n                this.data = data;\n                this.rowLength = metadata ? metadata.maxChildren + metadata.maxMembers : columnAxis.measures.length || 1;\n                if (!this.rowLength) {\n                    this.rowLength = 1;\n                }\n                var tbody = this._tbody();\n                var colgroup = this._colGroup();\n                return [element('table', null, [\n                        colgroup,\n                        tbody\n                    ])];\n            },\n            _colGroup: function () {\n                var length = this.columnAxis.measures.length || 1;\n                var children = [];\n                var idx = 0;\n                if (this.rows[0]) {\n                    length = this.rows[0].children.length;\n                }\n                for (; idx < length; idx++) {\n                    children.push(element('col', null));\n                }\n                return element('colgroup', null, children);\n            },\n            _tbody: function () {\n                this.rows = [];\n                if (this.data[0]) {\n                    this.columnIndexes = this._indexes(this.columnAxis, this.rowLength);\n                    this.rowIndexes = this._indexes(this.rowAxis, Math.ceil(this.data.length / this.rowLength));\n                    this._buildRows();\n                } else {\n                    this.rows.push(element('tr', null, [element('td', null, [htmlNode('&nbsp;')])]));\n                }\n                return element('tbody', null, this.rows);\n            },\n            _indexes: function (axisInfo, total) {\n                var result = [];\n                var axisInfoMember;\n                var indexes = axisInfo.indexes;\n                var metadata = axisInfo.metadata;\n                var measures = axisInfo.measures;\n                var measuresLength = measures.length || 1;\n                var current;\n                var dataIdx = 0;\n                var firstEmpty = 0;\n                var idx = 0;\n                var length = indexes.length;\n                var measureIdx;\n                var index;\n                var children;\n                var skipChildren;\n                if (!length) {\n                    for (measureIdx = 0; measureIdx < measuresLength; measureIdx++) {\n                        result[measureIdx] = {\n                            index: measureIdx,\n                            measure: measures[measureIdx],\n                            tuple: null\n                        };\n                    }\n                    return result;\n                }\n                for (; idx < length; idx++) {\n                    axisInfoMember = indexes[idx];\n                    current = metadata[axisInfoMember.path];\n                    children = current.children + current.members;\n                    skipChildren = 0;\n                    if (children) {\n                        children -= measuresLength;\n                    }\n                    if (current.expanded === false && current.children !== current.maxChildren) {\n                        skipChildren = current.maxChildren;\n                    }\n                    if (current.parentMember && current.levelNum === current.rootLevelNum) {\n                        children = -1;\n                    }\n                    if (children > -1) {\n                        for (measureIdx = 0; measureIdx < measuresLength; measureIdx++) {\n                            index = children + measureIdx;\n                            if (!current.children) {\n                                index += firstEmpty;\n                            }\n                            result[children + firstEmpty + measureIdx] = {\n                                children: children,\n                                index: dataIdx,\n                                measure: measures[measureIdx],\n                                tuple: axisInfoMember.tuple\n                            };\n                            dataIdx += 1;\n                        }\n                        while (result[firstEmpty] !== undefined) {\n                            firstEmpty += 1;\n                        }\n                    }\n                    if (firstEmpty === total) {\n                        break;\n                    }\n                    dataIdx += skipChildren;\n                }\n                return result;\n            },\n            _buildRows: function () {\n                var rowIndexes = this.rowIndexes;\n                var length = rowIndexes.length;\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    var rowIndex = rowIndexes[idx];\n                    if (rowIndex) {\n                        this.rows.push(this._buildRow(rowIndex));\n                    }\n                }\n            },\n            _buildRow: function (rowInfo) {\n                var startIdx = rowInfo.index * this.rowLength;\n                var columnIndexes = this.columnIndexes;\n                var length = columnIndexes.length;\n                var columnInfo;\n                var cells = [];\n                var idx = 0;\n                var templateInfo;\n                var cell, cellContent;\n                var attr, dataItem, measure;\n                for (; idx < length; idx++) {\n                    columnInfo = columnIndexes[idx];\n                    if (columnInfo === undefined) {\n                        continue;\n                    }\n                    attr = {};\n                    if (columnInfo.children) {\n                        attr.className = 'k-alt';\n                    }\n                    cellContent = '';\n                    dataItem = this.data[startIdx + columnInfo.index];\n                    measure = columnInfo.measure || rowInfo.measure;\n                    templateInfo = {\n                        columnTuple: columnInfo.tuple,\n                        rowTuple: rowInfo.tuple,\n                        measure: measure,\n                        dataItem: dataItem\n                    };\n                    if (dataItem.value !== '' && measure && measure.type) {\n                        if (measure.type === 'status') {\n                            cellContent = this.kpiStatusTemplate(templateInfo);\n                        } else if (measure.type === 'trend') {\n                            cellContent = this.kpiTrendTemplate(templateInfo);\n                        }\n                    }\n                    if (!cellContent) {\n                        cellContent = this.dataTemplate(templateInfo);\n                    }\n                    cell = element('td', attr, [htmlNode(cellContent)]);\n                    cell.value = dataItem.value;\n                    cells.push(cell);\n                }\n                attr = {};\n                if (rowInfo.children) {\n                    attr.className = 'k-grid-footer';\n                }\n                return element('tr', attr, cells);\n            }\n        });\n        ui.plugin(PivotGrid);\n        kendo.PivotExcelExporter = kendo.Class.extend({\n            init: function (options) {\n                this.options = options;\n                this.widget = options.widget;\n                this.dataSource = this.widget.dataSource;\n            },\n            _columns: function () {\n                var columnHeaderTable = this.widget.columnsHeaderTree.children[0];\n                var rowHeaderTable = this.widget.rowsHeaderTree.children[0];\n                var columnHeaderLength = columnHeaderTable.children[0].children.length;\n                var rowHeaderLength = rowHeaderTable.children[0].children.length;\n                var width = this.widget.options.columnWidth;\n                var result = [];\n                var idx;\n                if (rowHeaderLength && this.dataSource.data()[0]) {\n                    for (idx = 0; idx < rowHeaderLength; idx++) {\n                        result.push({ autoWidth: true });\n                    }\n                }\n                for (idx = 0; idx < columnHeaderLength; idx++) {\n                    result.push({\n                        autoWidth: false,\n                        width: width\n                    });\n                }\n                return result;\n            },\n            _cells: function (rows, type, callback) {\n                var result = [];\n                var i = 0;\n                var length = rows.length;\n                var cellsLength;\n                var row, cells;\n                var j, cell;\n                for (; i < length; i++) {\n                    row = [];\n                    cells = rows[i].children;\n                    cellsLength = cells.length;\n                    for (j = 0; j < cellsLength; j++) {\n                        cell = cells[j];\n                        row.push({\n                            background: '#7a7a7a',\n                            color: '#fff',\n                            value: cell.value,\n                            colSpan: cell.attr.colSpan || 1,\n                            rowSpan: cell.attr.rowSpan || 1\n                        });\n                    }\n                    if (callback) {\n                        callback(row, i);\n                    }\n                    result.push({\n                        cells: row,\n                        type: type\n                    });\n                }\n                return result;\n            },\n            _rows: function () {\n                var columnHeaderTable = this.widget.columnsHeaderTree.children[0];\n                var rowHeaderTable = this.widget.rowsHeaderTree.children[0];\n                var columnHeaderLength = columnHeaderTable.children[0].children.length;\n                var rowHeaderLength = rowHeaderTable.children[0].children.length;\n                var columnHeaderRows = columnHeaderTable.children[1].children;\n                var rowHeaderRows = rowHeaderTable.children[1].children;\n                var contentRows = this.widget.contentTree.children[0].children[1].children;\n                var columnRows = this._cells(columnHeaderRows, 'header');\n                if (rowHeaderLength) {\n                    columnRows[0].cells.splice(0, 0, {\n                        background: '#7a7a7a',\n                        color: '#fff',\n                        value: '',\n                        colSpan: rowHeaderLength,\n                        rowSpan: columnHeaderRows.length\n                    });\n                }\n                var dataCallback = function (row, index) {\n                    var j = 0;\n                    var cell, value;\n                    var cells = contentRows[index].children;\n                    for (; j < columnHeaderLength; j++) {\n                        cell = cells[j];\n                        value = Number(cell.value);\n                        if (isNaN(value)) {\n                            value = cell.value;\n                        }\n                        row.push({\n                            background: '#dfdfdf',\n                            color: '#333',\n                            value: value,\n                            colSpan: 1,\n                            rowSpan: 1\n                        });\n                    }\n                };\n                var rowRows = this._cells(rowHeaderRows, 'data', dataCallback);\n                return columnRows.concat(rowRows);\n            },\n            _freezePane: function () {\n                var columnHeaderTable = this.widget.columnsHeaderTree.children[0];\n                var rowHeaderTable = this.widget.rowsHeaderTree.children[0];\n                var rowHeaderLength = rowHeaderTable.children[0].children.length;\n                var columnHeaderRows = columnHeaderTable.children[1].children;\n                return {\n                    colSplit: rowHeaderLength,\n                    rowSplit: columnHeaderRows.length\n                };\n            },\n            workbook: function () {\n                var promise;\n                if (this.dataSource.view()[0]) {\n                    promise = $.Deferred();\n                    promise.resolve();\n                } else {\n                    promise = this.dataSource.fetch();\n                }\n                return promise.then($.proxy(function () {\n                    return {\n                        sheets: [{\n                                columns: this._columns(),\n                                rows: this._rows(),\n                                freezePane: this._freezePane(),\n                                filter: null\n                            }]\n                    };\n                }, this));\n            }\n        });\n        var PivotExcelMixin = {\n            extend: function (proto) {\n                proto.events.push('excelExport');\n                proto.options.excel = $.extend(proto.options.excel, this.options);\n                proto.saveAsExcel = this.saveAsExcel;\n            },\n            options: {\n                proxyURL: '',\n                filterable: false,\n                fileName: 'Export.xlsx'\n            },\n            saveAsExcel: function () {\n                var excel = this.options.excel || {};\n                var exporter = new kendo.PivotExcelExporter({ widget: this });\n                exporter.workbook().then($.proxy(function (book) {\n                    if (!this.trigger('excelExport', { workbook: book })) {\n                        var workbook = new kendo.ooxml.Workbook(book);\n                        workbook.toDataURLAsync().then(function (dataURI) {\n                            kendo.saveAs({\n                                dataURI: dataURI,\n                                fileName: book.fileName || excel.fileName,\n                                proxyURL: excel.proxyURL,\n                                forceProxy: excel.forceProxy\n                            });\n                        });\n                    }\n                }, this));\n            }\n        };\n        kendo.PivotExcelMixin = PivotExcelMixin;\n        if (kendo.ooxml && kendo.ooxml.Workbook) {\n            PivotExcelMixin.extend(PivotGrid.prototype);\n        }\n        if (kendo.PDFMixin) {\n            kendo.PDFMixin.extend(PivotGrid.prototype);\n            PivotGrid.fn._drawPDF = function () {\n                return this._drawPDFShadow({ width: this.wrapper.width() }, { avoidLinks: this.options.pdf.avoidLinks });\n            };\n        }\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('kendo.pivot.fieldmenu', [\n        'kendo.pivotgrid',\n        'kendo.menu',\n        'kendo.window',\n        'kendo.treeview',\n        'kendo.dropdownlist'\n    ], f);\n}(function () {\n    var __meta__ = {\n        id: 'pivot.fieldmenu',\n        name: 'PivotFieldMenu',\n        category: 'web',\n        description: 'The PivotFieldMenu widget allows the user to filter on fields displayed in PivotGrid',\n        depends: [\n            'menu',\n            'window',\n            'treeview',\n            'dropdownlist'\n        ],\n        advanced: true\n    };\n    (function ($, undefined) {\n        var kendo = window.kendo;\n        var ui = kendo.ui;\n        var MENU = 'kendoContextMenu';\n        var proxy = $.proxy;\n        var NS = '.kendoPivotFieldMenu';\n        var Widget = ui.Widget;\n        var FILTER_ITEM = 'k-filter-item';\n        var ARIA_LABEL = 'aria-label';\n        var PivotFieldMenu = Widget.extend({\n            init: function (element, options) {\n                Widget.fn.init.call(this, element, options);\n                this._dataSource();\n                this._layout();\n                kendo.notify(this);\n            },\n            events: [],\n            options: {\n                name: 'PivotFieldMenu',\n                filter: null,\n                filterable: true,\n                sortable: true,\n                messages: {\n                    info: 'Show items with value that:',\n                    sortAscending: 'Sort Ascending',\n                    sortDescending: 'Sort Descending',\n                    filterFields: 'Fields Filter',\n                    filter: 'Filter',\n                    include: 'Include Fields...',\n                    title: 'Fields to include',\n                    clear: 'Clear',\n                    ok: 'OK',\n                    cancel: 'Cancel',\n                    operators: {\n                        contains: 'Contains',\n                        doesnotcontain: 'Does not contain',\n                        startswith: 'Starts with',\n                        endswith: 'Ends with',\n                        eq: 'Is equal to',\n                        neq: 'Is not equal to'\n                    }\n                }\n            },\n            _layout: function () {\n                var options = this.options;\n                this.wrapper = $(kendo.template(MENUTEMPLATE)({\n                    ns: kendo.ns,\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    messages: options.messages\n                }));\n                this.menu = this.wrapper[MENU]({\n                    filter: options.filter,\n                    target: this.element,\n                    orientation: 'vertical',\n                    showOn: 'click',\n                    closeOnClick: false,\n                    open: proxy(this._menuOpen, this),\n                    select: proxy(this._select, this),\n                    copyAnchorStyles: false\n                }).data(MENU);\n                this._createWindow();\n                if (options.filterable) {\n                    this._initFilterForm();\n                }\n            },\n            _initFilterForm: function () {\n                var filterForm = this.menu.element.find('.' + FILTER_ITEM);\n                var filterProxy = proxy(this._filter, this);\n                this._filterOperator = new kendo.ui.DropDownList(filterForm.find('select'));\n                this._filterValue = filterForm.find('.k-textbox');\n                this._updateFilterAriaLabel();\n                filterForm.on('submit' + NS, filterProxy).on('click' + NS, '.k-button-filter', filterProxy).on('click' + NS, '.k-button-clear', proxy(this._reset, this));\n            },\n            _setFilterForm: function (expression) {\n                var filterOperator = this._filterOperator;\n                var operator = '';\n                var value = '';\n                if (expression) {\n                    operator = expression.operator;\n                    value = expression.value;\n                }\n                filterOperator.value(operator);\n                if (!filterOperator.value()) {\n                    filterOperator.select(0);\n                }\n                this._filterValue.val(value);\n            },\n            _clearFilters: function (member) {\n                var filter = this.dataSource.filter() || {};\n                var expressions;\n                var idx = 0;\n                var length;\n                filter.filters = filter.filters || [];\n                expressions = findFilters(filter, member);\n                for (length = expressions.length; idx < length; idx++) {\n                    filter.filters.splice(filter.filters.indexOf(expressions[idx]), 1);\n                }\n                return filter;\n            },\n            _convert: function (value) {\n                var schema = this.dataSource.options.schema;\n                var field = ((schema.model || {}).fields || {})[this.currentMember];\n                if (field) {\n                    if (field.type === 'number') {\n                        value = parseFloat(value);\n                    } else if (field.type === 'boolean') {\n                        value = Boolean($.parseJSON(value));\n                    }\n                }\n                return value;\n            },\n            _filter: function (e) {\n                var that = this;\n                var value = that._convert(that._filterValue.val());\n                e.preventDefault();\n                if (value === '') {\n                    that.menu.close();\n                    return;\n                }\n                var expression = {\n                    field: that.currentMember,\n                    operator: that._filterOperator.value(),\n                    value: value\n                };\n                var filter = that._clearFilters(that.currentMember);\n                filter.filters.push(expression);\n                that.dataSource.filter(filter);\n                that.menu.close();\n            },\n            _updateFilterAriaLabel: function () {\n                var filterForm = this.menu.element.find('.' + FILTER_ITEM);\n                var selectedOperator = this._filterOperator.value();\n                var selectedOperatorName = this.options.messages.operators[selectedOperator];\n                filterForm.find('select').attr(ARIA_LABEL, selectedOperatorName);\n            },\n            _reset: function (e) {\n                var that = this;\n                var filter = that._clearFilters(that.currentMember);\n                e.preventDefault();\n                if (!filter.filters[0]) {\n                    filter = {};\n                }\n                that.dataSource.filter(filter);\n                that._setFilterForm(null);\n                that.menu.close();\n            },\n            _sort: function (dir) {\n                var field = this.currentMember;\n                var expressions = this.dataSource.sort() || [];\n                expressions = removeExpr(expressions, field);\n                expressions.push({\n                    field: field,\n                    dir: dir\n                });\n                this.dataSource.sort(expressions);\n                this.menu.close();\n            },\n            setDataSource: function (dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n            },\n            _dataSource: function () {\n                this.dataSource = kendo.data.PivotDataSource.create(this.options.dataSource);\n            },\n            _createWindow: function () {\n                var messages = this.options.messages;\n                this.includeWindow = $(kendo.template(WINDOWTEMPLATE)({ messages: messages })).on('click' + NS, '.k-button-ok', proxy(this._applyIncludes, this)).on('click' + NS, '.k-button-cancel', proxy(this._closeWindow, this));\n                this.includeWindow = new ui.Window(this.includeWindow, {\n                    title: messages.title,\n                    visible: false,\n                    resizable: false,\n                    open: proxy(this._windowOpen, this)\n                });\n            },\n            _applyIncludes: function (e) {\n                var checkedNodes = [];\n                var resultExpression;\n                var view = this.treeView.dataSource.view();\n                var rootChecked = view[0].checked;\n                var filter = this.dataSource.filter();\n                var existingExpression = findFilters(filter, this.currentMember, 'in')[0];\n                checkedNodeIds(view, checkedNodes);\n                if (existingExpression) {\n                    if (rootChecked) {\n                        filter.filters.splice(filter.filters.indexOf(existingExpression), 1);\n                        if (!filter.filters.length) {\n                            filter = {};\n                        }\n                    } else {\n                        existingExpression.value = checkedNodes.join(',');\n                    }\n                    resultExpression = filter;\n                }\n                if (checkedNodes.length) {\n                    if (!resultExpression && !rootChecked) {\n                        resultExpression = {\n                            field: this.currentMember,\n                            operator: 'in',\n                            value: checkedNodes.join(',')\n                        };\n                        if (filter) {\n                            filter.filters.push(resultExpression);\n                            resultExpression = filter;\n                        }\n                    }\n                }\n                if (resultExpression) {\n                    this.dataSource.filter(resultExpression);\n                }\n                this._closeWindow(e);\n            },\n            _closeWindow: function (e) {\n                e.preventDefault();\n                this.includeWindow.close();\n            },\n            _treeViewDataSource: function () {\n                var that = this;\n                return kendo.data.HierarchicalDataSource.create({\n                    schema: {\n                        model: {\n                            id: 'uniqueName',\n                            hasChildren: function (item) {\n                                return parseInt(item.childrenCardinality, 10) > 0;\n                            }\n                        }\n                    },\n                    transport: {\n                        read: function (options) {\n                            var restrictions = {};\n                            var node = that.treeView.dataSource.get(options.data.uniqueName);\n                            var name = options.data.uniqueName;\n                            if (!name) {\n                                restrictions.levelUniqueName = that.currentMember + '.[(ALL)]';\n                            } else {\n                                restrictions.memberUniqueName = node.uniqueName.replace(/\\&/g, '&amp;');\n                                restrictions.treeOp = 1;\n                            }\n                            that.dataSource.schemaMembers(restrictions).done(function (data) {\n                                checkNodes(that.dataSource.filter(), that.currentMember, data);\n                                options.success(data);\n                            }).fail(options.error);\n                        }\n                    }\n                });\n            },\n            _createTreeView: function (element) {\n                var that = this;\n                that.treeView = new ui.TreeView(element, {\n                    autoBind: false,\n                    dataSource: that._treeViewDataSource(),\n                    dataTextField: 'caption',\n                    template: '#: data.item.caption || data.item.name #',\n                    checkboxes: { checkChildren: true },\n                    dataBound: function () {\n                        ui.progress(that.includeWindow.element, false);\n                    }\n                });\n            },\n            _menuOpen: function (e) {\n                if (!e.event) {\n                    return;\n                }\n                var attr = kendo.attr('name');\n                this.currentMember = $(e.event.target).closest('[' + attr + ']').attr(attr);\n                if (this.options.filterable) {\n                    this._setFilterForm(findFilters(this.dataSource.filter(), this.currentMember)[0]);\n                }\n            },\n            _select: function (e) {\n                var item = $(e.item);\n                $('.k-pivot-filter-window').not(this.includeWindow.element).kendoWindow('close');\n                if (item.hasClass('k-include-item')) {\n                    this.includeWindow.center().open();\n                } else if (item.hasClass('k-sort-asc')) {\n                    this._sort('asc');\n                } else if (item.hasClass('k-sort-desc')) {\n                    this._sort('desc');\n                } else if (item.hasClass(FILTER_ITEM)) {\n                    this._updateFilterAriaLabel();\n                }\n            },\n            _windowOpen: function () {\n                if (!this.treeView) {\n                    this._createTreeView(this.includeWindow.element.find('.k-treeview'));\n                }\n                ui.progress(this.includeWindow.element, true);\n                this.treeView.dataSource.read();\n            },\n            destroy: function () {\n                Widget.fn.destroy.call(this);\n                if (this.menu) {\n                    this.menu.destroy();\n                    this.menu = null;\n                }\n                if (this.treeView) {\n                    this.treeView.destroy();\n                    this.treeView = null;\n                }\n                if (this.includeWindow) {\n                    this.includeWindow.destroy();\n                    this.includeWindow = null;\n                }\n                this.wrapper = null;\n                this.element = null;\n            }\n        });\n        function removeExpr(expressions, name) {\n            var result = [];\n            for (var idx = 0, length = expressions.length; idx < length; idx++) {\n                if (expressions[idx].field !== name) {\n                    result.push(expressions[idx]);\n                }\n            }\n            return result;\n        }\n        function findFilters(filter, member, operator) {\n            if (!filter) {\n                return [];\n            }\n            filter = filter.filters;\n            var idx = 0;\n            var result = [];\n            var length = filter.length;\n            var filterOperator;\n            for (; idx < length; idx++) {\n                filterOperator = filter[idx].operator;\n                if ((!operator && filterOperator !== 'in' || filterOperator === operator) && filter[idx].field === member) {\n                    result.push(filter[idx]);\n                }\n            }\n            return result;\n        }\n        function checkNodes(filter, member, nodes) {\n            var values, idx = 0, length = nodes.length;\n            filter = findFilters(filter, member, 'in')[0];\n            if (!filter) {\n                for (; idx < length; idx++) {\n                    nodes[idx].checked = true;\n                }\n            } else {\n                values = filter.value.split(',');\n                for (; idx < length; idx++) {\n                    nodes[idx].checked = $.inArray(nodes[idx].uniqueName, values) >= 0;\n                }\n            }\n        }\n        function checkedNodeIds(nodes, checkedNodes) {\n            var idx, length = nodes.length;\n            for (idx = 0; idx < length; idx++) {\n                if (nodes[idx].checked && nodes[idx].level() !== 0) {\n                    checkedNodes.push(nodes[idx].uniqueName);\n                }\n                if (nodes[idx].hasChildren) {\n                    checkedNodeIds(nodes[idx].children.view(), checkedNodes);\n                }\n            }\n        }\n        var LABELMENUTEMPLATE = '<div class=\"k-filterable k-content\" tabindex=\"-1\" data-role=\"fieldmenu\">' + '<form class=\"k-filter-menu\">' + '<div>' + '<div class=\"k-filter-help-text\">#=messages.info#</div>' + '<select>' + '#for(var op in messages.operators){#' + '<option value=\"#=op#\">#=messages.operators[op]#</option>' + '#}#' + '</select>' + '<input class=\"k-textbox\" type=\"text\" ' + ARIA_LABEL + '=\"#=messages.filter#\" />' + '<div>' + '<a class=\"k-button k-primary k-button-filter\" href=\"\\\\#\">#=messages.filter#</a>' + '<a class=\"k-button k-button-clear\" href=\"\\\\#\">#=messages.clear#</a>' + '</div>' + '</div>' + '</form>' + '</div>';\n        var MENUTEMPLATE = '<ul class=\"k-pivot-fieldmenu\">' + '# if (sortable) {#' + '<li class=\"k-item k-sort-as